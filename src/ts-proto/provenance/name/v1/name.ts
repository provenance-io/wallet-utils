// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/name/v1/name.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.name.v1";

/** Params defines the set of params for the name module. */
export interface Params {
  /** maximum length of name segment to allow */
  maxSegmentLength: number;
  /** minimum length of name segment to allow */
  minSegmentLength: number;
  /** maximum number of name segments to allow.  Example: `foo.bar.baz` would be 3 */
  maxNameLevels: number;
  /** determines if unrestricted name keys are allowed or not */
  allowUnrestrictedNames: boolean;
}

/** NameRecord is a structure used to bind ownership of a name hierarchy to a collection of addresses */
export interface NameRecord {
  /** the bound name */
  name: string;
  /** the address the name resolved to */
  address: string;
  /** whether owner signature is required to add sub-names */
  restricted: boolean;
}

/**
 * CreateRootNameProposal details a proposal to create a new root name
 * that is controlled by a given owner and optionally restricted to the owner
 * for the sole creation of sub names.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgCreateRootNameRequest.
 *
 * @deprecated
 */
export interface CreateRootNameProposal {
  /** proposal title */
  title: string;
  /** proposal description */
  description: string;
  /** the bound name */
  name: string;
  /** the address the name will resolve to */
  owner: string;
  /** a flag that indicates if an owner signature is required to add sub-names */
  restricted: boolean;
}

/** Event emitted when name is bound. */
export interface EventNameBound {
  address: string;
  name: string;
  restricted: boolean;
}

/** Event emitted when name is unbound. */
export interface EventNameUnbound {
  address: string;
  name: string;
  restricted: boolean;
}

/** Event emitted when name is updated. */
export interface EventNameUpdate {
  address: string;
  name: string;
  restricted: boolean;
}

/** EventNameParamsUpdated event emitted when name params are updated. */
export interface EventNameParamsUpdated {
  allowUnrestrictedNames: string;
  maxNameLevels: string;
  minSegmentLength: string;
  maxSegmentLength: string;
}

function createBaseParams(): Params {
  return { maxSegmentLength: 0, minSegmentLength: 0, maxNameLevels: 0, allowUnrestrictedNames: false };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxSegmentLength !== 0) {
      writer.uint32(8).uint32(message.maxSegmentLength);
    }
    if (message.minSegmentLength !== 0) {
      writer.uint32(16).uint32(message.minSegmentLength);
    }
    if (message.maxNameLevels !== 0) {
      writer.uint32(24).uint32(message.maxNameLevels);
    }
    if (message.allowUnrestrictedNames !== false) {
      writer.uint32(32).bool(message.allowUnrestrictedNames);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxSegmentLength = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minSegmentLength = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxNameLevels = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.allowUnrestrictedNames = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      maxSegmentLength: isSet(object.maxSegmentLength) ? globalThis.Number(object.maxSegmentLength) : 0,
      minSegmentLength: isSet(object.minSegmentLength) ? globalThis.Number(object.minSegmentLength) : 0,
      maxNameLevels: isSet(object.maxNameLevels) ? globalThis.Number(object.maxNameLevels) : 0,
      allowUnrestrictedNames: isSet(object.allowUnrestrictedNames)
        ? globalThis.Boolean(object.allowUnrestrictedNames)
        : false,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.maxSegmentLength !== 0) {
      obj.maxSegmentLength = Math.round(message.maxSegmentLength);
    }
    if (message.minSegmentLength !== 0) {
      obj.minSegmentLength = Math.round(message.minSegmentLength);
    }
    if (message.maxNameLevels !== 0) {
      obj.maxNameLevels = Math.round(message.maxNameLevels);
    }
    if (message.allowUnrestrictedNames !== false) {
      obj.allowUnrestrictedNames = message.allowUnrestrictedNames;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.maxSegmentLength = object.maxSegmentLength ?? 0;
    message.minSegmentLength = object.minSegmentLength ?? 0;
    message.maxNameLevels = object.maxNameLevels ?? 0;
    message.allowUnrestrictedNames = object.allowUnrestrictedNames ?? false;
    return message;
  },
};

function createBaseNameRecord(): NameRecord {
  return { name: "", address: "", restricted: false };
}

export const NameRecord: MessageFns<NameRecord> = {
  encode(message: NameRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.restricted !== false) {
      writer.uint32(24).bool(message.restricted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NameRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNameRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NameRecord {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      restricted: isSet(object.restricted) ? globalThis.Boolean(object.restricted) : false,
    };
  },

  toJSON(message: NameRecord): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.restricted !== false) {
      obj.restricted = message.restricted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NameRecord>, I>>(base?: I): NameRecord {
    return NameRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NameRecord>, I>>(object: I): NameRecord {
    const message = createBaseNameRecord();
    message.name = object.name ?? "";
    message.address = object.address ?? "";
    message.restricted = object.restricted ?? false;
    return message;
  },
};

function createBaseCreateRootNameProposal(): CreateRootNameProposal {
  return { title: "", description: "", name: "", owner: "", restricted: false };
}

export const CreateRootNameProposal: MessageFns<CreateRootNameProposal> = {
  encode(message: CreateRootNameProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(34).string(message.owner);
    }
    if (message.restricted !== false) {
      writer.uint32(40).bool(message.restricted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRootNameProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRootNameProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRootNameProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      restricted: isSet(object.restricted) ? globalThis.Boolean(object.restricted) : false,
    };
  },

  toJSON(message: CreateRootNameProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.restricted !== false) {
      obj.restricted = message.restricted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRootNameProposal>, I>>(base?: I): CreateRootNameProposal {
    return CreateRootNameProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRootNameProposal>, I>>(object: I): CreateRootNameProposal {
    const message = createBaseCreateRootNameProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.restricted = object.restricted ?? false;
    return message;
  },
};

function createBaseEventNameBound(): EventNameBound {
  return { address: "", name: "", restricted: false };
}

export const EventNameBound: MessageFns<EventNameBound> = {
  encode(message: EventNameBound, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.restricted !== false) {
      writer.uint32(24).bool(message.restricted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventNameBound {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventNameBound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventNameBound {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      restricted: isSet(object.restricted) ? globalThis.Boolean(object.restricted) : false,
    };
  },

  toJSON(message: EventNameBound): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.restricted !== false) {
      obj.restricted = message.restricted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventNameBound>, I>>(base?: I): EventNameBound {
    return EventNameBound.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventNameBound>, I>>(object: I): EventNameBound {
    const message = createBaseEventNameBound();
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.restricted = object.restricted ?? false;
    return message;
  },
};

function createBaseEventNameUnbound(): EventNameUnbound {
  return { address: "", name: "", restricted: false };
}

export const EventNameUnbound: MessageFns<EventNameUnbound> = {
  encode(message: EventNameUnbound, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.restricted !== false) {
      writer.uint32(24).bool(message.restricted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventNameUnbound {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventNameUnbound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventNameUnbound {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      restricted: isSet(object.restricted) ? globalThis.Boolean(object.restricted) : false,
    };
  },

  toJSON(message: EventNameUnbound): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.restricted !== false) {
      obj.restricted = message.restricted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventNameUnbound>, I>>(base?: I): EventNameUnbound {
    return EventNameUnbound.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventNameUnbound>, I>>(object: I): EventNameUnbound {
    const message = createBaseEventNameUnbound();
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.restricted = object.restricted ?? false;
    return message;
  },
};

function createBaseEventNameUpdate(): EventNameUpdate {
  return { address: "", name: "", restricted: false };
}

export const EventNameUpdate: MessageFns<EventNameUpdate> = {
  encode(message: EventNameUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.restricted !== false) {
      writer.uint32(24).bool(message.restricted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventNameUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventNameUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventNameUpdate {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      restricted: isSet(object.restricted) ? globalThis.Boolean(object.restricted) : false,
    };
  },

  toJSON(message: EventNameUpdate): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.restricted !== false) {
      obj.restricted = message.restricted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventNameUpdate>, I>>(base?: I): EventNameUpdate {
    return EventNameUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventNameUpdate>, I>>(object: I): EventNameUpdate {
    const message = createBaseEventNameUpdate();
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.restricted = object.restricted ?? false;
    return message;
  },
};

function createBaseEventNameParamsUpdated(): EventNameParamsUpdated {
  return { allowUnrestrictedNames: "", maxNameLevels: "", minSegmentLength: "", maxSegmentLength: "" };
}

export const EventNameParamsUpdated: MessageFns<EventNameParamsUpdated> = {
  encode(message: EventNameParamsUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowUnrestrictedNames !== "") {
      writer.uint32(10).string(message.allowUnrestrictedNames);
    }
    if (message.maxNameLevels !== "") {
      writer.uint32(18).string(message.maxNameLevels);
    }
    if (message.minSegmentLength !== "") {
      writer.uint32(26).string(message.minSegmentLength);
    }
    if (message.maxSegmentLength !== "") {
      writer.uint32(34).string(message.maxSegmentLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventNameParamsUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventNameParamsUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allowUnrestrictedNames = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxNameLevels = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minSegmentLength = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.maxSegmentLength = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventNameParamsUpdated {
    return {
      allowUnrestrictedNames: isSet(object.allowUnrestrictedNames)
        ? globalThis.String(object.allowUnrestrictedNames)
        : "",
      maxNameLevels: isSet(object.maxNameLevels) ? globalThis.String(object.maxNameLevels) : "",
      minSegmentLength: isSet(object.minSegmentLength) ? globalThis.String(object.minSegmentLength) : "",
      maxSegmentLength: isSet(object.maxSegmentLength) ? globalThis.String(object.maxSegmentLength) : "",
    };
  },

  toJSON(message: EventNameParamsUpdated): unknown {
    const obj: any = {};
    if (message.allowUnrestrictedNames !== "") {
      obj.allowUnrestrictedNames = message.allowUnrestrictedNames;
    }
    if (message.maxNameLevels !== "") {
      obj.maxNameLevels = message.maxNameLevels;
    }
    if (message.minSegmentLength !== "") {
      obj.minSegmentLength = message.minSegmentLength;
    }
    if (message.maxSegmentLength !== "") {
      obj.maxSegmentLength = message.maxSegmentLength;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventNameParamsUpdated>, I>>(base?: I): EventNameParamsUpdated {
    return EventNameParamsUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventNameParamsUpdated>, I>>(object: I): EventNameParamsUpdated {
    const message = createBaseEventNameParamsUpdated();
    message.allowUnrestrictedNames = object.allowUnrestrictedNames ?? "";
    message.maxNameLevels = object.maxNameLevels ?? "";
    message.minSegmentLength = object.minSegmentLength ?? "";
    message.maxSegmentLength = object.maxSegmentLength ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
