// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/smartaccounts/v1/webauthn_key_types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.smartaccounts.v1";

/** PublicKeyData represents the public key data for WebAuthn credentials. */
export interface PublicKeyData {
  /** Decode the results to int by default. */
  publicKey: string;
  /** The type of key created. Should be OKP, EC2, ( RSA not supported). */
  keyType: Long;
  /** A COSEAlgorithmIdentifier for the algorithm used to derive the key signature. */
  algorithm: Long;
}

/** EC2PublicKeyData represents the EC2 public key data for WebAuthn credentials. */
export interface EC2PublicKeyData {
  /** Embedding PublicKeyData */
  publicKeyData?:
    | PublicKeyData
    | undefined;
  /** Curve: If the key type is EC2, the curve on which we derive the signature from. */
  curve: Long;
  /** XCoord: A byte string 32 bytes in length that holds the x coordinate of the key. */
  xCoord: Uint8Array;
  /** YCoord: A byte string 32 bytes in length that holds the y coordinate of the key. */
  yCoord: Uint8Array;
}

/** EdDSAPublicKeyData represents the EdDSA public key data for WebAuthn credentials. */
export interface EdDSAPublicKeyData {
  /** Embedding PublicKeyData */
  publicKeyData?:
    | PublicKeyData
    | undefined;
  /** Curve: Curve for OKP */
  curve: Long;
  /** XCoord: A byte string that holds the x coordinate of the key. */
  xCoord: Uint8Array;
}

function createBasePublicKeyData(): PublicKeyData {
  return { publicKey: "", keyType: Long.ZERO, algorithm: Long.ZERO };
}

export const PublicKeyData: MessageFns<PublicKeyData> = {
  encode(message: PublicKeyData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    if (!message.keyType.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.keyType.toString());
    }
    if (!message.algorithm.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.algorithm.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicKeyData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicKeyData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.keyType = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.algorithm = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicKeyData {
    return {
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      keyType: isSet(object.keyType) ? Long.fromValue(object.keyType) : Long.ZERO,
      algorithm: isSet(object.algorithm) ? Long.fromValue(object.algorithm) : Long.ZERO,
    };
  },

  toJSON(message: PublicKeyData): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (!message.keyType.equals(Long.ZERO)) {
      obj.keyType = (message.keyType || Long.ZERO).toString();
    }
    if (!message.algorithm.equals(Long.ZERO)) {
      obj.algorithm = (message.algorithm || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicKeyData>, I>>(base?: I): PublicKeyData {
    return PublicKeyData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicKeyData>, I>>(object: I): PublicKeyData {
    const message = createBasePublicKeyData();
    message.publicKey = object.publicKey ?? "";
    message.keyType = (object.keyType !== undefined && object.keyType !== null)
      ? Long.fromValue(object.keyType)
      : Long.ZERO;
    message.algorithm = (object.algorithm !== undefined && object.algorithm !== null)
      ? Long.fromValue(object.algorithm)
      : Long.ZERO;
    return message;
  },
};

function createBaseEC2PublicKeyData(): EC2PublicKeyData {
  return { publicKeyData: undefined, curve: Long.ZERO, xCoord: new Uint8Array(0), yCoord: new Uint8Array(0) };
}

export const EC2PublicKeyData: MessageFns<EC2PublicKeyData> = {
  encode(message: EC2PublicKeyData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKeyData !== undefined) {
      PublicKeyData.encode(message.publicKeyData, writer.uint32(10).fork()).join();
    }
    if (!message.curve.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.curve.toString());
    }
    if (message.xCoord.length !== 0) {
      writer.uint32(26).bytes(message.xCoord);
    }
    if (message.yCoord.length !== 0) {
      writer.uint32(34).bytes(message.yCoord);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EC2PublicKeyData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEC2PublicKeyData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKeyData = PublicKeyData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.curve = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xCoord = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.yCoord = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EC2PublicKeyData {
    return {
      publicKeyData: isSet(object.publicKeyData) ? PublicKeyData.fromJSON(object.publicKeyData) : undefined,
      curve: isSet(object.curve) ? Long.fromValue(object.curve) : Long.ZERO,
      xCoord: isSet(object.xCoord) ? bytesFromBase64(object.xCoord) : new Uint8Array(0),
      yCoord: isSet(object.yCoord) ? bytesFromBase64(object.yCoord) : new Uint8Array(0),
    };
  },

  toJSON(message: EC2PublicKeyData): unknown {
    const obj: any = {};
    if (message.publicKeyData !== undefined) {
      obj.publicKeyData = PublicKeyData.toJSON(message.publicKeyData);
    }
    if (!message.curve.equals(Long.ZERO)) {
      obj.curve = (message.curve || Long.ZERO).toString();
    }
    if (message.xCoord.length !== 0) {
      obj.xCoord = base64FromBytes(message.xCoord);
    }
    if (message.yCoord.length !== 0) {
      obj.yCoord = base64FromBytes(message.yCoord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EC2PublicKeyData>, I>>(base?: I): EC2PublicKeyData {
    return EC2PublicKeyData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EC2PublicKeyData>, I>>(object: I): EC2PublicKeyData {
    const message = createBaseEC2PublicKeyData();
    message.publicKeyData = (object.publicKeyData !== undefined && object.publicKeyData !== null)
      ? PublicKeyData.fromPartial(object.publicKeyData)
      : undefined;
    message.curve = (object.curve !== undefined && object.curve !== null) ? Long.fromValue(object.curve) : Long.ZERO;
    message.xCoord = object.xCoord ?? new Uint8Array(0);
    message.yCoord = object.yCoord ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEdDSAPublicKeyData(): EdDSAPublicKeyData {
  return { publicKeyData: undefined, curve: Long.ZERO, xCoord: new Uint8Array(0) };
}

export const EdDSAPublicKeyData: MessageFns<EdDSAPublicKeyData> = {
  encode(message: EdDSAPublicKeyData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKeyData !== undefined) {
      PublicKeyData.encode(message.publicKeyData, writer.uint32(10).fork()).join();
    }
    if (!message.curve.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.curve.toString());
    }
    if (message.xCoord.length !== 0) {
      writer.uint32(26).bytes(message.xCoord);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EdDSAPublicKeyData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdDSAPublicKeyData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKeyData = PublicKeyData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.curve = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xCoord = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EdDSAPublicKeyData {
    return {
      publicKeyData: isSet(object.publicKeyData) ? PublicKeyData.fromJSON(object.publicKeyData) : undefined,
      curve: isSet(object.curve) ? Long.fromValue(object.curve) : Long.ZERO,
      xCoord: isSet(object.xCoord) ? bytesFromBase64(object.xCoord) : new Uint8Array(0),
    };
  },

  toJSON(message: EdDSAPublicKeyData): unknown {
    const obj: any = {};
    if (message.publicKeyData !== undefined) {
      obj.publicKeyData = PublicKeyData.toJSON(message.publicKeyData);
    }
    if (!message.curve.equals(Long.ZERO)) {
      obj.curve = (message.curve || Long.ZERO).toString();
    }
    if (message.xCoord.length !== 0) {
      obj.xCoord = base64FromBytes(message.xCoord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EdDSAPublicKeyData>, I>>(base?: I): EdDSAPublicKeyData {
    return EdDSAPublicKeyData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EdDSAPublicKeyData>, I>>(object: I): EdDSAPublicKeyData {
    const message = createBaseEdDSAPublicKeyData();
    message.publicKeyData = (object.publicKeyData !== undefined && object.publicKeyData !== null)
      ? PublicKeyData.fromPartial(object.publicKeyData)
      : undefined;
    message.curve = (object.curve !== undefined && object.curve !== null) ? Long.fromValue(object.curve) : Long.ZERO;
    message.xCoord = object.xCoord ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
