// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/smartaccounts/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.smartaccounts.v1";

/** Events */
export interface EventSmartAccountInit {
  address: string;
  credentialCount: number;
}

/** Event emitted when a WebAuthn credential is added to a smart account */
export interface EventWebAuthnCredentialAdd {
  address: string;
  credentialNumber: Long;
  credentialId: string;
}

/** Event emitted when a Cosmos credential is added to a smart account */
export interface EventCosmosCredentialAdd {
  address: string;
  credentialNumber: Long;
}

/** Event emitted when a credential is deleted from a smart account */
export interface EventCredentialDelete {
  address: string;
  credentialNumber: Long;
}

function createBaseEventSmartAccountInit(): EventSmartAccountInit {
  return { address: "", credentialCount: 0 };
}

export const EventSmartAccountInit: MessageFns<EventSmartAccountInit> = {
  encode(message: EventSmartAccountInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.credentialCount !== 0) {
      writer.uint32(16).uint32(message.credentialCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSmartAccountInit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSmartAccountInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.credentialCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSmartAccountInit {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      credentialCount: isSet(object.credentialCount) ? globalThis.Number(object.credentialCount) : 0,
    };
  },

  toJSON(message: EventSmartAccountInit): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.credentialCount !== 0) {
      obj.credentialCount = Math.round(message.credentialCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSmartAccountInit>, I>>(base?: I): EventSmartAccountInit {
    return EventSmartAccountInit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSmartAccountInit>, I>>(object: I): EventSmartAccountInit {
    const message = createBaseEventSmartAccountInit();
    message.address = object.address ?? "";
    message.credentialCount = object.credentialCount ?? 0;
    return message;
  },
};

function createBaseEventWebAuthnCredentialAdd(): EventWebAuthnCredentialAdd {
  return { address: "", credentialNumber: Long.UZERO, credentialId: "" };
}

export const EventWebAuthnCredentialAdd: MessageFns<EventWebAuthnCredentialAdd> = {
  encode(message: EventWebAuthnCredentialAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.credentialNumber.toString());
    }
    if (message.credentialId !== "") {
      writer.uint32(26).string(message.credentialId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventWebAuthnCredentialAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWebAuthnCredentialAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credentialId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWebAuthnCredentialAdd {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
      credentialId: isSet(object.credentialId) ? globalThis.String(object.credentialId) : "",
    };
  },

  toJSON(message: EventWebAuthnCredentialAdd): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    if (message.credentialId !== "") {
      obj.credentialId = message.credentialId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWebAuthnCredentialAdd>, I>>(base?: I): EventWebAuthnCredentialAdd {
    return EventWebAuthnCredentialAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWebAuthnCredentialAdd>, I>>(object: I): EventWebAuthnCredentialAdd {
    const message = createBaseEventWebAuthnCredentialAdd();
    message.address = object.address ?? "";
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    message.credentialId = object.credentialId ?? "";
    return message;
  },
};

function createBaseEventCosmosCredentialAdd(): EventCosmosCredentialAdd {
  return { address: "", credentialNumber: Long.UZERO };
}

export const EventCosmosCredentialAdd: MessageFns<EventCosmosCredentialAdd> = {
  encode(message: EventCosmosCredentialAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.credentialNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventCosmosCredentialAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCosmosCredentialAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCosmosCredentialAdd {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
    };
  },

  toJSON(message: EventCosmosCredentialAdd): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCosmosCredentialAdd>, I>>(base?: I): EventCosmosCredentialAdd {
    return EventCosmosCredentialAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCosmosCredentialAdd>, I>>(object: I): EventCosmosCredentialAdd {
    const message = createBaseEventCosmosCredentialAdd();
    message.address = object.address ?? "";
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    return message;
  },
};

function createBaseEventCredentialDelete(): EventCredentialDelete {
  return { address: "", credentialNumber: Long.UZERO };
}

export const EventCredentialDelete: MessageFns<EventCredentialDelete> = {
  encode(message: EventCredentialDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.credentialNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventCredentialDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCredentialDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCredentialDelete {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
    };
  },

  toJSON(message: EventCredentialDelete): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCredentialDelete>, I>>(base?: I): EventCredentialDelete {
    return EventCredentialDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCredentialDelete>, I>>(object: I): EventCredentialDelete {
    const message = createBaseEventCredentialDelete();
    message.address = object.address ?? "";
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
