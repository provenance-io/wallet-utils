// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/smartaccounts/v1/provenanceaccount.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BaseAccount } from "../../../cosmos/auth/v1beta1/auth";
import { Any } from "../../../google/protobuf/any";

export const protobufPackage = "provenance.smartaccounts.v1";

/** Enum for credential type */
export enum CredentialType {
  /** CREDENTIAL_TYPE_UNSPECIFIED - Unspecified credential type */
  CREDENTIAL_TYPE_UNSPECIFIED = 0,
  /** CREDENTIAL_TYPE_ED25519 - ED25519 credential type */
  CREDENTIAL_TYPE_ED25519 = 1,
  /** CREDENTIAL_TYPE_K256 - K256 credential type, this will the usual cosmos credential */
  CREDENTIAL_TYPE_K256 = 2,
  /** CREDENTIAL_TYPE_P256 - P256 credential type */
  CREDENTIAL_TYPE_P256 = 3,
  /** CREDENTIAL_TYPE_WEBAUTHN - WebAuthn credential type */
  CREDENTIAL_TYPE_WEBAUTHN = 4,
  /** CREDENTIAL_TYPE_WEBAUTHN_UV - WebAuthn with UV credential type */
  CREDENTIAL_TYPE_WEBAUTHN_UV = 5,
  UNRECOGNIZED = -1,
}

export function credentialTypeFromJSON(object: any): CredentialType {
  switch (object) {
    case 0:
    case "CREDENTIAL_TYPE_UNSPECIFIED":
      return CredentialType.CREDENTIAL_TYPE_UNSPECIFIED;
    case 1:
    case "CREDENTIAL_TYPE_ED25519":
      return CredentialType.CREDENTIAL_TYPE_ED25519;
    case 2:
    case "CREDENTIAL_TYPE_K256":
      return CredentialType.CREDENTIAL_TYPE_K256;
    case 3:
    case "CREDENTIAL_TYPE_P256":
      return CredentialType.CREDENTIAL_TYPE_P256;
    case 4:
    case "CREDENTIAL_TYPE_WEBAUTHN":
      return CredentialType.CREDENTIAL_TYPE_WEBAUTHN;
    case 5:
    case "CREDENTIAL_TYPE_WEBAUTHN_UV":
      return CredentialType.CREDENTIAL_TYPE_WEBAUTHN_UV;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CredentialType.UNRECOGNIZED;
  }
}

export function credentialTypeToJSON(object: CredentialType): string {
  switch (object) {
    case CredentialType.CREDENTIAL_TYPE_UNSPECIFIED:
      return "CREDENTIAL_TYPE_UNSPECIFIED";
    case CredentialType.CREDENTIAL_TYPE_ED25519:
      return "CREDENTIAL_TYPE_ED25519";
    case CredentialType.CREDENTIAL_TYPE_K256:
      return "CREDENTIAL_TYPE_K256";
    case CredentialType.CREDENTIAL_TYPE_P256:
      return "CREDENTIAL_TYPE_P256";
    case CredentialType.CREDENTIAL_TYPE_WEBAUTHN:
      return "CREDENTIAL_TYPE_WEBAUTHN";
    case CredentialType.CREDENTIAL_TYPE_WEBAUTHN_UV:
      return "CREDENTIAL_TYPE_WEBAUTHN_UV";
    case CredentialType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ProvenanceAccount is a Type Of Smart Account assumes presence of a BaseAccount. */
export interface ProvenanceAccount {
  /**
   * address is the address of the account.
   * This will be the same as the base account based on discussion on Jan30th, 2025.
   *  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
   *  Makes inheritance explicit
   *  Provides access to BaseAccount fields (account_number, sequence, etc.)
   *  Follows Cosmos SDK conventions
   *  Simplifies implementation of account interfaces
   */
  baseAccount?:
    | BaseAccount
    | undefined;
  /** smart_account_number is the global sequence number. */
  smartAccountNumber: Long;
  /** list of credential types supported by the account */
  credentials: Credential[];
  /** set to false but if set to true only smart account authentication is allowed. */
  isSmartAccountOnlyAuthentication: boolean;
}

/** MsgInit is used to initialize a provenance account. */
export interface MsgInit {
  /** sender is the address of the sender of this message. */
  sender: string;
  /**
   * list of credential types supported by the account
   * at least one has to be provided.
   */
  credentials: Credential[];
}

/**
 * MsgInitResponse is the response returned after smart account initialization.
 * For now, This is empty.
 */
export interface MsgInitResponse {
  /** account_address is the address of the newly created account. */
  accountAddress: string;
  /** sequence is the current sequence of the account. */
  sequence: Long;
}

export interface Credential {
  baseCredential?: BaseCredential | undefined;
  fido2Authenticator?: Fido2Authenticator | undefined;
  k256Authenticator?: K256Authenticator | undefined;
  sessionAuthenticator?: SessionAuthenticator | undefined;
}

/** Credential message */
export interface BaseCredential {
  /** assigned globally unique in order of creation (like BaseAccount.account_number) */
  credentialNumber: Long;
  /**
   * this is the public key of the credential
   * The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
   * a Relying Party at registration time (see also public key credential). The private key portion of the credential key
   * pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
   * used as the attestation key pair, see self attestation for details.
   */
  publicKey?:
    | Any
    | undefined;
  /** see CredentialType enum */
  variant: CredentialType;
  /** Seconds since UNIX epoch timestamp */
  createTime: Long;
}

export interface Fido2Authenticator {
  /**
   * A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
   * The credential id (from the id attribute) is the base64url encoding of the data contained in the [[identifier]] internal slot.
   */
  id: string;
  /** this is the username of the credential */
  username: string;
  /**
   * Note on why to store aaGuid
   * The AAGUID itself doesnâ€™t directly identify a user but could potentially be used to infer the device type or model.
   * Storing the AAGUID is not mandatory but is useful for enforcing security policies, auditing, and accessing device metadata.
   * because of privacy, for now store it.
   */
  aaguid: Uint8Array;
  /**
   * This is the response returned by the browser after a WebAuthn credential
   * is created using navigator.credentials.create().
   * base64 encoded string
   */
  credentialCreationResponse: string;
  /** store the rp id */
  rpId: string;
  /** store the rp origin */
  rpOrigin: string;
}

export interface K256Authenticator {
}

/** Only valid for the duration of the session, public key for now is only k256 based. */
export interface SessionAuthenticator {
  /** / block height at which it is invalidated */
  endSessionHeight: Long;
  /** / seconds component of block consensus timestamp */
  timedOut: boolean;
}

/** Params defines the set of module parameters. */
export interface Params {
  /** check if the smart account module is enabled. */
  enabled: boolean;
  /** max_credential_allowed is the max number of smart credentials allowed per base account. */
  maxCredentialAllowed: number;
}

function createBaseProvenanceAccount(): ProvenanceAccount {
  return {
    baseAccount: undefined,
    smartAccountNumber: Long.UZERO,
    credentials: [],
    isSmartAccountOnlyAuthentication: false,
  };
}

export const ProvenanceAccount: MessageFns<ProvenanceAccount> = {
  encode(message: ProvenanceAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseAccount !== undefined) {
      BaseAccount.encode(message.baseAccount, writer.uint32(10).fork()).join();
    }
    if (!message.smartAccountNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.smartAccountNumber.toString());
    }
    for (const v of message.credentials) {
      Credential.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.isSmartAccountOnlyAuthentication !== false) {
      writer.uint32(32).bool(message.isSmartAccountOnlyAuthentication);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvenanceAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvenanceAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.baseAccount = BaseAccount.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.smartAccountNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credentials.push(Credential.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isSmartAccountOnlyAuthentication = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvenanceAccount {
    return {
      baseAccount: isSet(object.baseAccount) ? BaseAccount.fromJSON(object.baseAccount) : undefined,
      smartAccountNumber: isSet(object.smartAccountNumber) ? Long.fromValue(object.smartAccountNumber) : Long.UZERO,
      credentials: globalThis.Array.isArray(object?.credentials)
        ? object.credentials.map((e: any) => Credential.fromJSON(e))
        : [],
      isSmartAccountOnlyAuthentication: isSet(object.isSmartAccountOnlyAuthentication)
        ? globalThis.Boolean(object.isSmartAccountOnlyAuthentication)
        : false,
    };
  },

  toJSON(message: ProvenanceAccount): unknown {
    const obj: any = {};
    if (message.baseAccount !== undefined) {
      obj.baseAccount = BaseAccount.toJSON(message.baseAccount);
    }
    if (!message.smartAccountNumber.equals(Long.UZERO)) {
      obj.smartAccountNumber = (message.smartAccountNumber || Long.UZERO).toString();
    }
    if (message.credentials?.length) {
      obj.credentials = message.credentials.map((e) => Credential.toJSON(e));
    }
    if (message.isSmartAccountOnlyAuthentication !== false) {
      obj.isSmartAccountOnlyAuthentication = message.isSmartAccountOnlyAuthentication;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvenanceAccount>, I>>(base?: I): ProvenanceAccount {
    return ProvenanceAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvenanceAccount>, I>>(object: I): ProvenanceAccount {
    const message = createBaseProvenanceAccount();
    message.baseAccount = (object.baseAccount !== undefined && object.baseAccount !== null)
      ? BaseAccount.fromPartial(object.baseAccount)
      : undefined;
    message.smartAccountNumber = (object.smartAccountNumber !== undefined && object.smartAccountNumber !== null)
      ? Long.fromValue(object.smartAccountNumber)
      : Long.UZERO;
    message.credentials = object.credentials?.map((e) => Credential.fromPartial(e)) || [];
    message.isSmartAccountOnlyAuthentication = object.isSmartAccountOnlyAuthentication ?? false;
    return message;
  },
};

function createBaseMsgInit(): MsgInit {
  return { sender: "", credentials: [] };
}

export const MsgInit: MessageFns<MsgInit> = {
  encode(message: MsgInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.credentials) {
      Credential.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.credentials.push(Credential.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInit {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      credentials: globalThis.Array.isArray(object?.credentials)
        ? object.credentials.map((e: any) => Credential.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgInit): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.credentials?.length) {
      obj.credentials = message.credentials.map((e) => Credential.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgInit>, I>>(base?: I): MsgInit {
    return MsgInit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgInit>, I>>(object: I): MsgInit {
    const message = createBaseMsgInit();
    message.sender = object.sender ?? "";
    message.credentials = object.credentials?.map((e) => Credential.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgInitResponse(): MsgInitResponse {
  return { accountAddress: "", sequence: Long.UZERO };
}

export const MsgInitResponse: MessageFns<MsgInitResponse> = {
  encode(message: MsgInitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountAddress !== "") {
      writer.uint32(10).string(message.accountAddress);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sequence.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInitResponse {
    return {
      accountAddress: isSet(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
      sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
    };
  },

  toJSON(message: MsgInitResponse): unknown {
    const obj: any = {};
    if (message.accountAddress !== "") {
      obj.accountAddress = message.accountAddress;
    }
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgInitResponse>, I>>(base?: I): MsgInitResponse {
    return MsgInitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgInitResponse>, I>>(object: I): MsgInitResponse {
    const message = createBaseMsgInitResponse();
    message.accountAddress = object.accountAddress ?? "";
    message.sequence = (object.sequence !== undefined && object.sequence !== null)
      ? Long.fromValue(object.sequence)
      : Long.UZERO;
    return message;
  },
};

function createBaseCredential(): Credential {
  return {
    baseCredential: undefined,
    fido2Authenticator: undefined,
    k256Authenticator: undefined,
    sessionAuthenticator: undefined,
  };
}

export const Credential: MessageFns<Credential> = {
  encode(message: Credential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseCredential !== undefined) {
      BaseCredential.encode(message.baseCredential, writer.uint32(10).fork()).join();
    }
    if (message.fido2Authenticator !== undefined) {
      Fido2Authenticator.encode(message.fido2Authenticator, writer.uint32(18).fork()).join();
    }
    if (message.k256Authenticator !== undefined) {
      K256Authenticator.encode(message.k256Authenticator, writer.uint32(26).fork()).join();
    }
    if (message.sessionAuthenticator !== undefined) {
      SessionAuthenticator.encode(message.sessionAuthenticator, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Credential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.baseCredential = BaseCredential.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fido2Authenticator = Fido2Authenticator.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.k256Authenticator = K256Authenticator.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sessionAuthenticator = SessionAuthenticator.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Credential {
    return {
      baseCredential: isSet(object.baseCredential) ? BaseCredential.fromJSON(object.baseCredential) : undefined,
      fido2Authenticator: isSet(object.fido2Authenticator)
        ? Fido2Authenticator.fromJSON(object.fido2Authenticator)
        : undefined,
      k256Authenticator: isSet(object.k256Authenticator)
        ? K256Authenticator.fromJSON(object.k256Authenticator)
        : undefined,
      sessionAuthenticator: isSet(object.sessionAuthenticator)
        ? SessionAuthenticator.fromJSON(object.sessionAuthenticator)
        : undefined,
    };
  },

  toJSON(message: Credential): unknown {
    const obj: any = {};
    if (message.baseCredential !== undefined) {
      obj.baseCredential = BaseCredential.toJSON(message.baseCredential);
    }
    if (message.fido2Authenticator !== undefined) {
      obj.fido2Authenticator = Fido2Authenticator.toJSON(message.fido2Authenticator);
    }
    if (message.k256Authenticator !== undefined) {
      obj.k256Authenticator = K256Authenticator.toJSON(message.k256Authenticator);
    }
    if (message.sessionAuthenticator !== undefined) {
      obj.sessionAuthenticator = SessionAuthenticator.toJSON(message.sessionAuthenticator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Credential>, I>>(base?: I): Credential {
    return Credential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Credential>, I>>(object: I): Credential {
    const message = createBaseCredential();
    message.baseCredential = (object.baseCredential !== undefined && object.baseCredential !== null)
      ? BaseCredential.fromPartial(object.baseCredential)
      : undefined;
    message.fido2Authenticator = (object.fido2Authenticator !== undefined && object.fido2Authenticator !== null)
      ? Fido2Authenticator.fromPartial(object.fido2Authenticator)
      : undefined;
    message.k256Authenticator = (object.k256Authenticator !== undefined && object.k256Authenticator !== null)
      ? K256Authenticator.fromPartial(object.k256Authenticator)
      : undefined;
    message.sessionAuthenticator = (object.sessionAuthenticator !== undefined && object.sessionAuthenticator !== null)
      ? SessionAuthenticator.fromPartial(object.sessionAuthenticator)
      : undefined;
    return message;
  },
};

function createBaseBaseCredential(): BaseCredential {
  return { credentialNumber: Long.UZERO, publicKey: undefined, variant: 0, createTime: Long.ZERO };
}

export const BaseCredential: MessageFns<BaseCredential> = {
  encode(message: BaseCredential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.credentialNumber.toString());
    }
    if (message.publicKey !== undefined) {
      Any.encode(message.publicKey, writer.uint32(18).fork()).join();
    }
    if (message.variant !== 0) {
      writer.uint32(24).int32(message.variant);
    }
    if (!message.createTime.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.createTime.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseCredential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = Any.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.variant = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createTime = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseCredential {
    return {
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
      publicKey: isSet(object.publicKey) ? Any.fromJSON(object.publicKey) : undefined,
      variant: isSet(object.variant) ? credentialTypeFromJSON(object.variant) : 0,
      createTime: isSet(object.createTime) ? Long.fromValue(object.createTime) : Long.ZERO,
    };
  },

  toJSON(message: BaseCredential): unknown {
    const obj: any = {};
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = Any.toJSON(message.publicKey);
    }
    if (message.variant !== 0) {
      obj.variant = credentialTypeToJSON(message.variant);
    }
    if (!message.createTime.equals(Long.ZERO)) {
      obj.createTime = (message.createTime || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseCredential>, I>>(base?: I): BaseCredential {
    return BaseCredential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseCredential>, I>>(object: I): BaseCredential {
    const message = createBaseBaseCredential();
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? Any.fromPartial(object.publicKey)
      : undefined;
    message.variant = object.variant ?? 0;
    message.createTime = (object.createTime !== undefined && object.createTime !== null)
      ? Long.fromValue(object.createTime)
      : Long.ZERO;
    return message;
  },
};

function createBaseFido2Authenticator(): Fido2Authenticator {
  return { id: "", username: "", aaguid: new Uint8Array(0), credentialCreationResponse: "", rpId: "", rpOrigin: "" };
}

export const Fido2Authenticator: MessageFns<Fido2Authenticator> = {
  encode(message: Fido2Authenticator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.aaguid.length !== 0) {
      writer.uint32(26).bytes(message.aaguid);
    }
    if (message.credentialCreationResponse !== "") {
      writer.uint32(34).string(message.credentialCreationResponse);
    }
    if (message.rpId !== "") {
      writer.uint32(42).string(message.rpId);
    }
    if (message.rpOrigin !== "") {
      writer.uint32(50).string(message.rpOrigin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fido2Authenticator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFido2Authenticator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aaguid = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.credentialCreationResponse = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rpId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rpOrigin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fido2Authenticator {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      aaguid: isSet(object.aaguid) ? bytesFromBase64(object.aaguid) : new Uint8Array(0),
      credentialCreationResponse: isSet(object.credentialCreationResponse)
        ? globalThis.String(object.credentialCreationResponse)
        : "",
      rpId: isSet(object.rpId) ? globalThis.String(object.rpId) : "",
      rpOrigin: isSet(object.rpOrigin) ? globalThis.String(object.rpOrigin) : "",
    };
  },

  toJSON(message: Fido2Authenticator): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.aaguid.length !== 0) {
      obj.aaguid = base64FromBytes(message.aaguid);
    }
    if (message.credentialCreationResponse !== "") {
      obj.credentialCreationResponse = message.credentialCreationResponse;
    }
    if (message.rpId !== "") {
      obj.rpId = message.rpId;
    }
    if (message.rpOrigin !== "") {
      obj.rpOrigin = message.rpOrigin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Fido2Authenticator>, I>>(base?: I): Fido2Authenticator {
    return Fido2Authenticator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Fido2Authenticator>, I>>(object: I): Fido2Authenticator {
    const message = createBaseFido2Authenticator();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.aaguid = object.aaguid ?? new Uint8Array(0);
    message.credentialCreationResponse = object.credentialCreationResponse ?? "";
    message.rpId = object.rpId ?? "";
    message.rpOrigin = object.rpOrigin ?? "";
    return message;
  },
};

function createBaseK256Authenticator(): K256Authenticator {
  return {};
}

export const K256Authenticator: MessageFns<K256Authenticator> = {
  encode(_: K256Authenticator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): K256Authenticator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseK256Authenticator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): K256Authenticator {
    return {};
  },

  toJSON(_: K256Authenticator): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<K256Authenticator>, I>>(base?: I): K256Authenticator {
    return K256Authenticator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<K256Authenticator>, I>>(_: I): K256Authenticator {
    const message = createBaseK256Authenticator();
    return message;
  },
};

function createBaseSessionAuthenticator(): SessionAuthenticator {
  return { endSessionHeight: Long.ZERO, timedOut: false };
}

export const SessionAuthenticator: MessageFns<SessionAuthenticator> = {
  encode(message: SessionAuthenticator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.endSessionHeight.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.endSessionHeight.toString());
    }
    if (message.timedOut !== false) {
      writer.uint32(16).bool(message.timedOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionAuthenticator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionAuthenticator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.endSessionHeight = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timedOut = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionAuthenticator {
    return {
      endSessionHeight: isSet(object.endSessionHeight) ? Long.fromValue(object.endSessionHeight) : Long.ZERO,
      timedOut: isSet(object.timedOut) ? globalThis.Boolean(object.timedOut) : false,
    };
  },

  toJSON(message: SessionAuthenticator): unknown {
    const obj: any = {};
    if (!message.endSessionHeight.equals(Long.ZERO)) {
      obj.endSessionHeight = (message.endSessionHeight || Long.ZERO).toString();
    }
    if (message.timedOut !== false) {
      obj.timedOut = message.timedOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionAuthenticator>, I>>(base?: I): SessionAuthenticator {
    return SessionAuthenticator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionAuthenticator>, I>>(object: I): SessionAuthenticator {
    const message = createBaseSessionAuthenticator();
    message.endSessionHeight = (object.endSessionHeight !== undefined && object.endSessionHeight !== null)
      ? Long.fromValue(object.endSessionHeight)
      : Long.ZERO;
    message.timedOut = object.timedOut ?? false;
    return message;
  },
};

function createBaseParams(): Params {
  return { enabled: false, maxCredentialAllowed: 0 };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.maxCredentialAllowed !== 0) {
      writer.uint32(16).uint32(message.maxCredentialAllowed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxCredentialAllowed = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      maxCredentialAllowed: isSet(object.maxCredentialAllowed) ? globalThis.Number(object.maxCredentialAllowed) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.maxCredentialAllowed !== 0) {
      obj.maxCredentialAllowed = Math.round(message.maxCredentialAllowed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.enabled = object.enabled ?? false;
    message.maxCredentialAllowed = object.maxCredentialAllowed ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
