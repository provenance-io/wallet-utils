// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/smartaccounts/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any";
import { Params, ProvenanceAccount } from "./provenanceaccount";

export const protobufPackage = "provenance.smartaccounts.v1";

/** MsgRegisterFido2Credential is used to initialize a provenance smart account with fido2 credentials. */
export interface MsgRegisterFido2Credential {
  /** sender is the address of the sender of this message. */
  sender: string;
  encodedAttestation: string;
  /**
   * You must store the user ID separately when initiating registration and retrieve it later.
   * This is the fido2 user identifier for the authenticator.
   */
  userIdentifier: string;
}

/** Moves to smart contract authentication only. */
export interface MsgMigrateToSmartAccountAuthentication {
  /** sender is the address of the sender of this message. */
  sender: string;
}

export interface MsgMigrateToSmartAccountAuthenticationResponse {
}

export interface MsgDeleteCredential {
  /** sender is the address of the sender of this message. */
  sender: string;
  /** credential number is the credential number assigned to the credential in the provenance smart account module. */
  credentialNumber: Long;
}

export interface MsgDeleteCredentialResponse {
  /** credential_number is the credential number that was deleted. */
  credentialNumber: Long;
}

/** delete smart account for whatever reason. */
export interface MsgDeleteAccount {
  /** sender is the address of the sender of this message. */
  sender: string;
  address: string;
}

export interface MsgDeleteAccountResponse {
}

export interface MsgRegisterCosmosCredential {
  /** sender is the address of the sender of this message. */
  sender: string;
  /** pubkey for which the secp256k1 keypair being registered. */
  pubkey?: Any | undefined;
}

/**
 * MsgRegisterWebAuthnCredentialResponse is returned after successfully registering a WebAuthn credential.
 * It contains information about the newly registered credential and the associated smart account.
 */
export interface MsgRegisterWebAuthnCredentialResponse {
  /**
   * credential_number is a globally unique identifier assigned to the newly registered credential.
   * This number can be used in future operations like credential deletion.
   */
  credentialNumber: Long;
  /**
   * provenanceaccount contains the full smart account data after the registration,
   * including all credentials associated with the account and its current state.
   */
  provenanceAccount?: ProvenanceAccount | undefined;
}

export interface MsgRegisterCosmosCredentialResponse {
  credentialNumber: Long;
}

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
  /** authority is the address of the governance account. */
  authority: string;
  /**
   * params defines the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgRegisterFido2Credential(): MsgRegisterFido2Credential {
  return { sender: "", encodedAttestation: "", userIdentifier: "" };
}

export const MsgRegisterFido2Credential: MessageFns<MsgRegisterFido2Credential> = {
  encode(message: MsgRegisterFido2Credential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.encodedAttestation !== "") {
      writer.uint32(18).string(message.encodedAttestation);
    }
    if (message.userIdentifier !== "") {
      writer.uint32(26).string(message.userIdentifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterFido2Credential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterFido2Credential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encodedAttestation = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userIdentifier = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterFido2Credential {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      encodedAttestation: isSet(object.encodedAttestation) ? globalThis.String(object.encodedAttestation) : "",
      userIdentifier: isSet(object.userIdentifier) ? globalThis.String(object.userIdentifier) : "",
    };
  },

  toJSON(message: MsgRegisterFido2Credential): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.encodedAttestation !== "") {
      obj.encodedAttestation = message.encodedAttestation;
    }
    if (message.userIdentifier !== "") {
      obj.userIdentifier = message.userIdentifier;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterFido2Credential>, I>>(base?: I): MsgRegisterFido2Credential {
    return MsgRegisterFido2Credential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterFido2Credential>, I>>(object: I): MsgRegisterFido2Credential {
    const message = createBaseMsgRegisterFido2Credential();
    message.sender = object.sender ?? "";
    message.encodedAttestation = object.encodedAttestation ?? "";
    message.userIdentifier = object.userIdentifier ?? "";
    return message;
  },
};

function createBaseMsgMigrateToSmartAccountAuthentication(): MsgMigrateToSmartAccountAuthentication {
  return { sender: "" };
}

export const MsgMigrateToSmartAccountAuthentication: MessageFns<MsgMigrateToSmartAccountAuthentication> = {
  encode(message: MsgMigrateToSmartAccountAuthentication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMigrateToSmartAccountAuthentication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMigrateToSmartAccountAuthentication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMigrateToSmartAccountAuthentication {
    return { sender: isSet(object.sender) ? globalThis.String(object.sender) : "" };
  },

  toJSON(message: MsgMigrateToSmartAccountAuthentication): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMigrateToSmartAccountAuthentication>, I>>(
    base?: I,
  ): MsgMigrateToSmartAccountAuthentication {
    return MsgMigrateToSmartAccountAuthentication.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMigrateToSmartAccountAuthentication>, I>>(
    object: I,
  ): MsgMigrateToSmartAccountAuthentication {
    const message = createBaseMsgMigrateToSmartAccountAuthentication();
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgMigrateToSmartAccountAuthenticationResponse(): MsgMigrateToSmartAccountAuthenticationResponse {
  return {};
}

export const MsgMigrateToSmartAccountAuthenticationResponse: MessageFns<
  MsgMigrateToSmartAccountAuthenticationResponse
> = {
  encode(_: MsgMigrateToSmartAccountAuthenticationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMigrateToSmartAccountAuthenticationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMigrateToSmartAccountAuthenticationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMigrateToSmartAccountAuthenticationResponse {
    return {};
  },

  toJSON(_: MsgMigrateToSmartAccountAuthenticationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMigrateToSmartAccountAuthenticationResponse>, I>>(
    base?: I,
  ): MsgMigrateToSmartAccountAuthenticationResponse {
    return MsgMigrateToSmartAccountAuthenticationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMigrateToSmartAccountAuthenticationResponse>, I>>(
    _: I,
  ): MsgMigrateToSmartAccountAuthenticationResponse {
    const message = createBaseMsgMigrateToSmartAccountAuthenticationResponse();
    return message;
  },
};

function createBaseMsgDeleteCredential(): MsgDeleteCredential {
  return { sender: "", credentialNumber: Long.UZERO };
}

export const MsgDeleteCredential: MessageFns<MsgDeleteCredential> = {
  encode(message: MsgDeleteCredential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.credentialNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteCredential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteCredential {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
    };
  },

  toJSON(message: MsgDeleteCredential): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteCredential>, I>>(base?: I): MsgDeleteCredential {
    return MsgDeleteCredential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteCredential>, I>>(object: I): MsgDeleteCredential {
    const message = createBaseMsgDeleteCredential();
    message.sender = object.sender ?? "";
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteCredentialResponse(): MsgDeleteCredentialResponse {
  return { credentialNumber: Long.UZERO };
}

export const MsgDeleteCredentialResponse: MessageFns<MsgDeleteCredentialResponse> = {
  encode(message: MsgDeleteCredentialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.credentialNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteCredentialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteCredentialResponse {
    return { credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO };
  },

  toJSON(message: MsgDeleteCredentialResponse): unknown {
    const obj: any = {};
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteCredentialResponse>, I>>(base?: I): MsgDeleteCredentialResponse {
    return MsgDeleteCredentialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteCredentialResponse>, I>>(object: I): MsgDeleteCredentialResponse {
    const message = createBaseMsgDeleteCredentialResponse();
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgDeleteAccount(): MsgDeleteAccount {
  return { sender: "", address: "" };
}

export const MsgDeleteAccount: MessageFns<MsgDeleteAccount> = {
  encode(message: MsgDeleteAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteAccount {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: MsgDeleteAccount): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAccount>, I>>(base?: I): MsgDeleteAccount {
    return MsgDeleteAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAccount>, I>>(object: I): MsgDeleteAccount {
    const message = createBaseMsgDeleteAccount();
    message.sender = object.sender ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseMsgDeleteAccountResponse(): MsgDeleteAccountResponse {
  return {};
}

export const MsgDeleteAccountResponse: MessageFns<MsgDeleteAccountResponse> = {
  encode(_: MsgDeleteAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteAccountResponse {
    return {};
  },

  toJSON(_: MsgDeleteAccountResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAccountResponse>, I>>(base?: I): MsgDeleteAccountResponse {
    return MsgDeleteAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAccountResponse>, I>>(_: I): MsgDeleteAccountResponse {
    const message = createBaseMsgDeleteAccountResponse();
    return message;
  },
};

function createBaseMsgRegisterCosmosCredential(): MsgRegisterCosmosCredential {
  return { sender: "", pubkey: undefined };
}

export const MsgRegisterCosmosCredential: MessageFns<MsgRegisterCosmosCredential> = {
  encode(message: MsgRegisterCosmosCredential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.pubkey !== undefined) {
      Any.encode(message.pubkey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterCosmosCredential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCosmosCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pubkey = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterCosmosCredential {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      pubkey: isSet(object.pubkey) ? Any.fromJSON(object.pubkey) : undefined,
    };
  },

  toJSON(message: MsgRegisterCosmosCredential): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.pubkey !== undefined) {
      obj.pubkey = Any.toJSON(message.pubkey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterCosmosCredential>, I>>(base?: I): MsgRegisterCosmosCredential {
    return MsgRegisterCosmosCredential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterCosmosCredential>, I>>(object: I): MsgRegisterCosmosCredential {
    const message = createBaseMsgRegisterCosmosCredential();
    message.sender = object.sender ?? "";
    message.pubkey = (object.pubkey !== undefined && object.pubkey !== null)
      ? Any.fromPartial(object.pubkey)
      : undefined;
    return message;
  },
};

function createBaseMsgRegisterWebAuthnCredentialResponse(): MsgRegisterWebAuthnCredentialResponse {
  return { credentialNumber: Long.UZERO, provenanceAccount: undefined };
}

export const MsgRegisterWebAuthnCredentialResponse: MessageFns<MsgRegisterWebAuthnCredentialResponse> = {
  encode(message: MsgRegisterWebAuthnCredentialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.credentialNumber.toString());
    }
    if (message.provenanceAccount !== undefined) {
      ProvenanceAccount.encode(message.provenanceAccount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterWebAuthnCredentialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterWebAuthnCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.provenanceAccount = ProvenanceAccount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterWebAuthnCredentialResponse {
    return {
      credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO,
      provenanceAccount: isSet(object.provenanceAccount)
        ? ProvenanceAccount.fromJSON(object.provenanceAccount)
        : undefined,
    };
  },

  toJSON(message: MsgRegisterWebAuthnCredentialResponse): unknown {
    const obj: any = {};
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    if (message.provenanceAccount !== undefined) {
      obj.provenanceAccount = ProvenanceAccount.toJSON(message.provenanceAccount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterWebAuthnCredentialResponse>, I>>(
    base?: I,
  ): MsgRegisterWebAuthnCredentialResponse {
    return MsgRegisterWebAuthnCredentialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterWebAuthnCredentialResponse>, I>>(
    object: I,
  ): MsgRegisterWebAuthnCredentialResponse {
    const message = createBaseMsgRegisterWebAuthnCredentialResponse();
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    message.provenanceAccount = (object.provenanceAccount !== undefined && object.provenanceAccount !== null)
      ? ProvenanceAccount.fromPartial(object.provenanceAccount)
      : undefined;
    return message;
  },
};

function createBaseMsgRegisterCosmosCredentialResponse(): MsgRegisterCosmosCredentialResponse {
  return { credentialNumber: Long.UZERO };
}

export const MsgRegisterCosmosCredentialResponse: MessageFns<MsgRegisterCosmosCredentialResponse> = {
  encode(message: MsgRegisterCosmosCredentialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.credentialNumber.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.credentialNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterCosmosCredentialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCosmosCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.credentialNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterCosmosCredentialResponse {
    return { credentialNumber: isSet(object.credentialNumber) ? Long.fromValue(object.credentialNumber) : Long.UZERO };
  },

  toJSON(message: MsgRegisterCosmosCredentialResponse): unknown {
    const obj: any = {};
    if (!message.credentialNumber.equals(Long.UZERO)) {
      obj.credentialNumber = (message.credentialNumber || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterCosmosCredentialResponse>, I>>(
    base?: I,
  ): MsgRegisterCosmosCredentialResponse {
    return MsgRegisterCosmosCredentialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterCosmosCredentialResponse>, I>>(
    object: I,
  ): MsgRegisterCosmosCredentialResponse {
    const message = createBaseMsgRegisterCosmosCredentialResponse();
    message.credentialNumber = (object.credentialNumber !== undefined && object.credentialNumber !== null)
      ? Long.fromValue(object.credentialNumber)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a governance operation for updating the parameters.
   *
   * Since: cosmos-sdk 0.47
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  RegisterWebAuthnCredential(request: MsgRegisterFido2Credential): Promise<MsgRegisterWebAuthnCredentialResponse>;
  UpdateToSmartAccountAuthenticationOnly(
    request: MsgMigrateToSmartAccountAuthentication,
  ): Promise<MsgMigrateToSmartAccountAuthenticationResponse>;
  RegisterCosmosCredential(request: MsgRegisterCosmosCredential): Promise<MsgRegisterCosmosCredentialResponse>;
  DeleteCredential(request: MsgDeleteCredential): Promise<MsgDeleteCredentialResponse>;
}

export const MsgServiceName = "provenance.smartaccounts.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.RegisterWebAuthnCredential = this.RegisterWebAuthnCredential.bind(this);
    this.UpdateToSmartAccountAuthenticationOnly = this.UpdateToSmartAccountAuthenticationOnly.bind(this);
    this.RegisterCosmosCredential = this.RegisterCosmosCredential.bind(this);
    this.DeleteCredential = this.DeleteCredential.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  RegisterWebAuthnCredential(request: MsgRegisterFido2Credential): Promise<MsgRegisterWebAuthnCredentialResponse> {
    const data = MsgRegisterFido2Credential.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterWebAuthnCredential", data);
    return promise.then((data) => MsgRegisterWebAuthnCredentialResponse.decode(new BinaryReader(data)));
  }

  UpdateToSmartAccountAuthenticationOnly(
    request: MsgMigrateToSmartAccountAuthentication,
  ): Promise<MsgMigrateToSmartAccountAuthenticationResponse> {
    const data = MsgMigrateToSmartAccountAuthentication.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateToSmartAccountAuthenticationOnly", data);
    return promise.then((data) => MsgMigrateToSmartAccountAuthenticationResponse.decode(new BinaryReader(data)));
  }

  RegisterCosmosCredential(request: MsgRegisterCosmosCredential): Promise<MsgRegisterCosmosCredentialResponse> {
    const data = MsgRegisterCosmosCredential.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterCosmosCredential", data);
    return promise.then((data) => MsgRegisterCosmosCredentialResponse.decode(new BinaryReader(data)));
  }

  DeleteCredential(request: MsgDeleteCredential): Promise<MsgDeleteCredentialResponse> {
    const data = MsgDeleteCredential.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteCredential", data);
    return promise.then((data) => MsgDeleteCredentialResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
