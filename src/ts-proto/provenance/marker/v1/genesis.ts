// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/marker/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { MarkerAccount, NetAssetValue, Params } from "./marker";

export const protobufPackage = "provenance.marker.v1";

/** GenesisState defines the account module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params?:
    | Params
    | undefined;
  /** A collection of marker accounts to create on start */
  markers: MarkerAccount[];
  /** list of marker net asset values */
  netAssetValues: MarkerNetAssetValues[];
  /** list of denom based denied send addresses */
  denySendAddresses: DenySendAddress[];
}

/** DenySendAddress defines addresses that are denied sends for marker denom */
export interface DenySendAddress {
  /** marker_address is the marker's address for denied address */
  markerAddress: string;
  /** deny_address defines all wallet addresses that are denied sends for the marker */
  denyAddress: string;
}

/** MarkerNetAssetValues defines the net asset values for a marker */
export interface MarkerNetAssetValues {
  /** address defines the marker address */
  address: string;
  /** net_asset_values that are assigned to marker */
  netAssetValues: NetAssetValue[];
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, markers: [], netAssetValues: [], denySendAddresses: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.markers) {
      MarkerAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.netAssetValues) {
      MarkerNetAssetValues.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.denySendAddresses) {
      DenySendAddress.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.markers.push(MarkerAccount.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.netAssetValues.push(MarkerNetAssetValues.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.denySendAddresses.push(DenySendAddress.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      markers: globalThis.Array.isArray(object?.markers)
        ? object.markers.map((e: any) => MarkerAccount.fromJSON(e))
        : [],
      netAssetValues: globalThis.Array.isArray(object?.netAssetValues)
        ? object.netAssetValues.map((e: any) => MarkerNetAssetValues.fromJSON(e))
        : [],
      denySendAddresses: globalThis.Array.isArray(object?.denySendAddresses)
        ? object.denySendAddresses.map((e: any) => DenySendAddress.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.markers?.length) {
      obj.markers = message.markers.map((e) => MarkerAccount.toJSON(e));
    }
    if (message.netAssetValues?.length) {
      obj.netAssetValues = message.netAssetValues.map((e) => MarkerNetAssetValues.toJSON(e));
    }
    if (message.denySendAddresses?.length) {
      obj.denySendAddresses = message.denySendAddresses.map((e) => DenySendAddress.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.markers = object.markers?.map((e) => MarkerAccount.fromPartial(e)) || [];
    message.netAssetValues = object.netAssetValues?.map((e) => MarkerNetAssetValues.fromPartial(e)) || [];
    message.denySendAddresses = object.denySendAddresses?.map((e) => DenySendAddress.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDenySendAddress(): DenySendAddress {
  return { markerAddress: "", denyAddress: "" };
}

export const DenySendAddress: MessageFns<DenySendAddress> = {
  encode(message: DenySendAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.markerAddress !== "") {
      writer.uint32(10).string(message.markerAddress);
    }
    if (message.denyAddress !== "") {
      writer.uint32(18).string(message.denyAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenySendAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenySendAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.markerAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denyAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenySendAddress {
    return {
      markerAddress: isSet(object.markerAddress) ? globalThis.String(object.markerAddress) : "",
      denyAddress: isSet(object.denyAddress) ? globalThis.String(object.denyAddress) : "",
    };
  },

  toJSON(message: DenySendAddress): unknown {
    const obj: any = {};
    if (message.markerAddress !== "") {
      obj.markerAddress = message.markerAddress;
    }
    if (message.denyAddress !== "") {
      obj.denyAddress = message.denyAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DenySendAddress>, I>>(base?: I): DenySendAddress {
    return DenySendAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DenySendAddress>, I>>(object: I): DenySendAddress {
    const message = createBaseDenySendAddress();
    message.markerAddress = object.markerAddress ?? "";
    message.denyAddress = object.denyAddress ?? "";
    return message;
  },
};

function createBaseMarkerNetAssetValues(): MarkerNetAssetValues {
  return { address: "", netAssetValues: [] };
}

export const MarkerNetAssetValues: MessageFns<MarkerNetAssetValues> = {
  encode(message: MarkerNetAssetValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.netAssetValues) {
      NetAssetValue.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkerNetAssetValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkerNetAssetValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.netAssetValues.push(NetAssetValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkerNetAssetValues {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      netAssetValues: globalThis.Array.isArray(object?.netAssetValues)
        ? object.netAssetValues.map((e: any) => NetAssetValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MarkerNetAssetValues): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.netAssetValues?.length) {
      obj.netAssetValues = message.netAssetValues.map((e) => NetAssetValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkerNetAssetValues>, I>>(base?: I): MarkerNetAssetValues {
    return MarkerNetAssetValues.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkerNetAssetValues>, I>>(object: I): MarkerNetAssetValues {
    const message = createBaseMarkerNetAssetValues();
    message.address = object.address ?? "";
    message.netAssetValues = object.netAssetValues?.map((e) => NetAssetValue.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
