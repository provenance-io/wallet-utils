// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/marker/v1/accessgrant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.marker.v1";

/** Access defines the different types of permissions that a marker supports granting to an address. */
export enum Access {
  /** ACCESS_UNSPECIFIED - ACCESS_UNSPECIFIED defines a no-op vote option. */
  ACCESS_UNSPECIFIED = 0,
  /** ACCESS_MINT - ACCESS_MINT is the ability to increase the supply of a marker. */
  ACCESS_MINT = 1,
  /** ACCESS_BURN - ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker. */
  ACCESS_BURN = 2,
  /**
   * ACCESS_DEPOSIT - ACCESS_DEPOSIT is the ability to transfer funds from another account to this marker account
   * or to set a reference to this marker in the metadata/scopes module.
   */
  ACCESS_DEPOSIT = 3,
  /**
   * ACCESS_WITHDRAW - ACCESS_WITHDRAW is the ability to transfer funds from this marker account to another account
   * or to remove a reference to this marker in the metadata/scopes module.
   */
  ACCESS_WITHDRAW = 4,
  /**
   * ACCESS_DELETE - ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state.
   * This access also allows cancelled markers to be marked for deletion.
   */
  ACCESS_DELETE = 5,
  /**
   * ACCESS_ADMIN - ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
   * This access also gives the ability to update the marker's denom metadata.
   */
  ACCESS_ADMIN = 6,
  /**
   * ACCESS_TRANSFER - ACCESS_TRANSFER is the ability to manage transfer settings and broker transfers of the marker.
   * Accounts with this access can:
   *  - Update the marker's required attributes.
   *  - Update the send-deny list.
   *  - Use the transfer or bank send endpoints to move marker funds out of their own account.
   * This access right is only supported on RESTRICTED markers.
   */
  ACCESS_TRANSFER = 7,
  /**
   * ACCESS_FORCE_TRANSFER - ACCESS_FORCE_TRANSFER is the ability to transfer restricted coins from a 3rd-party account without their signature.
   * This access right is only supported on RESTRICTED markers and only has meaning when allow_forced_transfer is true.
   */
  ACCESS_FORCE_TRANSFER = 8,
  UNRECOGNIZED = -1,
}

export function accessFromJSON(object: any): Access {
  switch (object) {
    case 0:
    case "ACCESS_UNSPECIFIED":
      return Access.ACCESS_UNSPECIFIED;
    case 1:
    case "ACCESS_MINT":
      return Access.ACCESS_MINT;
    case 2:
    case "ACCESS_BURN":
      return Access.ACCESS_BURN;
    case 3:
    case "ACCESS_DEPOSIT":
      return Access.ACCESS_DEPOSIT;
    case 4:
    case "ACCESS_WITHDRAW":
      return Access.ACCESS_WITHDRAW;
    case 5:
    case "ACCESS_DELETE":
      return Access.ACCESS_DELETE;
    case 6:
    case "ACCESS_ADMIN":
      return Access.ACCESS_ADMIN;
    case 7:
    case "ACCESS_TRANSFER":
      return Access.ACCESS_TRANSFER;
    case 8:
    case "ACCESS_FORCE_TRANSFER":
      return Access.ACCESS_FORCE_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Access.UNRECOGNIZED;
  }
}

export function accessToJSON(object: Access): string {
  switch (object) {
    case Access.ACCESS_UNSPECIFIED:
      return "ACCESS_UNSPECIFIED";
    case Access.ACCESS_MINT:
      return "ACCESS_MINT";
    case Access.ACCESS_BURN:
      return "ACCESS_BURN";
    case Access.ACCESS_DEPOSIT:
      return "ACCESS_DEPOSIT";
    case Access.ACCESS_WITHDRAW:
      return "ACCESS_WITHDRAW";
    case Access.ACCESS_DELETE:
      return "ACCESS_DELETE";
    case Access.ACCESS_ADMIN:
      return "ACCESS_ADMIN";
    case Access.ACCESS_TRANSFER:
      return "ACCESS_TRANSFER";
    case Access.ACCESS_FORCE_TRANSFER:
      return "ACCESS_FORCE_TRANSFER";
    case Access.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** AccessGrant associates a collection of permissions with an address for delegated marker account control. */
export interface AccessGrant {
  address: string;
  permissions: Access[];
}

function createBaseAccessGrant(): AccessGrant {
  return { address: "", permissions: [] };
}

export const AccessGrant: MessageFns<AccessGrant> = {
  encode(message: AccessGrant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    writer.uint32(18).fork();
    for (const v of message.permissions) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessGrant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.permissions.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessGrant {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => accessFromJSON(e))
        : [],
    };
  },

  toJSON(message: AccessGrant): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => accessToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessGrant>, I>>(base?: I): AccessGrant {
    return AccessGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessGrant>, I>>(object: I): AccessGrant {
    const message = createBaseAccessGrant();
    message.address = object.address ?? "";
    message.permissions = object.permissions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
