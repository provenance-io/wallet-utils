// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/marker/v1/proposals.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { AccessGrant } from "./accessgrant";
import {
  MarkerStatus,
  markerStatusFromJSON,
  markerStatusToJSON,
  MarkerType,
  markerTypeFromJSON,
  markerTypeToJSON,
} from "./marker";

export const protobufPackage = "provenance.marker.v1";

/**
 * AddMarkerProposal is deprecated and can no longer be used.
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgAddMarkerRequest in a governance proposal.
 *
 * @deprecated
 */
export interface AddMarkerProposal {
  title: string;
  description: string;
  amount?: Coin | undefined;
  manager: string;
  status: MarkerStatus;
  markerType: MarkerType;
  accessList: AccessGrant[];
  supplyFixed: boolean;
  allowGovernanceControl: boolean;
}

/**
 * SupplyIncreaseProposal defines a governance proposal to administer a marker and increase total supply of the marker
 * through minting coin and placing it within the marker or assigning it directly to an account
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgSupplyIncreaseProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface SupplyIncreaseProposal {
  title: string;
  description: string;
  amount?:
    | Coin
    | undefined;
  /** an optional target address for the minted coin from this request */
  targetAddress: string;
}

/**
 * SupplyDecreaseProposal defines a governance proposal to administer a marker and decrease the total supply through
 * burning coin held within the marker
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgSupplyDecreaseProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface SupplyDecreaseProposal {
  title: string;
  description: string;
  amount?: Coin | undefined;
}

/**
 * SetAdministratorProposal defines a governance proposal to administer a marker and set administrators with specific
 * access on the marker
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgSetAdministratorProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface SetAdministratorProposal {
  title: string;
  description: string;
  denom: string;
  access: AccessGrant[];
}

/**
 * RemoveAdministratorProposal defines a governance proposal to administer a marker and remove all permissions for a
 * given address
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgRemoveAdministratorProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface RemoveAdministratorProposal {
  title: string;
  description: string;
  denom: string;
  removedAddress: string[];
}

/**
 * ChangeStatusProposal defines a governance proposal to administer a marker to change its status
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgChangeStatusProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface ChangeStatusProposal {
  title: string;
  description: string;
  denom: string;
  newStatus: MarkerStatus;
}

/**
 * WithdrawEscrowProposal defines a governance proposal to withdraw escrow coins from a marker
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgWithdrawEscrowProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface WithdrawEscrowProposal {
  title: string;
  description: string;
  denom: string;
  amount: Coin[];
  targetAddress: string;
}

/**
 * SetDenomMetadataProposal defines a governance proposal to set the metadata for a denom
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgSetDenomMetadataProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface SetDenomMetadataProposal {
  title: string;
  description: string;
  metadata?: Metadata | undefined;
}

function createBaseAddMarkerProposal(): AddMarkerProposal {
  return {
    title: "",
    description: "",
    amount: undefined,
    manager: "",
    status: 0,
    markerType: 0,
    accessList: [],
    supplyFixed: false,
    allowGovernanceControl: false,
  };
}

export const AddMarkerProposal: MessageFns<AddMarkerProposal> = {
  encode(message: AddMarkerProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.manager !== "") {
      writer.uint32(34).string(message.manager);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.markerType !== 0) {
      writer.uint32(48).int32(message.markerType);
    }
    for (const v of message.accessList) {
      AccessGrant.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.supplyFixed !== false) {
      writer.uint32(64).bool(message.supplyFixed);
    }
    if (message.allowGovernanceControl !== false) {
      writer.uint32(72).bool(message.allowGovernanceControl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMarkerProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMarkerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.manager = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.markerType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.accessList.push(AccessGrant.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.supplyFixed = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.allowGovernanceControl = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMarkerProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      manager: isSet(object.manager) ? globalThis.String(object.manager) : "",
      status: isSet(object.status) ? markerStatusFromJSON(object.status) : 0,
      markerType: isSet(object.markerType) ? markerTypeFromJSON(object.markerType) : 0,
      accessList: globalThis.Array.isArray(object?.accessList)
        ? object.accessList.map((e: any) => AccessGrant.fromJSON(e))
        : [],
      supplyFixed: isSet(object.supplyFixed) ? globalThis.Boolean(object.supplyFixed) : false,
      allowGovernanceControl: isSet(object.allowGovernanceControl)
        ? globalThis.Boolean(object.allowGovernanceControl)
        : false,
    };
  },

  toJSON(message: AddMarkerProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.manager !== "") {
      obj.manager = message.manager;
    }
    if (message.status !== 0) {
      obj.status = markerStatusToJSON(message.status);
    }
    if (message.markerType !== 0) {
      obj.markerType = markerTypeToJSON(message.markerType);
    }
    if (message.accessList?.length) {
      obj.accessList = message.accessList.map((e) => AccessGrant.toJSON(e));
    }
    if (message.supplyFixed !== false) {
      obj.supplyFixed = message.supplyFixed;
    }
    if (message.allowGovernanceControl !== false) {
      obj.allowGovernanceControl = message.allowGovernanceControl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMarkerProposal>, I>>(base?: I): AddMarkerProposal {
    return AddMarkerProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMarkerProposal>, I>>(object: I): AddMarkerProposal {
    const message = createBaseAddMarkerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.manager = object.manager ?? "";
    message.status = object.status ?? 0;
    message.markerType = object.markerType ?? 0;
    message.accessList = object.accessList?.map((e) => AccessGrant.fromPartial(e)) || [];
    message.supplyFixed = object.supplyFixed ?? false;
    message.allowGovernanceControl = object.allowGovernanceControl ?? false;
    return message;
  },
};

function createBaseSupplyIncreaseProposal(): SupplyIncreaseProposal {
  return { title: "", description: "", amount: undefined, targetAddress: "" };
}

export const SupplyIncreaseProposal: MessageFns<SupplyIncreaseProposal> = {
  encode(message: SupplyIncreaseProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.targetAddress !== "") {
      writer.uint32(34).string(message.targetAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupplyIncreaseProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupplyIncreaseProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupplyIncreaseProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      targetAddress: isSet(object.targetAddress) ? globalThis.String(object.targetAddress) : "",
    };
  },

  toJSON(message: SupplyIncreaseProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.targetAddress !== "") {
      obj.targetAddress = message.targetAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupplyIncreaseProposal>, I>>(base?: I): SupplyIncreaseProposal {
    return SupplyIncreaseProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupplyIncreaseProposal>, I>>(object: I): SupplyIncreaseProposal {
    const message = createBaseSupplyIncreaseProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.targetAddress = object.targetAddress ?? "";
    return message;
  },
};

function createBaseSupplyDecreaseProposal(): SupplyDecreaseProposal {
  return { title: "", description: "", amount: undefined };
}

export const SupplyDecreaseProposal: MessageFns<SupplyDecreaseProposal> = {
  encode(message: SupplyDecreaseProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupplyDecreaseProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupplyDecreaseProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupplyDecreaseProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: SupplyDecreaseProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupplyDecreaseProposal>, I>>(base?: I): SupplyDecreaseProposal {
    return SupplyDecreaseProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupplyDecreaseProposal>, I>>(object: I): SupplyDecreaseProposal {
    const message = createBaseSupplyDecreaseProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseSetAdministratorProposal(): SetAdministratorProposal {
  return { title: "", description: "", denom: "", access: [] };
}

export const SetAdministratorProposal: MessageFns<SetAdministratorProposal> = {
  encode(message: SetAdministratorProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    for (const v of message.access) {
      AccessGrant.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAdministratorProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAdministratorProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.access.push(AccessGrant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAdministratorProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      access: globalThis.Array.isArray(object?.access) ? object.access.map((e: any) => AccessGrant.fromJSON(e)) : [],
    };
  },

  toJSON(message: SetAdministratorProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.access?.length) {
      obj.access = message.access.map((e) => AccessGrant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAdministratorProposal>, I>>(base?: I): SetAdministratorProposal {
    return SetAdministratorProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAdministratorProposal>, I>>(object: I): SetAdministratorProposal {
    const message = createBaseSetAdministratorProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.denom = object.denom ?? "";
    message.access = object.access?.map((e) => AccessGrant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveAdministratorProposal(): RemoveAdministratorProposal {
  return { title: "", description: "", denom: "", removedAddress: [] };
}

export const RemoveAdministratorProposal: MessageFns<RemoveAdministratorProposal> = {
  encode(message: RemoveAdministratorProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    for (const v of message.removedAddress) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAdministratorProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAdministratorProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.removedAddress.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAdministratorProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      removedAddress: globalThis.Array.isArray(object?.removedAddress)
        ? object.removedAddress.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RemoveAdministratorProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.removedAddress?.length) {
      obj.removedAddress = message.removedAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAdministratorProposal>, I>>(base?: I): RemoveAdministratorProposal {
    return RemoveAdministratorProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAdministratorProposal>, I>>(object: I): RemoveAdministratorProposal {
    const message = createBaseRemoveAdministratorProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.denom = object.denom ?? "";
    message.removedAddress = object.removedAddress?.map((e) => e) || [];
    return message;
  },
};

function createBaseChangeStatusProposal(): ChangeStatusProposal {
  return { title: "", description: "", denom: "", newStatus: 0 };
}

export const ChangeStatusProposal: MessageFns<ChangeStatusProposal> = {
  encode(message: ChangeStatusProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.newStatus !== 0) {
      writer.uint32(32).int32(message.newStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeStatusProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeStatusProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.newStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeStatusProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      newStatus: isSet(object.newStatus) ? markerStatusFromJSON(object.newStatus) : 0,
    };
  },

  toJSON(message: ChangeStatusProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.newStatus !== 0) {
      obj.newStatus = markerStatusToJSON(message.newStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeStatusProposal>, I>>(base?: I): ChangeStatusProposal {
    return ChangeStatusProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeStatusProposal>, I>>(object: I): ChangeStatusProposal {
    const message = createBaseChangeStatusProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.denom = object.denom ?? "";
    message.newStatus = object.newStatus ?? 0;
    return message;
  },
};

function createBaseWithdrawEscrowProposal(): WithdrawEscrowProposal {
  return { title: "", description: "", denom: "", amount: [], targetAddress: "" };
}

export const WithdrawEscrowProposal: MessageFns<WithdrawEscrowProposal> = {
  encode(message: WithdrawEscrowProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.targetAddress !== "") {
      writer.uint32(42).string(message.targetAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithdrawEscrowProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawEscrowProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.targetAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WithdrawEscrowProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
      targetAddress: isSet(object.targetAddress) ? globalThis.String(object.targetAddress) : "",
    };
  },

  toJSON(message: WithdrawEscrowProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.targetAddress !== "") {
      obj.targetAddress = message.targetAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WithdrawEscrowProposal>, I>>(base?: I): WithdrawEscrowProposal {
    return WithdrawEscrowProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WithdrawEscrowProposal>, I>>(object: I): WithdrawEscrowProposal {
    const message = createBaseWithdrawEscrowProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    message.targetAddress = object.targetAddress ?? "";
    return message;
  },
};

function createBaseSetDenomMetadataProposal(): SetDenomMetadataProposal {
  return { title: "", description: "", metadata: undefined };
}

export const SetDenomMetadataProposal: MessageFns<SetDenomMetadataProposal> = {
  encode(message: SetDenomMetadataProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDenomMetadataProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDenomMetadataProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDenomMetadataProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SetDenomMetadataProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDenomMetadataProposal>, I>>(base?: I): SetDenomMetadataProposal {
    return SetDenomMetadataProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDenomMetadataProposal>, I>>(object: I): SetDenomMetadataProposal {
    const message = createBaseSetDenomMetadataProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
