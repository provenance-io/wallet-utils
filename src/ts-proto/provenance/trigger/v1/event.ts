// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/trigger/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.trigger.v1";

/** EventTriggerCreated is an event for when a trigger is created */
export interface EventTriggerCreated {
  /** trigger_id is a unique identifier of the trigger. */
  triggerId: string;
}

/** EventTriggerDestroyed is an event for when a trigger is destroyed */
export interface EventTriggerDestroyed {
  /** trigger_id is a unique identifier of the trigger. */
  triggerId: string;
}

/** EventTriggerDetected is an event for when a trigger's event is detected */
export interface EventTriggerDetected {
  /** trigger_id is a unique identifier of the trigger. */
  triggerId: string;
}

/** EventTriggerExecuted is an event for when a trigger is executed. */
export interface EventTriggerExecuted {
  /** trigger_id is a unique identifier of the trigger. */
  triggerId: string;
  /** owner is the creator of the trigger. */
  owner: string;
  /** success indicates if all executed actions were successful. */
  success: boolean;
}

function createBaseEventTriggerCreated(): EventTriggerCreated {
  return { triggerId: "" };
}

export const EventTriggerCreated: MessageFns<EventTriggerCreated> = {
  encode(message: EventTriggerCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.triggerId !== "") {
      writer.uint32(10).string(message.triggerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTriggerCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTriggerCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTriggerCreated {
    return { triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "" };
  },

  toJSON(message: EventTriggerCreated): unknown {
    const obj: any = {};
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTriggerCreated>, I>>(base?: I): EventTriggerCreated {
    return EventTriggerCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTriggerCreated>, I>>(object: I): EventTriggerCreated {
    const message = createBaseEventTriggerCreated();
    message.triggerId = object.triggerId ?? "";
    return message;
  },
};

function createBaseEventTriggerDestroyed(): EventTriggerDestroyed {
  return { triggerId: "" };
}

export const EventTriggerDestroyed: MessageFns<EventTriggerDestroyed> = {
  encode(message: EventTriggerDestroyed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.triggerId !== "") {
      writer.uint32(10).string(message.triggerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTriggerDestroyed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTriggerDestroyed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTriggerDestroyed {
    return { triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "" };
  },

  toJSON(message: EventTriggerDestroyed): unknown {
    const obj: any = {};
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTriggerDestroyed>, I>>(base?: I): EventTriggerDestroyed {
    return EventTriggerDestroyed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTriggerDestroyed>, I>>(object: I): EventTriggerDestroyed {
    const message = createBaseEventTriggerDestroyed();
    message.triggerId = object.triggerId ?? "";
    return message;
  },
};

function createBaseEventTriggerDetected(): EventTriggerDetected {
  return { triggerId: "" };
}

export const EventTriggerDetected: MessageFns<EventTriggerDetected> = {
  encode(message: EventTriggerDetected, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.triggerId !== "") {
      writer.uint32(10).string(message.triggerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTriggerDetected {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTriggerDetected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTriggerDetected {
    return { triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "" };
  },

  toJSON(message: EventTriggerDetected): unknown {
    const obj: any = {};
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTriggerDetected>, I>>(base?: I): EventTriggerDetected {
    return EventTriggerDetected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTriggerDetected>, I>>(object: I): EventTriggerDetected {
    const message = createBaseEventTriggerDetected();
    message.triggerId = object.triggerId ?? "";
    return message;
  },
};

function createBaseEventTriggerExecuted(): EventTriggerExecuted {
  return { triggerId: "", owner: "", success: false };
}

export const EventTriggerExecuted: MessageFns<EventTriggerExecuted> = {
  encode(message: EventTriggerExecuted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.triggerId !== "") {
      writer.uint32(10).string(message.triggerId);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.success !== false) {
      writer.uint32(24).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTriggerExecuted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTriggerExecuted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.triggerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTriggerExecuted {
    return {
      triggerId: isSet(object.triggerId) ? globalThis.String(object.triggerId) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: EventTriggerExecuted): unknown {
    const obj: any = {};
    if (message.triggerId !== "") {
      obj.triggerId = message.triggerId;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTriggerExecuted>, I>>(base?: I): EventTriggerExecuted {
    return EventTriggerExecuted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTriggerExecuted>, I>>(object: I): EventTriggerExecuted {
    const message = createBaseEventTriggerExecuted();
    message.triggerId = object.triggerId ?? "";
    message.owner = object.owner ?? "";
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
