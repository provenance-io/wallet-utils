// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/trigger/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { QueuedTrigger, Trigger } from "./trigger";

export const protobufPackage = "provenance.trigger.v1";

/** GenesisState defines the trigger module's genesis state. */
export interface GenesisState {
  /** Trigger id is the next auto incremented id to be assigned to the next created trigger */
  triggerId: Long;
  /** Queue start is the starting index of the queue. */
  queueStart: Long;
  /** Triggers to initially start with. */
  triggers: Trigger[];
  /** Maximum amount of gas that the triggers can use. */
  gasLimits: GasLimit[];
  /** Triggers to initially start with in the queue. */
  queuedTriggers: QueuedTrigger[];
}

/** GasLimit defines the trigger module's grouping of a trigger and a gas limit */
export interface GasLimit {
  /** The identifier of the trigger this GasLimit belongs to. */
  triggerId: Long;
  /** The maximum amount of gas that the trigger can use. */
  amount: Long;
}

function createBaseGenesisState(): GenesisState {
  return { triggerId: Long.UZERO, queueStart: Long.UZERO, triggers: [], gasLimits: [], queuedTriggers: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.triggerId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.triggerId.toString());
    }
    if (!message.queueStart.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.queueStart.toString());
    }
    for (const v of message.triggers) {
      Trigger.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.gasLimits) {
      GasLimit.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.queuedTriggers) {
      QueuedTrigger.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.triggerId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.queueStart = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.triggers.push(Trigger.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gasLimits.push(GasLimit.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.queuedTriggers.push(QueuedTrigger.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      triggerId: isSet(object.triggerId) ? Long.fromValue(object.triggerId) : Long.UZERO,
      queueStart: isSet(object.queueStart) ? Long.fromValue(object.queueStart) : Long.UZERO,
      triggers: globalThis.Array.isArray(object?.triggers) ? object.triggers.map((e: any) => Trigger.fromJSON(e)) : [],
      gasLimits: globalThis.Array.isArray(object?.gasLimits)
        ? object.gasLimits.map((e: any) => GasLimit.fromJSON(e))
        : [],
      queuedTriggers: globalThis.Array.isArray(object?.queuedTriggers)
        ? object.queuedTriggers.map((e: any) => QueuedTrigger.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (!message.triggerId.equals(Long.UZERO)) {
      obj.triggerId = (message.triggerId || Long.UZERO).toString();
    }
    if (!message.queueStart.equals(Long.UZERO)) {
      obj.queueStart = (message.queueStart || Long.UZERO).toString();
    }
    if (message.triggers?.length) {
      obj.triggers = message.triggers.map((e) => Trigger.toJSON(e));
    }
    if (message.gasLimits?.length) {
      obj.gasLimits = message.gasLimits.map((e) => GasLimit.toJSON(e));
    }
    if (message.queuedTriggers?.length) {
      obj.queuedTriggers = message.queuedTriggers.map((e) => QueuedTrigger.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.triggerId = (object.triggerId !== undefined && object.triggerId !== null)
      ? Long.fromValue(object.triggerId)
      : Long.UZERO;
    message.queueStart = (object.queueStart !== undefined && object.queueStart !== null)
      ? Long.fromValue(object.queueStart)
      : Long.UZERO;
    message.triggers = object.triggers?.map((e) => Trigger.fromPartial(e)) || [];
    message.gasLimits = object.gasLimits?.map((e) => GasLimit.fromPartial(e)) || [];
    message.queuedTriggers = object.queuedTriggers?.map((e) => QueuedTrigger.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGasLimit(): GasLimit {
  return { triggerId: Long.UZERO, amount: Long.UZERO };
}

export const GasLimit: MessageFns<GasLimit> = {
  encode(message: GasLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.triggerId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.triggerId.toString());
    }
    if (!message.amount.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.amount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GasLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGasLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.triggerId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GasLimit {
    return {
      triggerId: isSet(object.triggerId) ? Long.fromValue(object.triggerId) : Long.UZERO,
      amount: isSet(object.amount) ? Long.fromValue(object.amount) : Long.UZERO,
    };
  },

  toJSON(message: GasLimit): unknown {
    const obj: any = {};
    if (!message.triggerId.equals(Long.UZERO)) {
      obj.triggerId = (message.triggerId || Long.UZERO).toString();
    }
    if (!message.amount.equals(Long.UZERO)) {
      obj.amount = (message.amount || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GasLimit>, I>>(base?: I): GasLimit {
    return GasLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GasLimit>, I>>(object: I): GasLimit {
    const message = createBaseGasLimit();
    message.triggerId = (object.triggerId !== undefined && object.triggerId !== null)
      ? Long.fromValue(object.triggerId)
      : Long.UZERO;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Long.fromValue(object.amount)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
