// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/trigger/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Trigger } from "./trigger";

export const protobufPackage = "provenance.trigger.v1";

/** QueryTriggerByIDRequest queries for the Trigger with an identifier of id. */
export interface QueryTriggerByIDRequest {
  /** The id of the trigger to query. */
  id: Long;
}

/** QueryTriggerByIDResponse contains the requested Trigger. */
export interface QueryTriggerByIDResponse {
  /** The trigger object that was queried for. */
  trigger?: Trigger | undefined;
}

/** QueryTriggersRequest queries for all triggers. */
export interface QueryTriggersRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryTriggersResponse contains the list of Triggers. */
export interface QueryTriggersResponse {
  /** List of Trigger objects. */
  triggers: Trigger[];
  /** pagination defines an optional pagination for the response. */
  pagination?: PageResponse | undefined;
}

function createBaseQueryTriggerByIDRequest(): QueryTriggerByIDRequest {
  return { id: Long.UZERO };
}

export const QueryTriggerByIDRequest: MessageFns<QueryTriggerByIDRequest> = {
  encode(message: QueryTriggerByIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTriggerByIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTriggerByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTriggerByIDRequest {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: QueryTriggerByIDRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTriggerByIDRequest>, I>>(base?: I): QueryTriggerByIDRequest {
    return QueryTriggerByIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTriggerByIDRequest>, I>>(object: I): QueryTriggerByIDRequest {
    const message = createBaseQueryTriggerByIDRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseQueryTriggerByIDResponse(): QueryTriggerByIDResponse {
  return { trigger: undefined };
}

export const QueryTriggerByIDResponse: MessageFns<QueryTriggerByIDResponse> = {
  encode(message: QueryTriggerByIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trigger !== undefined) {
      Trigger.encode(message.trigger, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTriggerByIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTriggerByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trigger = Trigger.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTriggerByIDResponse {
    return { trigger: isSet(object.trigger) ? Trigger.fromJSON(object.trigger) : undefined };
  },

  toJSON(message: QueryTriggerByIDResponse): unknown {
    const obj: any = {};
    if (message.trigger !== undefined) {
      obj.trigger = Trigger.toJSON(message.trigger);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTriggerByIDResponse>, I>>(base?: I): QueryTriggerByIDResponse {
    return QueryTriggerByIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTriggerByIDResponse>, I>>(object: I): QueryTriggerByIDResponse {
    const message = createBaseQueryTriggerByIDResponse();
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? Trigger.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseQueryTriggersRequest(): QueryTriggersRequest {
  return { pagination: undefined };
}

export const QueryTriggersRequest: MessageFns<QueryTriggersRequest> = {
  encode(message: QueryTriggersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTriggersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTriggersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTriggersRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryTriggersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTriggersRequest>, I>>(base?: I): QueryTriggersRequest {
    return QueryTriggersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTriggersRequest>, I>>(object: I): QueryTriggersRequest {
    const message = createBaseQueryTriggersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryTriggersResponse(): QueryTriggersResponse {
  return { triggers: [], pagination: undefined };
}

export const QueryTriggersResponse: MessageFns<QueryTriggersResponse> = {
  encode(message: QueryTriggersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.triggers) {
      Trigger.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTriggersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTriggersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.triggers.push(Trigger.decode(reader, reader.uint32()));
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTriggersResponse {
    return {
      triggers: globalThis.Array.isArray(object?.triggers) ? object.triggers.map((e: any) => Trigger.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryTriggersResponse): unknown {
    const obj: any = {};
    if (message.triggers?.length) {
      obj.triggers = message.triggers.map((e) => Trigger.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTriggersResponse>, I>>(base?: I): QueryTriggersResponse {
    return QueryTriggersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTriggersResponse>, I>>(object: I): QueryTriggersResponse {
    const message = createBaseQueryTriggersResponse();
    message.triggers = object.triggers?.map((e) => Trigger.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service for trigger module. */
export interface Query {
  /** TriggerByID returns a trigger matching the ID. */
  TriggerByID(request: QueryTriggerByIDRequest): Promise<QueryTriggerByIDResponse>;
  /** Triggers returns the list of triggers. */
  Triggers(request: QueryTriggersRequest): Promise<QueryTriggersResponse>;
}

export const QueryServiceName = "provenance.trigger.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.TriggerByID = this.TriggerByID.bind(this);
    this.Triggers = this.Triggers.bind(this);
  }
  TriggerByID(request: QueryTriggerByIDRequest): Promise<QueryTriggerByIDResponse> {
    const data = QueryTriggerByIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerByID", data);
    return promise.then((data) => QueryTriggerByIDResponse.decode(new BinaryReader(data)));
  }

  Triggers(request: QueryTriggersRequest): Promise<QueryTriggersResponse> {
    const data = QueryTriggersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Triggers", data);
    return promise.then((data) => QueryTriggersResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
