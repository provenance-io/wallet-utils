// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/trigger/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any";

export const protobufPackage = "provenance.trigger.v1";

/** MsgCreateTriggerRequest is the request type for creating a trigger RPC */
export interface MsgCreateTriggerRequest {
  /** The signing authorities for the request */
  authorities: string[];
  /** The event that must be detected for the trigger to fire. */
  event?:
    | Any
    | undefined;
  /** The messages to run when the trigger fires. */
  actions: Any[];
}

/** MsgCreateTriggerResponse is the response type for creating a trigger RPC */
export interface MsgCreateTriggerResponse {
  /** trigger id that is generated on creation. */
  id: Long;
}

/** MsgDestroyTriggerRequest is the request type for creating a trigger RPC */
export interface MsgDestroyTriggerRequest {
  /** the id of the trigger to destroy. */
  id: Long;
  /** The signing authority for the request */
  authority: string;
}

/** MsgDestroyTriggerResponse is the response type for creating a trigger RPC */
export interface MsgDestroyTriggerResponse {
}

function createBaseMsgCreateTriggerRequest(): MsgCreateTriggerRequest {
  return { authorities: [], event: undefined, actions: [] };
}

export const MsgCreateTriggerRequest: MessageFns<MsgCreateTriggerRequest> = {
  encode(message: MsgCreateTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.authorities) {
      writer.uint32(10).string(v!);
    }
    if (message.event !== undefined) {
      Any.encode(message.event, writer.uint32(18).fork()).join();
    }
    for (const v of message.actions) {
      Any.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorities.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event = Any.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actions.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTriggerRequest {
    return {
      authorities: globalThis.Array.isArray(object?.authorities)
        ? object.authorities.map((e: any) => globalThis.String(e))
        : [],
      event: isSet(object.event) ? Any.fromJSON(object.event) : undefined,
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Any.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgCreateTriggerRequest): unknown {
    const obj: any = {};
    if (message.authorities?.length) {
      obj.authorities = message.authorities;
    }
    if (message.event !== undefined) {
      obj.event = Any.toJSON(message.event);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTriggerRequest>, I>>(base?: I): MsgCreateTriggerRequest {
    return MsgCreateTriggerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTriggerRequest>, I>>(object: I): MsgCreateTriggerRequest {
    const message = createBaseMsgCreateTriggerRequest();
    message.authorities = object.authorities?.map((e) => e) || [];
    message.event = (object.event !== undefined && object.event !== null) ? Any.fromPartial(object.event) : undefined;
    message.actions = object.actions?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgCreateTriggerResponse(): MsgCreateTriggerResponse {
  return { id: Long.UZERO };
}

export const MsgCreateTriggerResponse: MessageFns<MsgCreateTriggerResponse> = {
  encode(message: MsgCreateTriggerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateTriggerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTriggerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTriggerResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreateTriggerResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTriggerResponse>, I>>(base?: I): MsgCreateTriggerResponse {
    return MsgCreateTriggerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTriggerResponse>, I>>(object: I): MsgCreateTriggerResponse {
    const message = createBaseMsgCreateTriggerResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgDestroyTriggerRequest(): MsgDestroyTriggerRequest {
  return { id: Long.UZERO, authority: "" };
}

export const MsgDestroyTriggerRequest: MessageFns<MsgDestroyTriggerRequest> = {
  encode(message: MsgDestroyTriggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id.toString());
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDestroyTriggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDestroyTriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDestroyTriggerRequest {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgDestroyTriggerRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDestroyTriggerRequest>, I>>(base?: I): MsgDestroyTriggerRequest {
    return MsgDestroyTriggerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDestroyTriggerRequest>, I>>(object: I): MsgDestroyTriggerRequest {
    const message = createBaseMsgDestroyTriggerRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgDestroyTriggerResponse(): MsgDestroyTriggerResponse {
  return {};
}

export const MsgDestroyTriggerResponse: MessageFns<MsgDestroyTriggerResponse> = {
  encode(_: MsgDestroyTriggerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDestroyTriggerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDestroyTriggerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDestroyTriggerResponse {
    return {};
  },

  toJSON(_: MsgDestroyTriggerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDestroyTriggerResponse>, I>>(base?: I): MsgDestroyTriggerResponse {
    return MsgDestroyTriggerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDestroyTriggerResponse>, I>>(_: I): MsgDestroyTriggerResponse {
    const message = createBaseMsgDestroyTriggerResponse();
    return message;
  },
};

/** Msg */
export interface Msg {
  /** CreateTrigger is the RPC endpoint for creating a trigger */
  CreateTrigger(request: MsgCreateTriggerRequest): Promise<MsgCreateTriggerResponse>;
  /** DestroyTrigger is the RPC endpoint for creating a trigger */
  DestroyTrigger(request: MsgDestroyTriggerRequest): Promise<MsgDestroyTriggerResponse>;
}

export const MsgServiceName = "provenance.trigger.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateTrigger = this.CreateTrigger.bind(this);
    this.DestroyTrigger = this.DestroyTrigger.bind(this);
  }
  CreateTrigger(request: MsgCreateTriggerRequest): Promise<MsgCreateTriggerResponse> {
    const data = MsgCreateTriggerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTrigger", data);
    return promise.then((data) => MsgCreateTriggerResponse.decode(new BinaryReader(data)));
  }

  DestroyTrigger(request: MsgDestroyTriggerRequest): Promise<MsgDestroyTriggerResponse> {
    const data = MsgDestroyTriggerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DestroyTrigger", data);
    return promise.then((data) => MsgDestroyTriggerResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
