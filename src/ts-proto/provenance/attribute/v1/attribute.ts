// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/attribute/v1/attribute.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "provenance.attribute.v1";

/** AttributeType defines the type of the data stored in the attribute value */
export enum AttributeType {
  /** ATTRIBUTE_TYPE_UNSPECIFIED - ATTRIBUTE_TYPE_UNSPECIFIED defines an unknown/invalid type */
  ATTRIBUTE_TYPE_UNSPECIFIED = 0,
  /** ATTRIBUTE_TYPE_UUID - ATTRIBUTE_TYPE_UUID defines an attribute value that contains a string value representation of a V4 uuid */
  ATTRIBUTE_TYPE_UUID = 1,
  /** ATTRIBUTE_TYPE_JSON - ATTRIBUTE_TYPE_JSON defines an attribute value that contains a byte string containing json data */
  ATTRIBUTE_TYPE_JSON = 2,
  /** ATTRIBUTE_TYPE_STRING - ATTRIBUTE_TYPE_STRING defines an attribute value that contains a generic string value */
  ATTRIBUTE_TYPE_STRING = 3,
  /** ATTRIBUTE_TYPE_URI - ATTRIBUTE_TYPE_URI defines an attribute value that contains a URI */
  ATTRIBUTE_TYPE_URI = 4,
  /** ATTRIBUTE_TYPE_INT - ATTRIBUTE_TYPE_INT defines an attribute value that contains an integer (cast as int64) */
  ATTRIBUTE_TYPE_INT = 5,
  /** ATTRIBUTE_TYPE_FLOAT - ATTRIBUTE_TYPE_FLOAT defines an attribute value that contains a float */
  ATTRIBUTE_TYPE_FLOAT = 6,
  /** ATTRIBUTE_TYPE_PROTO - ATTRIBUTE_TYPE_PROTO defines an attribute value that contains a serialized proto value in bytes */
  ATTRIBUTE_TYPE_PROTO = 7,
  /** ATTRIBUTE_TYPE_BYTES - ATTRIBUTE_TYPE_BYTES defines an attribute value that contains an untyped array of bytes */
  ATTRIBUTE_TYPE_BYTES = 8,
  UNRECOGNIZED = -1,
}

export function attributeTypeFromJSON(object: any): AttributeType {
  switch (object) {
    case 0:
    case "ATTRIBUTE_TYPE_UNSPECIFIED":
      return AttributeType.ATTRIBUTE_TYPE_UNSPECIFIED;
    case 1:
    case "ATTRIBUTE_TYPE_UUID":
      return AttributeType.ATTRIBUTE_TYPE_UUID;
    case 2:
    case "ATTRIBUTE_TYPE_JSON":
      return AttributeType.ATTRIBUTE_TYPE_JSON;
    case 3:
    case "ATTRIBUTE_TYPE_STRING":
      return AttributeType.ATTRIBUTE_TYPE_STRING;
    case 4:
    case "ATTRIBUTE_TYPE_URI":
      return AttributeType.ATTRIBUTE_TYPE_URI;
    case 5:
    case "ATTRIBUTE_TYPE_INT":
      return AttributeType.ATTRIBUTE_TYPE_INT;
    case 6:
    case "ATTRIBUTE_TYPE_FLOAT":
      return AttributeType.ATTRIBUTE_TYPE_FLOAT;
    case 7:
    case "ATTRIBUTE_TYPE_PROTO":
      return AttributeType.ATTRIBUTE_TYPE_PROTO;
    case 8:
    case "ATTRIBUTE_TYPE_BYTES":
      return AttributeType.ATTRIBUTE_TYPE_BYTES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributeType.UNRECOGNIZED;
  }
}

export function attributeTypeToJSON(object: AttributeType): string {
  switch (object) {
    case AttributeType.ATTRIBUTE_TYPE_UNSPECIFIED:
      return "ATTRIBUTE_TYPE_UNSPECIFIED";
    case AttributeType.ATTRIBUTE_TYPE_UUID:
      return "ATTRIBUTE_TYPE_UUID";
    case AttributeType.ATTRIBUTE_TYPE_JSON:
      return "ATTRIBUTE_TYPE_JSON";
    case AttributeType.ATTRIBUTE_TYPE_STRING:
      return "ATTRIBUTE_TYPE_STRING";
    case AttributeType.ATTRIBUTE_TYPE_URI:
      return "ATTRIBUTE_TYPE_URI";
    case AttributeType.ATTRIBUTE_TYPE_INT:
      return "ATTRIBUTE_TYPE_INT";
    case AttributeType.ATTRIBUTE_TYPE_FLOAT:
      return "ATTRIBUTE_TYPE_FLOAT";
    case AttributeType.ATTRIBUTE_TYPE_PROTO:
      return "ATTRIBUTE_TYPE_PROTO";
    case AttributeType.ATTRIBUTE_TYPE_BYTES:
      return "ATTRIBUTE_TYPE_BYTES";
    case AttributeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Params defines the set of params for the attribute module. */
export interface Params {
  /** maximum length of data to allow in an attribute value */
  maxValueLength: number;
}

/** Attribute holds a typed key/value structure for data associated with an account */
export interface Attribute {
  /** The attribute name. */
  name: string;
  /** The attribute value. */
  value: Uint8Array;
  /** The attribute value type. */
  attributeType: AttributeType;
  /** The address the attribute is bound to */
  address: string;
  /** Time that an attribute will expire. */
  expirationDate?: Date | undefined;
}

/** EventAttributeAdd event emitted when attribute is added */
export interface EventAttributeAdd {
  name: string;
  value: string;
  type: string;
  account: string;
  owner: string;
  expiration: string;
}

/** EventAttributeUpdate event emitted when attribute is updated */
export interface EventAttributeUpdate {
  name: string;
  originalValue: string;
  originalType: string;
  updateValue: string;
  updateType: string;
  account: string;
  owner: string;
}

/** EventAttributeExpirationUpdate event emitted when attribute expiration is updated */
export interface EventAttributeExpirationUpdate {
  name: string;
  value: string;
  account: string;
  owner: string;
  originalExpiration: string;
  updatedExpiration: string;
}

/** EventAttributeDelete event emitted when attribute is deleted */
export interface EventAttributeDelete {
  name: string;
  account: string;
  owner: string;
}

/** EventAttributeDistinctDelete event emitted when attribute is deleted with matching value */
export interface EventAttributeDistinctDelete {
  name: string;
  value: string;
  attributeType: string;
  account: string;
  owner: string;
}

/** EventAttributeExpired event emitted when attribute has expired and been deleted in BeginBlocker */
export interface EventAttributeExpired {
  name: string;
  valueHash: string;
  attributeType: string;
  account: string;
  expiration: string;
}

/** EventAccountDataUpdated event emitted when accountdata is set, updated, or deleted. */
export interface EventAccountDataUpdated {
  account: string;
}

/** EventAttributeParamsUpdated event emitted when attribute params are updated. */
export interface EventAttributeParamsUpdated {
  maxValueLength: string;
}

function createBaseParams(): Params {
  return { maxValueLength: 0 };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxValueLength !== 0) {
      writer.uint32(8).uint32(message.maxValueLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxValueLength = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return { maxValueLength: isSet(object.maxValueLength) ? globalThis.Number(object.maxValueLength) : 0 };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.maxValueLength !== 0) {
      obj.maxValueLength = Math.round(message.maxValueLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.maxValueLength = object.maxValueLength ?? 0;
    return message;
  },
};

function createBaseAttribute(): Attribute {
  return { name: "", value: new Uint8Array(0), attributeType: 0, address: "", expirationDate: undefined };
}

export const Attribute: MessageFns<Attribute> = {
  encode(message: Attribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.attributeType !== 0) {
      writer.uint32(24).int32(message.attributeType);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attributeType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attribute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      attributeType: isSet(object.attributeType) ? attributeTypeFromJSON(object.attributeType) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
    };
  },

  toJSON(message: Attribute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.attributeType !== 0) {
      obj.attributeType = attributeTypeToJSON(message.attributeType);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attribute>, I>>(base?: I): Attribute {
    return Attribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attribute>, I>>(object: I): Attribute {
    const message = createBaseAttribute();
    message.name = object.name ?? "";
    message.value = object.value ?? new Uint8Array(0);
    message.attributeType = object.attributeType ?? 0;
    message.address = object.address ?? "";
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseEventAttributeAdd(): EventAttributeAdd {
  return { name: "", value: "", type: "", account: "", owner: "", expiration: "" };
}

export const EventAttributeAdd: MessageFns<EventAttributeAdd> = {
  encode(message: EventAttributeAdd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(42).string(message.owner);
    }
    if (message.expiration !== "") {
      writer.uint32(50).string(message.expiration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expiration = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeAdd {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      expiration: isSet(object.expiration) ? globalThis.String(object.expiration) : "",
    };
  },

  toJSON(message: EventAttributeAdd): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.expiration !== "") {
      obj.expiration = message.expiration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeAdd>, I>>(base?: I): EventAttributeAdd {
    return EventAttributeAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeAdd>, I>>(object: I): EventAttributeAdd {
    const message = createBaseEventAttributeAdd();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    message.type = object.type ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    message.expiration = object.expiration ?? "";
    return message;
  },
};

function createBaseEventAttributeUpdate(): EventAttributeUpdate {
  return { name: "", originalValue: "", originalType: "", updateValue: "", updateType: "", account: "", owner: "" };
}

export const EventAttributeUpdate: MessageFns<EventAttributeUpdate> = {
  encode(message: EventAttributeUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.originalValue !== "") {
      writer.uint32(18).string(message.originalValue);
    }
    if (message.originalType !== "") {
      writer.uint32(26).string(message.originalType);
    }
    if (message.updateValue !== "") {
      writer.uint32(34).string(message.updateValue);
    }
    if (message.updateType !== "") {
      writer.uint32(42).string(message.updateType);
    }
    if (message.account !== "") {
      writer.uint32(50).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(58).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.originalType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateValue = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updateType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeUpdate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      originalValue: isSet(object.originalValue) ? globalThis.String(object.originalValue) : "",
      originalType: isSet(object.originalType) ? globalThis.String(object.originalType) : "",
      updateValue: isSet(object.updateValue) ? globalThis.String(object.updateValue) : "",
      updateType: isSet(object.updateType) ? globalThis.String(object.updateType) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: EventAttributeUpdate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.originalValue !== "") {
      obj.originalValue = message.originalValue;
    }
    if (message.originalType !== "") {
      obj.originalType = message.originalType;
    }
    if (message.updateValue !== "") {
      obj.updateValue = message.updateValue;
    }
    if (message.updateType !== "") {
      obj.updateType = message.updateType;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeUpdate>, I>>(base?: I): EventAttributeUpdate {
    return EventAttributeUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeUpdate>, I>>(object: I): EventAttributeUpdate {
    const message = createBaseEventAttributeUpdate();
    message.name = object.name ?? "";
    message.originalValue = object.originalValue ?? "";
    message.originalType = object.originalType ?? "";
    message.updateValue = object.updateValue ?? "";
    message.updateType = object.updateType ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseEventAttributeExpirationUpdate(): EventAttributeExpirationUpdate {
  return { name: "", value: "", account: "", owner: "", originalExpiration: "", updatedExpiration: "" };
}

export const EventAttributeExpirationUpdate: MessageFns<EventAttributeExpirationUpdate> = {
  encode(message: EventAttributeExpirationUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(34).string(message.owner);
    }
    if (message.originalExpiration !== "") {
      writer.uint32(42).string(message.originalExpiration);
    }
    if (message.updatedExpiration !== "") {
      writer.uint32(50).string(message.updatedExpiration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeExpirationUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeExpirationUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originalExpiration = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedExpiration = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeExpirationUpdate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      originalExpiration: isSet(object.originalExpiration) ? globalThis.String(object.originalExpiration) : "",
      updatedExpiration: isSet(object.updatedExpiration) ? globalThis.String(object.updatedExpiration) : "",
    };
  },

  toJSON(message: EventAttributeExpirationUpdate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.originalExpiration !== "") {
      obj.originalExpiration = message.originalExpiration;
    }
    if (message.updatedExpiration !== "") {
      obj.updatedExpiration = message.updatedExpiration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeExpirationUpdate>, I>>(base?: I): EventAttributeExpirationUpdate {
    return EventAttributeExpirationUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeExpirationUpdate>, I>>(
    object: I,
  ): EventAttributeExpirationUpdate {
    const message = createBaseEventAttributeExpirationUpdate();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    message.originalExpiration = object.originalExpiration ?? "";
    message.updatedExpiration = object.updatedExpiration ?? "";
    return message;
  },
};

function createBaseEventAttributeDelete(): EventAttributeDelete {
  return { name: "", account: "", owner: "" };
}

export const EventAttributeDelete: MessageFns<EventAttributeDelete> = {
  encode(message: EventAttributeDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeDelete {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: EventAttributeDelete): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeDelete>, I>>(base?: I): EventAttributeDelete {
    return EventAttributeDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeDelete>, I>>(object: I): EventAttributeDelete {
    const message = createBaseEventAttributeDelete();
    message.name = object.name ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseEventAttributeDistinctDelete(): EventAttributeDistinctDelete {
  return { name: "", value: "", attributeType: "", account: "", owner: "" };
}

export const EventAttributeDistinctDelete: MessageFns<EventAttributeDistinctDelete> = {
  encode(message: EventAttributeDistinctDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.attributeType !== "") {
      writer.uint32(26).string(message.attributeType);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(42).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeDistinctDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeDistinctDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeDistinctDelete {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      attributeType: isSet(object.attributeType) ? globalThis.String(object.attributeType) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: EventAttributeDistinctDelete): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.attributeType !== "") {
      obj.attributeType = message.attributeType;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeDistinctDelete>, I>>(base?: I): EventAttributeDistinctDelete {
    return EventAttributeDistinctDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeDistinctDelete>, I>>(object: I): EventAttributeDistinctDelete {
    const message = createBaseEventAttributeDistinctDelete();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    message.attributeType = object.attributeType ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseEventAttributeExpired(): EventAttributeExpired {
  return { name: "", valueHash: "", attributeType: "", account: "", expiration: "" };
}

export const EventAttributeExpired: MessageFns<EventAttributeExpired> = {
  encode(message: EventAttributeExpired, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.valueHash !== "") {
      writer.uint32(18).string(message.valueHash);
    }
    if (message.attributeType !== "") {
      writer.uint32(26).string(message.attributeType);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    if (message.expiration !== "") {
      writer.uint32(42).string(message.expiration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeExpired {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeExpired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.valueHash = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expiration = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeExpired {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      valueHash: isSet(object.valueHash) ? globalThis.String(object.valueHash) : "",
      attributeType: isSet(object.attributeType) ? globalThis.String(object.attributeType) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      expiration: isSet(object.expiration) ? globalThis.String(object.expiration) : "",
    };
  },

  toJSON(message: EventAttributeExpired): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.valueHash !== "") {
      obj.valueHash = message.valueHash;
    }
    if (message.attributeType !== "") {
      obj.attributeType = message.attributeType;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.expiration !== "") {
      obj.expiration = message.expiration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeExpired>, I>>(base?: I): EventAttributeExpired {
    return EventAttributeExpired.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeExpired>, I>>(object: I): EventAttributeExpired {
    const message = createBaseEventAttributeExpired();
    message.name = object.name ?? "";
    message.valueHash = object.valueHash ?? "";
    message.attributeType = object.attributeType ?? "";
    message.account = object.account ?? "";
    message.expiration = object.expiration ?? "";
    return message;
  },
};

function createBaseEventAccountDataUpdated(): EventAccountDataUpdated {
  return { account: "" };
}

export const EventAccountDataUpdated: MessageFns<EventAccountDataUpdated> = {
  encode(message: EventAccountDataUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAccountDataUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAccountDataUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAccountDataUpdated {
    return { account: isSet(object.account) ? globalThis.String(object.account) : "" };
  },

  toJSON(message: EventAccountDataUpdated): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAccountDataUpdated>, I>>(base?: I): EventAccountDataUpdated {
    return EventAccountDataUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAccountDataUpdated>, I>>(object: I): EventAccountDataUpdated {
    const message = createBaseEventAccountDataUpdated();
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseEventAttributeParamsUpdated(): EventAttributeParamsUpdated {
  return { maxValueLength: "" };
}

export const EventAttributeParamsUpdated: MessageFns<EventAttributeParamsUpdated> = {
  encode(message: EventAttributeParamsUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxValueLength !== "") {
      writer.uint32(10).string(message.maxValueLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttributeParamsUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttributeParamsUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maxValueLength = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttributeParamsUpdated {
    return { maxValueLength: isSet(object.maxValueLength) ? globalThis.String(object.maxValueLength) : "" };
  },

  toJSON(message: EventAttributeParamsUpdated): unknown {
    const obj: any = {};
    if (message.maxValueLength !== "") {
      obj.maxValueLength = message.maxValueLength;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttributeParamsUpdated>, I>>(base?: I): EventAttributeParamsUpdated {
    return EventAttributeParamsUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttributeParamsUpdated>, I>>(object: I): EventAttributeParamsUpdated {
    const message = createBaseEventAttributeParamsUpdated();
    message.maxValueLength = object.maxValueLength ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
