// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/attribute/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Attribute, Params } from "./attribute";

export const protobufPackage = "provenance.attribute.v1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params?: Params | undefined;
}

/** QueryAttributeRequest is the request type for the Query/Attribute method. */
export interface QueryAttributeRequest {
  /** account defines the address to query for. */
  account: string;
  /** name is the attribute name to query for */
  name: string;
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryAttributeResponse is the response type for the Query/Attribute method. */
export interface QueryAttributeResponse {
  /** a string containing the address of the account the attributes are assigned to. */
  account: string;
  /** a list of attribute values */
  attributes: Attribute[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

/** QueryAttributesRequest is the request type for the Query/Attributes method. */
export interface QueryAttributesRequest {
  /** account defines the address to query for. */
  account: string;
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryAttributesResponse is the response type for the Query/Attributes method. */
export interface QueryAttributesResponse {
  /** a string containing the address of the account the attributes are assigned to= */
  account: string;
  /** a list of attribute values */
  attributes: Attribute[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

/** QueryScanRequest is the request type for the Query/Scan method. */
export interface QueryScanRequest {
  /** account defines the address to query for. */
  account: string;
  /** name defines the partial attribute name to search for base on names being in RDNS format. */
  suffix: string;
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryScanResponse is the response type for the Query/Scan method. */
export interface QueryScanResponse {
  /** a string containing the address of the account the attributes are assigned to= */
  account: string;
  /** a list of attribute values */
  attributes: Attribute[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

/** QueryAttributeAccountsRequest is the request type for the Query/AttributeAccounts method. */
export interface QueryAttributeAccountsRequest {
  /** name is the attribute name to query for */
  attributeName: string;
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryAttributeAccountsResponse is the response type for the Query/AttributeAccounts method. */
export interface QueryAttributeAccountsResponse {
  /** list of account addresses that have attributes of request name */
  accounts: string[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

/** QueryAccountDataRequest is the request type for the Query/AccountData method. */
export interface QueryAccountDataRequest {
  /** account is the bech32 address of the account to get the data for */
  account: string;
}

/** QueryAccountDataResponse is the response type for the Query/AccountData method. */
export interface QueryAccountDataResponse {
  /** value is the accountdata attribute value for the requested account. */
  value: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributeRequest(): QueryAttributeRequest {
  return { account: "", name: "", pagination: undefined };
}

export const QueryAttributeRequest: MessageFns<QueryAttributeRequest> = {
  encode(message: QueryAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributeRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributeRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributeRequest>, I>>(base?: I): QueryAttributeRequest {
    return QueryAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributeRequest>, I>>(object: I): QueryAttributeRequest {
    const message = createBaseQueryAttributeRequest();
    message.account = object.account ?? "";
    message.name = object.name ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributeResponse(): QueryAttributeResponse {
  return { account: "", attributes: [], pagination: undefined };
}

export const QueryAttributeResponse: MessageFns<QueryAttributeResponse> = {
  encode(message: QueryAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributeResponse {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributeResponse): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributeResponse>, I>>(base?: I): QueryAttributeResponse {
    return QueryAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributeResponse>, I>>(object: I): QueryAttributeResponse {
    const message = createBaseQueryAttributeResponse();
    message.account = object.account ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributesRequest(): QueryAttributesRequest {
  return { account: "", pagination: undefined };
}

export const QueryAttributesRequest: MessageFns<QueryAttributesRequest> = {
  encode(message: QueryAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributesRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributesRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributesRequest>, I>>(base?: I): QueryAttributesRequest {
    return QueryAttributesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributesRequest>, I>>(object: I): QueryAttributesRequest {
    const message = createBaseQueryAttributesRequest();
    message.account = object.account ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributesResponse(): QueryAttributesResponse {
  return { account: "", attributes: [], pagination: undefined };
}

export const QueryAttributesResponse: MessageFns<QueryAttributesResponse> = {
  encode(message: QueryAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributesResponse {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributesResponse): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributesResponse>, I>>(base?: I): QueryAttributesResponse {
    return QueryAttributesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributesResponse>, I>>(object: I): QueryAttributesResponse {
    const message = createBaseQueryAttributesResponse();
    message.account = object.account ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryScanRequest(): QueryScanRequest {
  return { account: "", suffix: "", pagination: undefined };
}

export const QueryScanRequest: MessageFns<QueryScanRequest> = {
  encode(message: QueryScanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.suffix !== "") {
      writer.uint32(18).string(message.suffix);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryScanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryScanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suffix = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryScanRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      suffix: isSet(object.suffix) ? globalThis.String(object.suffix) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryScanRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.suffix !== "") {
      obj.suffix = message.suffix;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryScanRequest>, I>>(base?: I): QueryScanRequest {
    return QueryScanRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryScanRequest>, I>>(object: I): QueryScanRequest {
    const message = createBaseQueryScanRequest();
    message.account = object.account ?? "";
    message.suffix = object.suffix ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryScanResponse(): QueryScanResponse {
  return { account: "", attributes: [], pagination: undefined };
}

export const QueryScanResponse: MessageFns<QueryScanResponse> = {
  encode(message: QueryScanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryScanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryScanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryScanResponse {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryScanResponse): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryScanResponse>, I>>(base?: I): QueryScanResponse {
    return QueryScanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryScanResponse>, I>>(object: I): QueryScanResponse {
    const message = createBaseQueryScanResponse();
    message.account = object.account ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributeAccountsRequest(): QueryAttributeAccountsRequest {
  return { attributeName: "", pagination: undefined };
}

export const QueryAttributeAccountsRequest: MessageFns<QueryAttributeAccountsRequest> = {
  encode(message: QueryAttributeAccountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeName !== "") {
      writer.uint32(10).string(message.attributeName);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributeAccountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributeAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeName = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributeAccountsRequest {
    return {
      attributeName: isSet(object.attributeName) ? globalThis.String(object.attributeName) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributeAccountsRequest): unknown {
    const obj: any = {};
    if (message.attributeName !== "") {
      obj.attributeName = message.attributeName;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributeAccountsRequest>, I>>(base?: I): QueryAttributeAccountsRequest {
    return QueryAttributeAccountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributeAccountsRequest>, I>>(
    object: I,
  ): QueryAttributeAccountsRequest {
    const message = createBaseQueryAttributeAccountsRequest();
    message.attributeName = object.attributeName ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAttributeAccountsResponse(): QueryAttributeAccountsResponse {
  return { accounts: [], pagination: undefined };
}

export const QueryAttributeAccountsResponse: MessageFns<QueryAttributeAccountsResponse> = {
  encode(message: QueryAttributeAccountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      writer.uint32(10).string(v!);
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAttributeAccountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAttributeAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accounts.push(reader.string());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAttributeAccountsResponse {
    return {
      accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e: any) => globalThis.String(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAttributeAccountsResponse): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAttributeAccountsResponse>, I>>(base?: I): QueryAttributeAccountsResponse {
    return QueryAttributeAccountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAttributeAccountsResponse>, I>>(
    object: I,
  ): QueryAttributeAccountsResponse {
    const message = createBaseQueryAttributeAccountsResponse();
    message.accounts = object.accounts?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAccountDataRequest(): QueryAccountDataRequest {
  return { account: "" };
}

export const QueryAccountDataRequest: MessageFns<QueryAccountDataRequest> = {
  encode(message: QueryAccountDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountDataRequest {
    return { account: isSet(object.account) ? globalThis.String(object.account) : "" };
  },

  toJSON(message: QueryAccountDataRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountDataRequest>, I>>(base?: I): QueryAccountDataRequest {
    return QueryAccountDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountDataRequest>, I>>(object: I): QueryAccountDataRequest {
    const message = createBaseQueryAccountDataRequest();
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseQueryAccountDataResponse(): QueryAccountDataResponse {
  return { value: "" };
}

export const QueryAccountDataResponse: MessageFns<QueryAccountDataResponse> = {
  encode(message: QueryAccountDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountDataResponse {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: QueryAccountDataResponse): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountDataResponse>, I>>(base?: I): QueryAccountDataResponse {
    return QueryAccountDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountDataResponse>, I>>(object: I): QueryAccountDataResponse {
    const message = createBaseQueryAccountDataResponse();
    message.value = object.value ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service for attribute module. */
export interface Query {
  /** Params queries params of the attribute module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Attribute queries attributes on a given account (address) for one (or more) with the given name */
  Attribute(request: QueryAttributeRequest): Promise<QueryAttributeResponse>;
  /** Attributes queries attributes on a given account (address) for any defined attributes */
  Attributes(request: QueryAttributesRequest): Promise<QueryAttributesResponse>;
  /** Scan queries attributes on a given account (address) for any that match the provided suffix */
  Scan(request: QueryScanRequest): Promise<QueryScanResponse>;
  /** AttributeAccounts queries accounts on a given attribute name */
  AttributeAccounts(request: QueryAttributeAccountsRequest): Promise<QueryAttributeAccountsResponse>;
  /** AccountData returns the accountdata for a specified account. */
  AccountData(request: QueryAccountDataRequest): Promise<QueryAccountDataResponse>;
}

export const QueryServiceName = "provenance.attribute.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Attribute = this.Attribute.bind(this);
    this.Attributes = this.Attributes.bind(this);
    this.Scan = this.Scan.bind(this);
    this.AttributeAccounts = this.AttributeAccounts.bind(this);
    this.AccountData = this.AccountData.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Attribute(request: QueryAttributeRequest): Promise<QueryAttributeResponse> {
    const data = QueryAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Attribute", data);
    return promise.then((data) => QueryAttributeResponse.decode(new BinaryReader(data)));
  }

  Attributes(request: QueryAttributesRequest): Promise<QueryAttributesResponse> {
    const data = QueryAttributesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Attributes", data);
    return promise.then((data) => QueryAttributesResponse.decode(new BinaryReader(data)));
  }

  Scan(request: QueryScanRequest): Promise<QueryScanResponse> {
    const data = QueryScanRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Scan", data);
    return promise.then((data) => QueryScanResponse.decode(new BinaryReader(data)));
  }

  AttributeAccounts(request: QueryAttributeAccountsRequest): Promise<QueryAttributeAccountsResponse> {
    const data = QueryAttributeAccountsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AttributeAccounts", data);
    return promise.then((data) => QueryAttributeAccountsResponse.decode(new BinaryReader(data)));
  }

  AccountData(request: QueryAccountDataRequest): Promise<QueryAccountDataResponse> {
    const data = QueryAccountDataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AccountData", data);
    return promise.then((data) => QueryAccountDataResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
