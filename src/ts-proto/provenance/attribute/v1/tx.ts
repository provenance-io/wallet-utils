// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/attribute/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { AttributeType, attributeTypeFromJSON, attributeTypeToJSON, Params } from "./attribute";

export const protobufPackage = "provenance.attribute.v1";

/**
 * MsgAddAttributeRequest defines an sdk.Msg type that is used to add a new attribute to an account.
 * Attributes may only be set in an account by the account that the attribute name resolves to.
 */
export interface MsgAddAttributeRequest {
  /** The attribute name. */
  name: string;
  /** The attribute value. */
  value: Uint8Array;
  /** The attribute value type. */
  attributeType: AttributeType;
  /** The account to add the attribute to. */
  account: string;
  /** The address that the name must resolve to. */
  owner: string;
  /** Time that an attribute will expire. */
  expirationDate?: Date | undefined;
}

/** MsgAddAttributeResponse defines the Msg/AddAttribute response type. */
export interface MsgAddAttributeResponse {
}

/**
 * MsgUpdateAttributeRequest defines an sdk.Msg type that is used to update an existing attribute to an account.
 * Attributes may only be set in an account by the account that the attribute name resolves to.
 */
export interface MsgUpdateAttributeRequest {
  /** The attribute name. */
  name: string;
  /** The original attribute value. */
  originalValue: Uint8Array;
  /** The update attribute value. */
  updateValue: Uint8Array;
  /** The original attribute value type. */
  originalAttributeType: AttributeType;
  /** The update attribute value type. */
  updateAttributeType: AttributeType;
  /** The account to add the attribute to. */
  account: string;
  /** The address that the name must resolve to. */
  owner: string;
}

/** MsgUpdateAttributeResponse defines the Msg/UpdateAttribute response type. */
export interface MsgUpdateAttributeResponse {
}

/**
 * MsgUpdateAttributeExpirationRequest defines an sdk.Msg type that is used to update an existing attribute's expiration
 * date
 */
export interface MsgUpdateAttributeExpirationRequest {
  /** The attribute name. */
  name: string;
  /** The original attribute value. */
  value: Uint8Array;
  /** Time that an attribute will expire. */
  expirationDate?:
    | Date
    | undefined;
  /** The account to add the attribute to. */
  account: string;
  /** The address that the name must resolve to. */
  owner: string;
}

/** MsgUpdateAttributeExpirationResponse defines the Msg/Vote response type. */
export interface MsgUpdateAttributeExpirationResponse {
}

/**
 * MsgDeleteAttributeRequest defines a message to delete an attribute from an account
 * Attributes may only be removed from an account by the account that the attribute name resolves to.
 */
export interface MsgDeleteAttributeRequest {
  /** The attribute name. */
  name: string;
  /** The account to add the attribute to. */
  account: string;
  /** The address that the name must resolve to. */
  owner: string;
}

/** MsgDeleteAttributeResponse defines the Msg/DeleteAttribute response type. */
export interface MsgDeleteAttributeResponse {
}

/**
 * MsgDeleteDistinctAttributeRequest defines a message to delete an attribute with matching name, value, and type from
 * an account. Attributes may only be removed from an account by the account that the attribute name resolves to.
 */
export interface MsgDeleteDistinctAttributeRequest {
  /** The attribute name. */
  name: string;
  /** The attribute value. */
  value: Uint8Array;
  /** The account to add the attribute to. */
  account: string;
  /** The address that the name must resolve to. */
  owner: string;
}

/** MsgDeleteDistinctAttributeResponse defines the Msg/DeleteDistinctAttribute response type. */
export interface MsgDeleteDistinctAttributeResponse {
}

/** MsgSetAccountDataRequest defines a message to set an account's accountdata attribute. */
export interface MsgSetAccountDataRequest {
  value: string;
  account: string;
}

/** MsgSetAccountDataResponse defines the Msg/SetAccountData response type. */
export interface MsgSetAccountDataResponse {
}

/** MsgUpdateParamsRequest is a request message for the UpdateParams endpoint. */
export interface MsgUpdateParamsRequest {
  /** authority should be the governance module account address. */
  authority: string;
  /** params are the new param values to set. */
  params?: Params | undefined;
}

/** MsgUpdateParamsResponse is a response message for the UpdateParams endpoint. */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgAddAttributeRequest(): MsgAddAttributeRequest {
  return { name: "", value: new Uint8Array(0), attributeType: 0, account: "", owner: "", expirationDate: undefined };
}

export const MsgAddAttributeRequest: MessageFns<MsgAddAttributeRequest> = {
  encode(message: MsgAddAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.attributeType !== 0) {
      writer.uint32(24).int32(message.attributeType);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(42).string(message.owner);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attributeType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddAttributeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      attributeType: isSet(object.attributeType) ? attributeTypeFromJSON(object.attributeType) : 0,
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
    };
  },

  toJSON(message: MsgAddAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.attributeType !== 0) {
      obj.attributeType = attributeTypeToJSON(message.attributeType);
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddAttributeRequest>, I>>(base?: I): MsgAddAttributeRequest {
    return MsgAddAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddAttributeRequest>, I>>(object: I): MsgAddAttributeRequest {
    const message = createBaseMsgAddAttributeRequest();
    message.name = object.name ?? "";
    message.value = object.value ?? new Uint8Array(0);
    message.attributeType = object.attributeType ?? 0;
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseMsgAddAttributeResponse(): MsgAddAttributeResponse {
  return {};
}

export const MsgAddAttributeResponse: MessageFns<MsgAddAttributeResponse> = {
  encode(_: MsgAddAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddAttributeResponse {
    return {};
  },

  toJSON(_: MsgAddAttributeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddAttributeResponse>, I>>(base?: I): MsgAddAttributeResponse {
    return MsgAddAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddAttributeResponse>, I>>(_: I): MsgAddAttributeResponse {
    const message = createBaseMsgAddAttributeResponse();
    return message;
  },
};

function createBaseMsgUpdateAttributeRequest(): MsgUpdateAttributeRequest {
  return {
    name: "",
    originalValue: new Uint8Array(0),
    updateValue: new Uint8Array(0),
    originalAttributeType: 0,
    updateAttributeType: 0,
    account: "",
    owner: "",
  };
}

export const MsgUpdateAttributeRequest: MessageFns<MsgUpdateAttributeRequest> = {
  encode(message: MsgUpdateAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.originalValue.length !== 0) {
      writer.uint32(18).bytes(message.originalValue);
    }
    if (message.updateValue.length !== 0) {
      writer.uint32(26).bytes(message.updateValue);
    }
    if (message.originalAttributeType !== 0) {
      writer.uint32(32).int32(message.originalAttributeType);
    }
    if (message.updateAttributeType !== 0) {
      writer.uint32(40).int32(message.updateAttributeType);
    }
    if (message.account !== "") {
      writer.uint32(50).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(58).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalValue = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateValue = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.originalAttributeType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.updateAttributeType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateAttributeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      originalValue: isSet(object.originalValue) ? bytesFromBase64(object.originalValue) : new Uint8Array(0),
      updateValue: isSet(object.updateValue) ? bytesFromBase64(object.updateValue) : new Uint8Array(0),
      originalAttributeType: isSet(object.originalAttributeType)
        ? attributeTypeFromJSON(object.originalAttributeType)
        : 0,
      updateAttributeType: isSet(object.updateAttributeType) ? attributeTypeFromJSON(object.updateAttributeType) : 0,
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: MsgUpdateAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.originalValue.length !== 0) {
      obj.originalValue = base64FromBytes(message.originalValue);
    }
    if (message.updateValue.length !== 0) {
      obj.updateValue = base64FromBytes(message.updateValue);
    }
    if (message.originalAttributeType !== 0) {
      obj.originalAttributeType = attributeTypeToJSON(message.originalAttributeType);
    }
    if (message.updateAttributeType !== 0) {
      obj.updateAttributeType = attributeTypeToJSON(message.updateAttributeType);
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAttributeRequest>, I>>(base?: I): MsgUpdateAttributeRequest {
    return MsgUpdateAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAttributeRequest>, I>>(object: I): MsgUpdateAttributeRequest {
    const message = createBaseMsgUpdateAttributeRequest();
    message.name = object.name ?? "";
    message.originalValue = object.originalValue ?? new Uint8Array(0);
    message.updateValue = object.updateValue ?? new Uint8Array(0);
    message.originalAttributeType = object.originalAttributeType ?? 0;
    message.updateAttributeType = object.updateAttributeType ?? 0;
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgUpdateAttributeResponse(): MsgUpdateAttributeResponse {
  return {};
}

export const MsgUpdateAttributeResponse: MessageFns<MsgUpdateAttributeResponse> = {
  encode(_: MsgUpdateAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateAttributeResponse {
    return {};
  },

  toJSON(_: MsgUpdateAttributeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAttributeResponse>, I>>(base?: I): MsgUpdateAttributeResponse {
    return MsgUpdateAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAttributeResponse>, I>>(_: I): MsgUpdateAttributeResponse {
    const message = createBaseMsgUpdateAttributeResponse();
    return message;
  },
};

function createBaseMsgUpdateAttributeExpirationRequest(): MsgUpdateAttributeExpirationRequest {
  return { name: "", value: new Uint8Array(0), expirationDate: undefined, account: "", owner: "" };
}

export const MsgUpdateAttributeExpirationRequest: MessageFns<MsgUpdateAttributeExpirationRequest> = {
  encode(message: MsgUpdateAttributeExpirationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(26).fork()).join();
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(42).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateAttributeExpirationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAttributeExpirationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateAttributeExpirationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: MsgUpdateAttributeExpirationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAttributeExpirationRequest>, I>>(
    base?: I,
  ): MsgUpdateAttributeExpirationRequest {
    return MsgUpdateAttributeExpirationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAttributeExpirationRequest>, I>>(
    object: I,
  ): MsgUpdateAttributeExpirationRequest {
    const message = createBaseMsgUpdateAttributeExpirationRequest();
    message.name = object.name ?? "";
    message.value = object.value ?? new Uint8Array(0);
    message.expirationDate = object.expirationDate ?? undefined;
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgUpdateAttributeExpirationResponse(): MsgUpdateAttributeExpirationResponse {
  return {};
}

export const MsgUpdateAttributeExpirationResponse: MessageFns<MsgUpdateAttributeExpirationResponse> = {
  encode(_: MsgUpdateAttributeExpirationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateAttributeExpirationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateAttributeExpirationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateAttributeExpirationResponse {
    return {};
  },

  toJSON(_: MsgUpdateAttributeExpirationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateAttributeExpirationResponse>, I>>(
    base?: I,
  ): MsgUpdateAttributeExpirationResponse {
    return MsgUpdateAttributeExpirationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateAttributeExpirationResponse>, I>>(
    _: I,
  ): MsgUpdateAttributeExpirationResponse {
    const message = createBaseMsgUpdateAttributeExpirationResponse();
    return message;
  },
};

function createBaseMsgDeleteAttributeRequest(): MsgDeleteAttributeRequest {
  return { name: "", account: "", owner: "" };
}

export const MsgDeleteAttributeRequest: MessageFns<MsgDeleteAttributeRequest> = {
  encode(message: MsgDeleteAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteAttributeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: MsgDeleteAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAttributeRequest>, I>>(base?: I): MsgDeleteAttributeRequest {
    return MsgDeleteAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAttributeRequest>, I>>(object: I): MsgDeleteAttributeRequest {
    const message = createBaseMsgDeleteAttributeRequest();
    message.name = object.name ?? "";
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgDeleteAttributeResponse(): MsgDeleteAttributeResponse {
  return {};
}

export const MsgDeleteAttributeResponse: MessageFns<MsgDeleteAttributeResponse> = {
  encode(_: MsgDeleteAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteAttributeResponse {
    return {};
  },

  toJSON(_: MsgDeleteAttributeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteAttributeResponse>, I>>(base?: I): MsgDeleteAttributeResponse {
    return MsgDeleteAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteAttributeResponse>, I>>(_: I): MsgDeleteAttributeResponse {
    const message = createBaseMsgDeleteAttributeResponse();
    return message;
  },
};

function createBaseMsgDeleteDistinctAttributeRequest(): MsgDeleteDistinctAttributeRequest {
  return { name: "", value: new Uint8Array(0), account: "", owner: "" };
}

export const MsgDeleteDistinctAttributeRequest: MessageFns<MsgDeleteDistinctAttributeRequest> = {
  encode(message: MsgDeleteDistinctAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    if (message.owner !== "") {
      writer.uint32(34).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteDistinctAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteDistinctAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteDistinctAttributeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: MsgDeleteDistinctAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteDistinctAttributeRequest>, I>>(
    base?: I,
  ): MsgDeleteDistinctAttributeRequest {
    return MsgDeleteDistinctAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteDistinctAttributeRequest>, I>>(
    object: I,
  ): MsgDeleteDistinctAttributeRequest {
    const message = createBaseMsgDeleteDistinctAttributeRequest();
    message.name = object.name ?? "";
    message.value = object.value ?? new Uint8Array(0);
    message.account = object.account ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgDeleteDistinctAttributeResponse(): MsgDeleteDistinctAttributeResponse {
  return {};
}

export const MsgDeleteDistinctAttributeResponse: MessageFns<MsgDeleteDistinctAttributeResponse> = {
  encode(_: MsgDeleteDistinctAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteDistinctAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteDistinctAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteDistinctAttributeResponse {
    return {};
  },

  toJSON(_: MsgDeleteDistinctAttributeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeleteDistinctAttributeResponse>, I>>(
    base?: I,
  ): MsgDeleteDistinctAttributeResponse {
    return MsgDeleteDistinctAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeleteDistinctAttributeResponse>, I>>(
    _: I,
  ): MsgDeleteDistinctAttributeResponse {
    const message = createBaseMsgDeleteDistinctAttributeResponse();
    return message;
  },
};

function createBaseMsgSetAccountDataRequest(): MsgSetAccountDataRequest {
  return { value: "", account: "" };
}

export const MsgSetAccountDataRequest: MessageFns<MsgSetAccountDataRequest> = {
  encode(message: MsgSetAccountDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetAccountDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetAccountDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetAccountDataRequest {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgSetAccountDataRequest): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetAccountDataRequest>, I>>(base?: I): MsgSetAccountDataRequest {
    return MsgSetAccountDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetAccountDataRequest>, I>>(object: I): MsgSetAccountDataRequest {
    const message = createBaseMsgSetAccountDataRequest();
    message.value = object.value ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgSetAccountDataResponse(): MsgSetAccountDataResponse {
  return {};
}

export const MsgSetAccountDataResponse: MessageFns<MsgSetAccountDataResponse> = {
  encode(_: MsgSetAccountDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetAccountDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetAccountDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetAccountDataResponse {
    return {};
  },

  toJSON(_: MsgSetAccountDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetAccountDataResponse>, I>>(base?: I): MsgSetAccountDataResponse {
    return MsgSetAccountDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetAccountDataResponse>, I>>(_: I): MsgSetAccountDataResponse {
    const message = createBaseMsgSetAccountDataResponse();
    return message;
  },
};

function createBaseMsgUpdateParamsRequest(): MsgUpdateParamsRequest {
  return { authority: "", params: undefined };
}

export const MsgUpdateParamsRequest: MessageFns<MsgUpdateParamsRequest> = {
  encode(message: MsgUpdateParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParamsRequest {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParamsRequest): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsRequest>, I>>(base?: I): MsgUpdateParamsRequest {
    return MsgUpdateParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsRequest>, I>>(object: I): MsgUpdateParamsRequest {
    const message = createBaseMsgUpdateParamsRequest();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the attribute module Msg service. */
export interface Msg {
  /** AddAttribute defines a method to verify a particular invariance. */
  AddAttribute(request: MsgAddAttributeRequest): Promise<MsgAddAttributeResponse>;
  /** UpdateAttribute defines a method to verify a particular invariance. */
  UpdateAttribute(request: MsgUpdateAttributeRequest): Promise<MsgUpdateAttributeResponse>;
  /** UpdateAttributeExpiration defines a method to verify a particular invariance. */
  UpdateAttributeExpiration(
    request: MsgUpdateAttributeExpirationRequest,
  ): Promise<MsgUpdateAttributeExpirationResponse>;
  /** DeleteAttribute defines a method to verify a particular invariance. */
  DeleteAttribute(request: MsgDeleteAttributeRequest): Promise<MsgDeleteAttributeResponse>;
  /** DeleteDistinctAttribute defines a method to verify a particular invariance. */
  DeleteDistinctAttribute(request: MsgDeleteDistinctAttributeRequest): Promise<MsgDeleteDistinctAttributeResponse>;
  /** SetAccountData defines a method for setting/updating an account's accountdata attribute. */
  SetAccountData(request: MsgSetAccountDataRequest): Promise<MsgSetAccountDataResponse>;
  /** UpdateParams is a governance proposal endpoint for updating the attribute module's params. */
  UpdateParams(request: MsgUpdateParamsRequest): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "provenance.attribute.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.AddAttribute = this.AddAttribute.bind(this);
    this.UpdateAttribute = this.UpdateAttribute.bind(this);
    this.UpdateAttributeExpiration = this.UpdateAttributeExpiration.bind(this);
    this.DeleteAttribute = this.DeleteAttribute.bind(this);
    this.DeleteDistinctAttribute = this.DeleteDistinctAttribute.bind(this);
    this.SetAccountData = this.SetAccountData.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  AddAttribute(request: MsgAddAttributeRequest): Promise<MsgAddAttributeResponse> {
    const data = MsgAddAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddAttribute", data);
    return promise.then((data) => MsgAddAttributeResponse.decode(new BinaryReader(data)));
  }

  UpdateAttribute(request: MsgUpdateAttributeRequest): Promise<MsgUpdateAttributeResponse> {
    const data = MsgUpdateAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateAttribute", data);
    return promise.then((data) => MsgUpdateAttributeResponse.decode(new BinaryReader(data)));
  }

  UpdateAttributeExpiration(
    request: MsgUpdateAttributeExpirationRequest,
  ): Promise<MsgUpdateAttributeExpirationResponse> {
    const data = MsgUpdateAttributeExpirationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateAttributeExpiration", data);
    return promise.then((data) => MsgUpdateAttributeExpirationResponse.decode(new BinaryReader(data)));
  }

  DeleteAttribute(request: MsgDeleteAttributeRequest): Promise<MsgDeleteAttributeResponse> {
    const data = MsgDeleteAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteAttribute", data);
    return promise.then((data) => MsgDeleteAttributeResponse.decode(new BinaryReader(data)));
  }

  DeleteDistinctAttribute(request: MsgDeleteDistinctAttributeRequest): Promise<MsgDeleteDistinctAttributeResponse> {
    const data = MsgDeleteDistinctAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteDistinctAttribute", data);
    return promise.then((data) => MsgDeleteDistinctAttributeResponse.decode(new BinaryReader(data)));
  }

  SetAccountData(request: MsgSetAccountDataRequest): Promise<MsgSetAccountDataResponse> {
    const data = MsgSetAccountDataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetAccountData", data);
    return promise.then((data) => MsgSetAccountDataResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParamsRequest): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
