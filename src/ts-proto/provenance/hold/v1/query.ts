// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/hold/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { AccountHold } from "./hold";

export const protobufPackage = "provenance.hold.v1";

/** GetHoldsRequest is the request type for the Query/GetHolds query. */
export interface GetHoldsRequest {
  /** address is the account address to get on-hold balances for. */
  address: string;
}

/** GetHoldsResponse is the response type for the Query/GetHolds query. */
export interface GetHoldsResponse {
  /** amount is the total on hold for the requested address. */
  amount: Coin[];
}

/** GetAllHoldsRequest is the request type for the Query/GetAllHolds query. */
export interface GetAllHoldsRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** GetAllHoldsResponse is the response type for the Query/GetAllHolds query. */
export interface GetAllHoldsResponse {
  /** holds is a list of addresses with funds on hold and the amounts being held. */
  holds: AccountHold[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

function createBaseGetHoldsRequest(): GetHoldsRequest {
  return { address: "" };
}

export const GetHoldsRequest: MessageFns<GetHoldsRequest> = {
  encode(message: GetHoldsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHoldsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHoldsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHoldsRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: GetHoldsRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHoldsRequest>, I>>(base?: I): GetHoldsRequest {
    return GetHoldsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHoldsRequest>, I>>(object: I): GetHoldsRequest {
    const message = createBaseGetHoldsRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseGetHoldsResponse(): GetHoldsResponse {
  return { amount: [] };
}

export const GetHoldsResponse: MessageFns<GetHoldsResponse> = {
  encode(message: GetHoldsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHoldsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHoldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHoldsResponse {
    return { amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: GetHoldsResponse): unknown {
    const obj: any = {};
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHoldsResponse>, I>>(base?: I): GetHoldsResponse {
    return GetHoldsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHoldsResponse>, I>>(object: I): GetHoldsResponse {
    const message = createBaseGetHoldsResponse();
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllHoldsRequest(): GetAllHoldsRequest {
  return { pagination: undefined };
}

export const GetAllHoldsRequest: MessageFns<GetAllHoldsRequest> = {
  encode(message: GetAllHoldsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllHoldsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllHoldsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllHoldsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: GetAllHoldsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllHoldsRequest>, I>>(base?: I): GetAllHoldsRequest {
    return GetAllHoldsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllHoldsRequest>, I>>(object: I): GetAllHoldsRequest {
    const message = createBaseGetAllHoldsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetAllHoldsResponse(): GetAllHoldsResponse {
  return { holds: [], pagination: undefined };
}

export const GetAllHoldsResponse: MessageFns<GetAllHoldsResponse> = {
  encode(message: GetAllHoldsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.holds) {
      AccountHold.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllHoldsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllHoldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.holds.push(AccountHold.decode(reader, reader.uint32()));
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllHoldsResponse {
    return {
      holds: globalThis.Array.isArray(object?.holds) ? object.holds.map((e: any) => AccountHold.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetAllHoldsResponse): unknown {
    const obj: any = {};
    if (message.holds?.length) {
      obj.holds = message.holds.map((e) => AccountHold.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllHoldsResponse>, I>>(base?: I): GetAllHoldsResponse {
    return GetAllHoldsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllHoldsResponse>, I>>(object: I): GetAllHoldsResponse {
    const message = createBaseGetAllHoldsResponse();
    message.holds = object.holds?.map((e) => AccountHold.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service for attribute module. */
export interface Query {
  /** GetHolds looks up the funds that are on hold for an address. */
  GetHolds(request: GetHoldsRequest): Promise<GetHoldsResponse>;
  /** GetAllHolds returns all addresses with funds on hold, and the amount held. */
  GetAllHolds(request: GetAllHoldsRequest): Promise<GetAllHoldsResponse>;
}

export const QueryServiceName = "provenance.hold.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.GetHolds = this.GetHolds.bind(this);
    this.GetAllHolds = this.GetAllHolds.bind(this);
  }
  GetHolds(request: GetHoldsRequest): Promise<GetHoldsResponse> {
    const data = GetHoldsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetHolds", data);
    return promise.then((data) => GetHoldsResponse.decode(new BinaryReader(data)));
  }

  GetAllHolds(request: GetAllHoldsRequest): Promise<GetAllHoldsResponse> {
    const data = GetAllHoldsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAllHolds", data);
    return promise.then((data) => GetAllHoldsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
