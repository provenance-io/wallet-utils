// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/exchange/v1/payments.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "provenance.exchange.v1";

/** Payment represents one account's desire to trade funds with another account. */
export interface Payment {
  /** source is the account that created this Payment. It is considered the owner of the payment. */
  source: string;
  /**
   * source_amount is the funds that the source is will pay the target in exchange for the target_amount.
   * A hold will be placed on this amount in the source account until this Payment is accepted, rejected or cancelled.
   * If the source_amount is zero, this Payment can be considered a "payment request."
   */
  sourceAmount: Coin[];
  /**
   * target is the account that can accept this Payment.
   * The target is the only thing allowed to change in a payment.
   * I.e. it can be empty initially and updated later as needed.
   */
  target: string;
  /**
   * target_amount is the funds that the target will pay the source in exchange for the source_amount.
   * If the target_amount is zero, this Payment can be considered a "peer-to-peer (P2P) payment."
   */
  targetAmount: Coin[];
  /**
   * external_id is used along with the source to uniquely identify this Payment.
   *
   * A source can only have one Payment with any given external id.
   * A source can have two payments with two different external ids.
   * Two different sources can each have a payment with the same external id.
   * But a source cannot have two different payments each with the same external id.
   *
   * An external id can be reused by a source once the payment is accepted, rejected, or cancelled.
   *
   * The external id is limited to 100 bytes. An empty string is a valid external id.
   */
  externalId: string;
}

function createBasePayment(): Payment {
  return { source: "", sourceAmount: [], target: "", targetAmount: [], externalId: "" };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    for (const v of message.sourceAmount) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    for (const v of message.targetAmount) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.externalId !== "") {
      writer.uint32(42).string(message.externalId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceAmount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetAmount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      sourceAmount: globalThis.Array.isArray(object?.sourceAmount)
        ? object.sourceAmount.map((e: any) => Coin.fromJSON(e))
        : [],
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      targetAmount: globalThis.Array.isArray(object?.targetAmount)
        ? object.targetAmount.map((e: any) => Coin.fromJSON(e))
        : [],
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.sourceAmount?.length) {
      obj.sourceAmount = message.sourceAmount.map((e) => Coin.toJSON(e));
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.targetAmount?.length) {
      obj.targetAmount = message.targetAmount.map((e) => Coin.toJSON(e));
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.source = object.source ?? "";
    message.sourceAmount = object.sourceAmount?.map((e) => Coin.fromPartial(e)) || [];
    message.target = object.target ?? "";
    message.targetAmount = object.targetAmount?.map((e) => Coin.fromPartial(e)) || [];
    message.externalId = object.externalId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
