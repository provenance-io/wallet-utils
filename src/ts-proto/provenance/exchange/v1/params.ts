// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/exchange/v1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "provenance.exchange.v1";

/** Params is a representation of the exchange module parameters. */
export interface Params {
  /**
   * default_split is the default proportion of fees the exchange receives in basis points.
   * It is used if there isn't an applicable denom-specific split defined.
   * E.g. 100 = 1%. Min = 0, Max = 10000.
   */
  defaultSplit: number;
  /** denom_splits are the denom-specific amounts the exchange receives. */
  denomSplits: DenomSplit[];
  /**
   * fee_create_payment_flat is the flat fee options for creating a payment.
   * If the source amount is not zero then one of these fee entries is required to create the payment.
   * This field is currently limited to zero or one entries.
   */
  feeCreatePaymentFlat: Coin[];
  /**
   * fee_accept_payment_flat is the flat fee options for accepting a payment.
   * If the target amount is not zero then one of these fee entries is required to accept the payment.
   * This field is currently limited to zero or one entries.
   */
  feeAcceptPaymentFlat: Coin[];
}

/** DenomSplit associates a coin denomination with an amount the exchange receives for that denom. */
export interface DenomSplit {
  /** denom is the coin denomination this split applies to. */
  denom: string;
  /**
   * split is the proportion of fees the exchange receives for this denom in basis points.
   * E.g. 100 = 1%. Min = 0, Max = 10000.
   */
  split: number;
}

function createBaseParams(): Params {
  return { defaultSplit: 0, denomSplits: [], feeCreatePaymentFlat: [], feeAcceptPaymentFlat: [] };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultSplit !== 0) {
      writer.uint32(8).uint32(message.defaultSplit);
    }
    for (const v of message.denomSplits) {
      DenomSplit.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.feeCreatePaymentFlat) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.feeAcceptPaymentFlat) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.defaultSplit = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denomSplits.push(DenomSplit.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.feeCreatePaymentFlat.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feeAcceptPaymentFlat.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      defaultSplit: isSet(object.defaultSplit) ? globalThis.Number(object.defaultSplit) : 0,
      denomSplits: globalThis.Array.isArray(object?.denomSplits)
        ? object.denomSplits.map((e: any) => DenomSplit.fromJSON(e))
        : [],
      feeCreatePaymentFlat: globalThis.Array.isArray(object?.feeCreatePaymentFlat)
        ? object.feeCreatePaymentFlat.map((e: any) => Coin.fromJSON(e))
        : [],
      feeAcceptPaymentFlat: globalThis.Array.isArray(object?.feeAcceptPaymentFlat)
        ? object.feeAcceptPaymentFlat.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.defaultSplit !== 0) {
      obj.defaultSplit = Math.round(message.defaultSplit);
    }
    if (message.denomSplits?.length) {
      obj.denomSplits = message.denomSplits.map((e) => DenomSplit.toJSON(e));
    }
    if (message.feeCreatePaymentFlat?.length) {
      obj.feeCreatePaymentFlat = message.feeCreatePaymentFlat.map((e) => Coin.toJSON(e));
    }
    if (message.feeAcceptPaymentFlat?.length) {
      obj.feeAcceptPaymentFlat = message.feeAcceptPaymentFlat.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.defaultSplit = object.defaultSplit ?? 0;
    message.denomSplits = object.denomSplits?.map((e) => DenomSplit.fromPartial(e)) || [];
    message.feeCreatePaymentFlat = object.feeCreatePaymentFlat?.map((e) => Coin.fromPartial(e)) || [];
    message.feeAcceptPaymentFlat = object.feeAcceptPaymentFlat?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDenomSplit(): DenomSplit {
  return { denom: "", split: 0 };
}

export const DenomSplit: MessageFns<DenomSplit> = {
  encode(message: DenomSplit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.split !== 0) {
      writer.uint32(16).uint32(message.split);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenomSplit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenomSplit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.split = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenomSplit {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      split: isSet(object.split) ? globalThis.Number(object.split) : 0,
    };
  },

  toJSON(message: DenomSplit): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.split !== 0) {
      obj.split = Math.round(message.split);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DenomSplit>, I>>(base?: I): DenomSplit {
    return DenomSplit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DenomSplit>, I>>(object: I): DenomSplit {
    const message = createBaseDenomSplit();
    message.denom = object.denom ?? "";
    message.split = object.split ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
