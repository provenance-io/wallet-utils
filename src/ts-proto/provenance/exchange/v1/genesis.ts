// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/exchange/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Commitment } from "./commitments";
import { Market } from "./market";
import { Order } from "./orders";
import { Params } from "./params";
import { Payment } from "./payments";

export const protobufPackage = "provenance.exchange.v1";

/** GenesisState is the data that should be loaded into the exchange module during genesis. */
export interface GenesisState {
  /** params defines all the parameters of the exchange module. */
  params?:
    | Params
    | undefined;
  /** markets are all of the markets to create at genesis. */
  markets: Market[];
  /** orders are all the orders to create at genesis. */
  orders: Order[];
  /** last_market_id is the value of the last auto-selected market id. */
  lastMarketId: number;
  /** last_order_id is the value of the last order id created. */
  lastOrderId: Long;
  /** commitments are all of the commitments to create at genesis. */
  commitments: Commitment[];
  /** payments are all the payments to create at genesis. */
  payments: Payment[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    markets: [],
    orders: [],
    lastMarketId: 0,
    lastOrderId: Long.UZERO,
    commitments: [],
    payments: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.markets) {
      Market.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.lastMarketId !== 0) {
      writer.uint32(32).uint32(message.lastMarketId);
    }
    if (!message.lastOrderId.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.lastOrderId.toString());
    }
    for (const v of message.commitments) {
      Commitment.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.payments) {
      Payment.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.markets.push(Market.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastMarketId = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastOrderId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.commitments.push(Commitment.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.payments.push(Payment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      markets: globalThis.Array.isArray(object?.markets) ? object.markets.map((e: any) => Market.fromJSON(e)) : [],
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      lastMarketId: isSet(object.lastMarketId) ? globalThis.Number(object.lastMarketId) : 0,
      lastOrderId: isSet(object.lastOrderId) ? Long.fromValue(object.lastOrderId) : Long.UZERO,
      commitments: globalThis.Array.isArray(object?.commitments)
        ? object.commitments.map((e: any) => Commitment.fromJSON(e))
        : [],
      payments: globalThis.Array.isArray(object?.payments) ? object.payments.map((e: any) => Payment.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.markets?.length) {
      obj.markets = message.markets.map((e) => Market.toJSON(e));
    }
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.lastMarketId !== 0) {
      obj.lastMarketId = Math.round(message.lastMarketId);
    }
    if (!message.lastOrderId.equals(Long.UZERO)) {
      obj.lastOrderId = (message.lastOrderId || Long.UZERO).toString();
    }
    if (message.commitments?.length) {
      obj.commitments = message.commitments.map((e) => Commitment.toJSON(e));
    }
    if (message.payments?.length) {
      obj.payments = message.payments.map((e) => Payment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.markets = object.markets?.map((e) => Market.fromPartial(e)) || [];
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.lastMarketId = object.lastMarketId ?? 0;
    message.lastOrderId = (object.lastOrderId !== undefined && object.lastOrderId !== null)
      ? Long.fromValue(object.lastOrderId)
      : Long.UZERO;
    message.commitments = object.commitments?.map((e) => Commitment.fromPartial(e)) || [];
    message.payments = object.payments?.map((e) => Payment.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
