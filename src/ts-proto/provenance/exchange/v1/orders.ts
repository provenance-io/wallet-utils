// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/exchange/v1/orders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "provenance.exchange.v1";

/** Order associates an order id with one of the order types. */
export interface Order {
  /** order_id is the numerical identifier for this order. */
  orderId: Long;
  /** ask_order is the information about this order if it represents an ask order. */
  askOrder?:
    | AskOrder
    | undefined;
  /** bid_order is the information about this order if it represents a bid order. */
  bidOrder?: BidOrder | undefined;
}

/** AskOrder represents someone's desire to sell something at a minimum price. */
export interface AskOrder {
  /** market_id identifies the market that this order belongs to. */
  marketId: number;
  /** seller is the address of the account that owns this order and has the assets to sell. */
  seller: string;
  /**
   * assets are the things that the seller wishes to sell.
   * A hold is placed on this until the order is filled or cancelled.
   */
  assets?:
    | Coin
    | undefined;
  /**
   * price is the minimum amount that the seller is willing to accept for the assets. The seller's settlement
   * proportional fee (and possibly the settlement flat fee) is taken out of the amount the seller receives,
   * so it's possible that the seller will still receive less than this price.
   */
  price?:
    | Coin
    | undefined;
  /**
   * seller_settlement_flat_fee is the flat fee for sellers that will be charged during settlement. If this denom is the
   * same denom as the price, it will come out of the actual price received. If this denom is different, the amount must
   * be in the seller's account and a hold is placed on it until the order is filled or cancelled.
   */
  sellerSettlementFlatFee?:
    | Coin
    | undefined;
  /**
   * allow_partial should be true if partial fulfillment of this order should be allowed, and should be false if the
   * order must be either filled in full or not filled at all.
   */
  allowPartial: boolean;
  /**
   * external_id is an optional string used to externally identify this order. Max length is 100 characters.
   * If an order in this market with this external id already exists, this order will be rejected.
   */
  externalId: string;
}

/** BidOrder represents someone's desire to buy something at a specific price. */
export interface BidOrder {
  /** market_id identifies the market that this order belongs to. */
  marketId: number;
  /** buyer is the address of the account that owns this order and has the price to spend. */
  buyer: string;
  /** assets are the things that the buyer wishes to buy. */
  assets?:
    | Coin
    | undefined;
  /**
   * price is the amount that the buyer will pay for the assets.
   * A hold is placed on this until the order is filled or cancelled.
   */
  price?:
    | Coin
    | undefined;
  /**
   * buyer_settlement_fees are the fees (both flat and proportional) that the buyer will pay (in addition to the price)
   * when the order is settled. A hold is placed on this until the order is filled or cancelled.
   */
  buyerSettlementFees: Coin[];
  /**
   * allow_partial should be true if partial fulfillment of this order should be allowed, and should be false if the
   * order must be either filled in full or not filled at all.
   */
  allowPartial: boolean;
  /**
   * external_id is an optional string used to externally identify this order. Max length is 100 characters.
   * If an order in this market with this external id already exists, this order will be rejected.
   */
  externalId: string;
}

function createBaseOrder(): Order {
  return { orderId: Long.UZERO, askOrder: undefined, bidOrder: undefined };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.orderId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.orderId.toString());
    }
    if (message.askOrder !== undefined) {
      AskOrder.encode(message.askOrder, writer.uint32(18).fork()).join();
    }
    if (message.bidOrder !== undefined) {
      BidOrder.encode(message.bidOrder, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.orderId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.askOrder = AskOrder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bidOrder = BidOrder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      orderId: isSet(object.orderId) ? Long.fromValue(object.orderId) : Long.UZERO,
      askOrder: isSet(object.askOrder) ? AskOrder.fromJSON(object.askOrder) : undefined,
      bidOrder: isSet(object.bidOrder) ? BidOrder.fromJSON(object.bidOrder) : undefined,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (!message.orderId.equals(Long.UZERO)) {
      obj.orderId = (message.orderId || Long.UZERO).toString();
    }
    if (message.askOrder !== undefined) {
      obj.askOrder = AskOrder.toJSON(message.askOrder);
    }
    if (message.bidOrder !== undefined) {
      obj.bidOrder = BidOrder.toJSON(message.bidOrder);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.orderId = (object.orderId !== undefined && object.orderId !== null)
      ? Long.fromValue(object.orderId)
      : Long.UZERO;
    message.askOrder = (object.askOrder !== undefined && object.askOrder !== null)
      ? AskOrder.fromPartial(object.askOrder)
      : undefined;
    message.bidOrder = (object.bidOrder !== undefined && object.bidOrder !== null)
      ? BidOrder.fromPartial(object.bidOrder)
      : undefined;
    return message;
  },
};

function createBaseAskOrder(): AskOrder {
  return {
    marketId: 0,
    seller: "",
    assets: undefined,
    price: undefined,
    sellerSettlementFlatFee: undefined,
    allowPartial: false,
    externalId: "",
  };
}

export const AskOrder: MessageFns<AskOrder> = {
  encode(message: AskOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.marketId !== 0) {
      writer.uint32(8).uint32(message.marketId);
    }
    if (message.seller !== "") {
      writer.uint32(18).string(message.seller);
    }
    if (message.assets !== undefined) {
      Coin.encode(message.assets, writer.uint32(26).fork()).join();
    }
    if (message.price !== undefined) {
      Coin.encode(message.price, writer.uint32(34).fork()).join();
    }
    if (message.sellerSettlementFlatFee !== undefined) {
      Coin.encode(message.sellerSettlementFlatFee, writer.uint32(42).fork()).join();
    }
    if (message.allowPartial !== false) {
      writer.uint32(48).bool(message.allowPartial);
    }
    if (message.externalId !== "") {
      writer.uint32(58).string(message.externalId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AskOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAskOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.marketId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seller = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assets = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sellerSettlementFlatFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.allowPartial = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AskOrder {
    return {
      marketId: isSet(object.marketId) ? globalThis.Number(object.marketId) : 0,
      seller: isSet(object.seller) ? globalThis.String(object.seller) : "",
      assets: isSet(object.assets) ? Coin.fromJSON(object.assets) : undefined,
      price: isSet(object.price) ? Coin.fromJSON(object.price) : undefined,
      sellerSettlementFlatFee: isSet(object.sellerSettlementFlatFee)
        ? Coin.fromJSON(object.sellerSettlementFlatFee)
        : undefined,
      allowPartial: isSet(object.allowPartial) ? globalThis.Boolean(object.allowPartial) : false,
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
    };
  },

  toJSON(message: AskOrder): unknown {
    const obj: any = {};
    if (message.marketId !== 0) {
      obj.marketId = Math.round(message.marketId);
    }
    if (message.seller !== "") {
      obj.seller = message.seller;
    }
    if (message.assets !== undefined) {
      obj.assets = Coin.toJSON(message.assets);
    }
    if (message.price !== undefined) {
      obj.price = Coin.toJSON(message.price);
    }
    if (message.sellerSettlementFlatFee !== undefined) {
      obj.sellerSettlementFlatFee = Coin.toJSON(message.sellerSettlementFlatFee);
    }
    if (message.allowPartial !== false) {
      obj.allowPartial = message.allowPartial;
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AskOrder>, I>>(base?: I): AskOrder {
    return AskOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AskOrder>, I>>(object: I): AskOrder {
    const message = createBaseAskOrder();
    message.marketId = object.marketId ?? 0;
    message.seller = object.seller ?? "";
    message.assets = (object.assets !== undefined && object.assets !== null)
      ? Coin.fromPartial(object.assets)
      : undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Coin.fromPartial(object.price) : undefined;
    message.sellerSettlementFlatFee =
      (object.sellerSettlementFlatFee !== undefined && object.sellerSettlementFlatFee !== null)
        ? Coin.fromPartial(object.sellerSettlementFlatFee)
        : undefined;
    message.allowPartial = object.allowPartial ?? false;
    message.externalId = object.externalId ?? "";
    return message;
  },
};

function createBaseBidOrder(): BidOrder {
  return {
    marketId: 0,
    buyer: "",
    assets: undefined,
    price: undefined,
    buyerSettlementFees: [],
    allowPartial: false,
    externalId: "",
  };
}

export const BidOrder: MessageFns<BidOrder> = {
  encode(message: BidOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.marketId !== 0) {
      writer.uint32(8).uint32(message.marketId);
    }
    if (message.buyer !== "") {
      writer.uint32(18).string(message.buyer);
    }
    if (message.assets !== undefined) {
      Coin.encode(message.assets, writer.uint32(26).fork()).join();
    }
    if (message.price !== undefined) {
      Coin.encode(message.price, writer.uint32(34).fork()).join();
    }
    for (const v of message.buyerSettlementFees) {
      Coin.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.allowPartial !== false) {
      writer.uint32(48).bool(message.allowPartial);
    }
    if (message.externalId !== "") {
      writer.uint32(58).string(message.externalId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BidOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBidOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.marketId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buyer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assets = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.buyerSettlementFees.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.allowPartial = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BidOrder {
    return {
      marketId: isSet(object.marketId) ? globalThis.Number(object.marketId) : 0,
      buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
      assets: isSet(object.assets) ? Coin.fromJSON(object.assets) : undefined,
      price: isSet(object.price) ? Coin.fromJSON(object.price) : undefined,
      buyerSettlementFees: globalThis.Array.isArray(object?.buyerSettlementFees)
        ? object.buyerSettlementFees.map((e: any) => Coin.fromJSON(e))
        : [],
      allowPartial: isSet(object.allowPartial) ? globalThis.Boolean(object.allowPartial) : false,
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
    };
  },

  toJSON(message: BidOrder): unknown {
    const obj: any = {};
    if (message.marketId !== 0) {
      obj.marketId = Math.round(message.marketId);
    }
    if (message.buyer !== "") {
      obj.buyer = message.buyer;
    }
    if (message.assets !== undefined) {
      obj.assets = Coin.toJSON(message.assets);
    }
    if (message.price !== undefined) {
      obj.price = Coin.toJSON(message.price);
    }
    if (message.buyerSettlementFees?.length) {
      obj.buyerSettlementFees = message.buyerSettlementFees.map((e) => Coin.toJSON(e));
    }
    if (message.allowPartial !== false) {
      obj.allowPartial = message.allowPartial;
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BidOrder>, I>>(base?: I): BidOrder {
    return BidOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BidOrder>, I>>(object: I): BidOrder {
    const message = createBaseBidOrder();
    message.marketId = object.marketId ?? 0;
    message.buyer = object.buyer ?? "";
    message.assets = (object.assets !== undefined && object.assets !== null)
      ? Coin.fromPartial(object.assets)
      : undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Coin.fromPartial(object.price) : undefined;
    message.buyerSettlementFees = object.buyerSettlementFees?.map((e) => Coin.fromPartial(e)) || [];
    message.allowPartial = object.allowPartial ?? false;
    message.externalId = object.externalId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
