// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/ibcratelimit/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.ibcratelimit.v1";

/** EventAckRevertFailure is emitted when an Ack revert fails */
export interface EventAckRevertFailure {
  /** module is the name of the module that emitted it. */
  module: string;
  /** packet is the packet received on acknowledgement. */
  packet: string;
  /** ack is the packet's inner acknowledgement message. */
  ack: string;
}

/** EventTimeoutRevertFailure is emitted when a Timeout revert fails */
export interface EventTimeoutRevertFailure {
  /** module is the name of the module that emitted it. */
  module: string;
  /** packet is the packet received on timeout. */
  packet: string;
}

/** EventParamsUpdated is an event emitted when the ibcratelimit module's params have been updated. */
export interface EventParamsUpdated {
}

function createBaseEventAckRevertFailure(): EventAckRevertFailure {
  return { module: "", packet: "", ack: "" };
}

export const EventAckRevertFailure: MessageFns<EventAckRevertFailure> = {
  encode(message: EventAckRevertFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.packet !== "") {
      writer.uint32(18).string(message.packet);
    }
    if (message.ack !== "") {
      writer.uint32(26).string(message.ack);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAckRevertFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAckRevertFailure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.packet = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ack = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAckRevertFailure {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      packet: isSet(object.packet) ? globalThis.String(object.packet) : "",
      ack: isSet(object.ack) ? globalThis.String(object.ack) : "",
    };
  },

  toJSON(message: EventAckRevertFailure): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.packet !== "") {
      obj.packet = message.packet;
    }
    if (message.ack !== "") {
      obj.ack = message.ack;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAckRevertFailure>, I>>(base?: I): EventAckRevertFailure {
    return EventAckRevertFailure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAckRevertFailure>, I>>(object: I): EventAckRevertFailure {
    const message = createBaseEventAckRevertFailure();
    message.module = object.module ?? "";
    message.packet = object.packet ?? "";
    message.ack = object.ack ?? "";
    return message;
  },
};

function createBaseEventTimeoutRevertFailure(): EventTimeoutRevertFailure {
  return { module: "", packet: "" };
}

export const EventTimeoutRevertFailure: MessageFns<EventTimeoutRevertFailure> = {
  encode(message: EventTimeoutRevertFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.packet !== "") {
      writer.uint32(18).string(message.packet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTimeoutRevertFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTimeoutRevertFailure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.packet = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTimeoutRevertFailure {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      packet: isSet(object.packet) ? globalThis.String(object.packet) : "",
    };
  },

  toJSON(message: EventTimeoutRevertFailure): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.packet !== "") {
      obj.packet = message.packet;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTimeoutRevertFailure>, I>>(base?: I): EventTimeoutRevertFailure {
    return EventTimeoutRevertFailure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTimeoutRevertFailure>, I>>(object: I): EventTimeoutRevertFailure {
    const message = createBaseEventTimeoutRevertFailure();
    message.module = object.module ?? "";
    message.packet = object.packet ?? "";
    return message;
  },
};

function createBaseEventParamsUpdated(): EventParamsUpdated {
  return {};
}

export const EventParamsUpdated: MessageFns<EventParamsUpdated> = {
  encode(_: EventParamsUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventParamsUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventParamsUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EventParamsUpdated {
    return {};
  },

  toJSON(_: EventParamsUpdated): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EventParamsUpdated>, I>>(base?: I): EventParamsUpdated {
    return EventParamsUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventParamsUpdated>, I>>(_: I): EventParamsUpdated {
    const message = createBaseEventParamsUpdated();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
