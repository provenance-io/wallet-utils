// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/msgfees/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { MsgFee, Params } from "./msgfees";

export const protobufPackage = "provenance.msgfees.v1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params?: Params | undefined;
}

/** QueryAllMsgFeesRequest queries all Msg which have fees associated with them. */
export interface QueryAllMsgFeesRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** response for querying all msg's with fees associated with them */
export interface QueryAllMsgFeesResponse {
  msgFees: MsgFee[];
  /** pagination defines an optional pagination for the request. */
  pagination?: PageResponse | undefined;
}

/** CalculateTxFeesRequest is the request type for the Query RPC method. */
export interface CalculateTxFeesRequest {
  /** tx_bytes is the transaction to simulate. */
  txBytes: Uint8Array;
  /**
   * default_base_denom is used to set the denom used for gas fees
   * if not set it will default to nhash.
   */
  defaultBaseDenom: string;
  /** gas_adjustment is the adjustment factor to be multiplied against the estimate returned by the tx simulation */
  gasAdjustment: number;
}

/** CalculateTxFeesResponse is the response type for the Query RPC method. */
export interface CalculateTxFeesResponse {
  /** additional_fees are the amount of coins to be for addition msg fees */
  additionalFees: Coin[];
  /**
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the floor gas price module param.
   */
  totalFees: Coin[];
  /** estimated_gas is the amount of gas needed for the transaction */
  estimatedGas: Long;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMsgFeesRequest(): QueryAllMsgFeesRequest {
  return { pagination: undefined };
}

export const QueryAllMsgFeesRequest: MessageFns<QueryAllMsgFeesRequest> = {
  encode(message: QueryAllMsgFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMsgFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMsgFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMsgFeesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMsgFeesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMsgFeesRequest>, I>>(base?: I): QueryAllMsgFeesRequest {
    return QueryAllMsgFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMsgFeesRequest>, I>>(object: I): QueryAllMsgFeesRequest {
    const message = createBaseQueryAllMsgFeesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMsgFeesResponse(): QueryAllMsgFeesResponse {
  return { msgFees: [], pagination: undefined };
}

export const QueryAllMsgFeesResponse: MessageFns<QueryAllMsgFeesResponse> = {
  encode(message: QueryAllMsgFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.msgFees) {
      MsgFee.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMsgFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMsgFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msgFees.push(MsgFee.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMsgFeesResponse {
    return {
      msgFees: globalThis.Array.isArray(object?.msgFees) ? object.msgFees.map((e: any) => MsgFee.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMsgFeesResponse): unknown {
    const obj: any = {};
    if (message.msgFees?.length) {
      obj.msgFees = message.msgFees.map((e) => MsgFee.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMsgFeesResponse>, I>>(base?: I): QueryAllMsgFeesResponse {
    return QueryAllMsgFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMsgFeesResponse>, I>>(object: I): QueryAllMsgFeesResponse {
    const message = createBaseQueryAllMsgFeesResponse();
    message.msgFees = object.msgFees?.map((e) => MsgFee.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseCalculateTxFeesRequest(): CalculateTxFeesRequest {
  return { txBytes: new Uint8Array(0), defaultBaseDenom: "", gasAdjustment: 0 };
}

export const CalculateTxFeesRequest: MessageFns<CalculateTxFeesRequest> = {
  encode(message: CalculateTxFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txBytes.length !== 0) {
      writer.uint32(10).bytes(message.txBytes);
    }
    if (message.defaultBaseDenom !== "") {
      writer.uint32(18).string(message.defaultBaseDenom);
    }
    if (message.gasAdjustment !== 0) {
      writer.uint32(29).float(message.gasAdjustment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateTxFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateTxFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txBytes = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultBaseDenom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.gasAdjustment = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateTxFeesRequest {
    return {
      txBytes: isSet(object.txBytes) ? bytesFromBase64(object.txBytes) : new Uint8Array(0),
      defaultBaseDenom: isSet(object.defaultBaseDenom) ? globalThis.String(object.defaultBaseDenom) : "",
      gasAdjustment: isSet(object.gasAdjustment) ? globalThis.Number(object.gasAdjustment) : 0,
    };
  },

  toJSON(message: CalculateTxFeesRequest): unknown {
    const obj: any = {};
    if (message.txBytes.length !== 0) {
      obj.txBytes = base64FromBytes(message.txBytes);
    }
    if (message.defaultBaseDenom !== "") {
      obj.defaultBaseDenom = message.defaultBaseDenom;
    }
    if (message.gasAdjustment !== 0) {
      obj.gasAdjustment = message.gasAdjustment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CalculateTxFeesRequest>, I>>(base?: I): CalculateTxFeesRequest {
    return CalculateTxFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalculateTxFeesRequest>, I>>(object: I): CalculateTxFeesRequest {
    const message = createBaseCalculateTxFeesRequest();
    message.txBytes = object.txBytes ?? new Uint8Array(0);
    message.defaultBaseDenom = object.defaultBaseDenom ?? "";
    message.gasAdjustment = object.gasAdjustment ?? 0;
    return message;
  },
};

function createBaseCalculateTxFeesResponse(): CalculateTxFeesResponse {
  return { additionalFees: [], totalFees: [], estimatedGas: Long.UZERO };
}

export const CalculateTxFeesResponse: MessageFns<CalculateTxFeesResponse> = {
  encode(message: CalculateTxFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.additionalFees) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.totalFees) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    if (!message.estimatedGas.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.estimatedGas.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateTxFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateTxFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.additionalFees.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalFees.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.estimatedGas = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateTxFeesResponse {
    return {
      additionalFees: globalThis.Array.isArray(object?.additionalFees)
        ? object.additionalFees.map((e: any) => Coin.fromJSON(e))
        : [],
      totalFees: globalThis.Array.isArray(object?.totalFees) ? object.totalFees.map((e: any) => Coin.fromJSON(e)) : [],
      estimatedGas: isSet(object.estimatedGas) ? Long.fromValue(object.estimatedGas) : Long.UZERO,
    };
  },

  toJSON(message: CalculateTxFeesResponse): unknown {
    const obj: any = {};
    if (message.additionalFees?.length) {
      obj.additionalFees = message.additionalFees.map((e) => Coin.toJSON(e));
    }
    if (message.totalFees?.length) {
      obj.totalFees = message.totalFees.map((e) => Coin.toJSON(e));
    }
    if (!message.estimatedGas.equals(Long.UZERO)) {
      obj.estimatedGas = (message.estimatedGas || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CalculateTxFeesResponse>, I>>(base?: I): CalculateTxFeesResponse {
    return CalculateTxFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalculateTxFeesResponse>, I>>(object: I): CalculateTxFeesResponse {
    const message = createBaseCalculateTxFeesResponse();
    message.additionalFees = object.additionalFees?.map((e) => Coin.fromPartial(e)) || [];
    message.totalFees = object.totalFees?.map((e) => Coin.fromPartial(e)) || [];
    message.estimatedGas = (object.estimatedGas !== undefined && object.estimatedGas !== null)
      ? Long.fromValue(object.estimatedGas)
      : Long.UZERO;
    return message;
  },
};

/** Query defines the gRPC querier service for marker module. */
export interface Query {
  /** Params queries the parameters for x/msgfees */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Query all Msgs which have fees associated with them. */
  QueryAllMsgFees(request: QueryAllMsgFeesRequest): Promise<QueryAllMsgFeesResponse>;
  /** CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees. */
  CalculateTxFees(request: CalculateTxFeesRequest): Promise<CalculateTxFeesResponse>;
}

export const QueryServiceName = "provenance.msgfees.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.QueryAllMsgFees = this.QueryAllMsgFees.bind(this);
    this.CalculateTxFees = this.CalculateTxFees.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  QueryAllMsgFees(request: QueryAllMsgFeesRequest): Promise<QueryAllMsgFeesResponse> {
    const data = QueryAllMsgFeesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryAllMsgFees", data);
    return promise.then((data) => QueryAllMsgFeesResponse.decode(new BinaryReader(data)));
  }

  CalculateTxFees(request: CalculateTxFeesRequest): Promise<CalculateTxFeesResponse> {
    const data = CalculateTxFeesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CalculateTxFees", data);
    return promise.then((data) => CalculateTxFeesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
