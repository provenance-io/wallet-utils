// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/msgfees/v1/proposals.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "provenance.msgfees.v1";

/**
 * AddMsgFeeProposal defines a governance proposal to add additional msg based fee
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgAddMsgFeeProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface AddMsgFeeProposal {
  /** propsal title */
  title: string;
  /** propsal description */
  description: string;
  /** type url of msg to add fee */
  msgTypeUrl: string;
  /** additional fee for msg type */
  additionalFee?:
    | Coin
    | undefined;
  /** optional recipient to recieve basis points */
  recipient: string;
  /** basis points to use when recipient is present (1 - 10,000) */
  recipientBasisPoints: string;
}

/**
 * UpdateMsgFeeProposal defines a governance proposal to update a current msg based fee
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgUpdateMsgFeeProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface UpdateMsgFeeProposal {
  /** propsal title */
  title: string;
  /** propsal description */
  description: string;
  /** type url of msg to update fee */
  msgTypeUrl: string;
  /** additional fee for msg type */
  additionalFee?:
    | Coin
    | undefined;
  /** optional recipient to recieve basis points */
  recipient: string;
  /** basis points to use when recipient is present (1 - 10,000) */
  recipientBasisPoints: string;
}

/**
 * RemoveMsgFeeProposal defines a governance proposal to delete a current msg based fee
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgRemoveMsgFeeProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface RemoveMsgFeeProposal {
  /** propsal title */
  title: string;
  /** propsal description */
  description: string;
  /** type url of msg fee to remove */
  msgTypeUrl: string;
}

/**
 * UpdateNhashPerUsdMilProposal defines a governance proposal to update the nhash per usd mil param
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgUpdateNhashPerUsdMilProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface UpdateNhashPerUsdMilProposal {
  /** proposal title */
  title: string;
  /** proposal description */
  description: string;
  /** nhash_per_usd_mil is number of nhash per usd mil */
  nhashPerUsdMil: Long;
}

/**
 * UpdateConversionFeeDenomProposal defines a governance proposal to update the msg fee conversion denom
 * Deprecated: This message is no longer usable. It is only still included for
 * backwards compatibility (e.g. looking up old governance proposals).
 * It is replaced by providing a MsgUpdateConversionFeeDenomProposalRequest in a governance proposal.
 *
 * @deprecated
 */
export interface UpdateConversionFeeDenomProposal {
  /** proposal title */
  title: string;
  /** proposal description */
  description: string;
  /** conversion_fee_denom is the denom that usd will be converted to */
  conversionFeeDenom: string;
}

function createBaseAddMsgFeeProposal(): AddMsgFeeProposal {
  return {
    title: "",
    description: "",
    msgTypeUrl: "",
    additionalFee: undefined,
    recipient: "",
    recipientBasisPoints: "",
  };
}

export const AddMsgFeeProposal: MessageFns<AddMsgFeeProposal> = {
  encode(message: AddMsgFeeProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.msgTypeUrl !== "") {
      writer.uint32(26).string(message.msgTypeUrl);
    }
    if (message.additionalFee !== undefined) {
      Coin.encode(message.additionalFee, writer.uint32(34).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(42).string(message.recipient);
    }
    if (message.recipientBasisPoints !== "") {
      writer.uint32(50).string(message.recipientBasisPoints);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMsgFeeProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMsgFeeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.additionalFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipientBasisPoints = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMsgFeeProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
      additionalFee: isSet(object.additionalFee) ? Coin.fromJSON(object.additionalFee) : undefined,
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      recipientBasisPoints: isSet(object.recipientBasisPoints) ? globalThis.String(object.recipientBasisPoints) : "",
    };
  },

  toJSON(message: AddMsgFeeProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    if (message.additionalFee !== undefined) {
      obj.additionalFee = Coin.toJSON(message.additionalFee);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.recipientBasisPoints !== "") {
      obj.recipientBasisPoints = message.recipientBasisPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMsgFeeProposal>, I>>(base?: I): AddMsgFeeProposal {
    return AddMsgFeeProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMsgFeeProposal>, I>>(object: I): AddMsgFeeProposal {
    const message = createBaseAddMsgFeeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
      ? Coin.fromPartial(object.additionalFee)
      : undefined;
    message.recipient = object.recipient ?? "";
    message.recipientBasisPoints = object.recipientBasisPoints ?? "";
    return message;
  },
};

function createBaseUpdateMsgFeeProposal(): UpdateMsgFeeProposal {
  return {
    title: "",
    description: "",
    msgTypeUrl: "",
    additionalFee: undefined,
    recipient: "",
    recipientBasisPoints: "",
  };
}

export const UpdateMsgFeeProposal: MessageFns<UpdateMsgFeeProposal> = {
  encode(message: UpdateMsgFeeProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.msgTypeUrl !== "") {
      writer.uint32(26).string(message.msgTypeUrl);
    }
    if (message.additionalFee !== undefined) {
      Coin.encode(message.additionalFee, writer.uint32(34).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(42).string(message.recipient);
    }
    if (message.recipientBasisPoints !== "") {
      writer.uint32(50).string(message.recipientBasisPoints);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMsgFeeProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMsgFeeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.additionalFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipientBasisPoints = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMsgFeeProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
      additionalFee: isSet(object.additionalFee) ? Coin.fromJSON(object.additionalFee) : undefined,
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      recipientBasisPoints: isSet(object.recipientBasisPoints) ? globalThis.String(object.recipientBasisPoints) : "",
    };
  },

  toJSON(message: UpdateMsgFeeProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    if (message.additionalFee !== undefined) {
      obj.additionalFee = Coin.toJSON(message.additionalFee);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.recipientBasisPoints !== "") {
      obj.recipientBasisPoints = message.recipientBasisPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMsgFeeProposal>, I>>(base?: I): UpdateMsgFeeProposal {
    return UpdateMsgFeeProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMsgFeeProposal>, I>>(object: I): UpdateMsgFeeProposal {
    const message = createBaseUpdateMsgFeeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
      ? Coin.fromPartial(object.additionalFee)
      : undefined;
    message.recipient = object.recipient ?? "";
    message.recipientBasisPoints = object.recipientBasisPoints ?? "";
    return message;
  },
};

function createBaseRemoveMsgFeeProposal(): RemoveMsgFeeProposal {
  return { title: "", description: "", msgTypeUrl: "" };
}

export const RemoveMsgFeeProposal: MessageFns<RemoveMsgFeeProposal> = {
  encode(message: RemoveMsgFeeProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.msgTypeUrl !== "") {
      writer.uint32(26).string(message.msgTypeUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveMsgFeeProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMsgFeeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMsgFeeProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
    };
  },

  toJSON(message: RemoveMsgFeeProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveMsgFeeProposal>, I>>(base?: I): RemoveMsgFeeProposal {
    return RemoveMsgFeeProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveMsgFeeProposal>, I>>(object: I): RemoveMsgFeeProposal {
    const message = createBaseRemoveMsgFeeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    return message;
  },
};

function createBaseUpdateNhashPerUsdMilProposal(): UpdateNhashPerUsdMilProposal {
  return { title: "", description: "", nhashPerUsdMil: Long.UZERO };
}

export const UpdateNhashPerUsdMilProposal: MessageFns<UpdateNhashPerUsdMilProposal> = {
  encode(message: UpdateNhashPerUsdMilProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (!message.nhashPerUsdMil.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.nhashPerUsdMil.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNhashPerUsdMilProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNhashPerUsdMilProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nhashPerUsdMil = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNhashPerUsdMilProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      nhashPerUsdMil: isSet(object.nhashPerUsdMil) ? Long.fromValue(object.nhashPerUsdMil) : Long.UZERO,
    };
  },

  toJSON(message: UpdateNhashPerUsdMilProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (!message.nhashPerUsdMil.equals(Long.UZERO)) {
      obj.nhashPerUsdMil = (message.nhashPerUsdMil || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateNhashPerUsdMilProposal>, I>>(base?: I): UpdateNhashPerUsdMilProposal {
    return UpdateNhashPerUsdMilProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateNhashPerUsdMilProposal>, I>>(object: I): UpdateNhashPerUsdMilProposal {
    const message = createBaseUpdateNhashPerUsdMilProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.nhashPerUsdMil = (object.nhashPerUsdMil !== undefined && object.nhashPerUsdMil !== null)
      ? Long.fromValue(object.nhashPerUsdMil)
      : Long.UZERO;
    return message;
  },
};

function createBaseUpdateConversionFeeDenomProposal(): UpdateConversionFeeDenomProposal {
  return { title: "", description: "", conversionFeeDenom: "" };
}

export const UpdateConversionFeeDenomProposal: MessageFns<UpdateConversionFeeDenomProposal> = {
  encode(message: UpdateConversionFeeDenomProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.conversionFeeDenom !== "") {
      writer.uint32(34).string(message.conversionFeeDenom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversionFeeDenomProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversionFeeDenomProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.conversionFeeDenom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversionFeeDenomProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      conversionFeeDenom: isSet(object.conversionFeeDenom) ? globalThis.String(object.conversionFeeDenom) : "",
    };
  },

  toJSON(message: UpdateConversionFeeDenomProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.conversionFeeDenom !== "") {
      obj.conversionFeeDenom = message.conversionFeeDenom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateConversionFeeDenomProposal>, I>>(
    base?: I,
  ): UpdateConversionFeeDenomProposal {
    return UpdateConversionFeeDenomProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateConversionFeeDenomProposal>, I>>(
    object: I,
  ): UpdateConversionFeeDenomProposal {
    const message = createBaseUpdateConversionFeeDenomProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.conversionFeeDenom = object.conversionFeeDenom ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
