// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/msgfees/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "provenance.msgfees.v1";

/** MsgAssessCustomMsgFeeRequest defines an sdk.Msg type */
export interface MsgAssessCustomMsgFeeRequest {
  /** optional short name for custom msg fee, this will be emitted as a property of the event */
  name: string;
  /** amount of additional fee that must be paid */
  amount?:
    | Coin
    | undefined;
  /** optional recipient address, the basis points amount is sent to the recipient */
  recipient: string;
  /** the signer of the msg */
  from: string;
  /** optional basis points 0 - 10,000 for recipient defaults to 10,000 */
  recipientBasisPoints: string;
}

/** MsgAssessCustomMsgFeeResponse defines the Msg/AssessCustomMsgFeee response type. */
export interface MsgAssessCustomMsgFeeResponse {
}

/** AddMsgFeeProposal defines a governance proposal to add additional msg based fee */
export interface MsgAddMsgFeeProposalRequest {
  /** type url of msg to add fee */
  msgTypeUrl: string;
  /** additional fee for msg type */
  additionalFee?:
    | Coin
    | undefined;
  /** optional recipient to receive basis points */
  recipient: string;
  /** basis points to use when recipient is present (1 - 10,000) */
  recipientBasisPoints: string;
  /** the signing authority for the proposal */
  authority: string;
}

/** MsgAddMsgFeeProposalResponse defines the Msg/AddMsgFeeProposal response type */
export interface MsgAddMsgFeeProposalResponse {
}

/** UpdateMsgFeeProposal defines a governance proposal to update a current msg based fee */
export interface MsgUpdateMsgFeeProposalRequest {
  /** type url of msg to update fee */
  msgTypeUrl: string;
  /** additional fee for msg type */
  additionalFee?:
    | Coin
    | undefined;
  /** optional recipient to receive basis points */
  recipient: string;
  /** basis points to use when recipient is present (1 - 10,000) */
  recipientBasisPoints: string;
  /** the signing authority for the proposal */
  authority: string;
}

/** MsgUpdateMsgFeeProposalResponse defines the Msg/RemoveMsgFeeProposal response type */
export interface MsgUpdateMsgFeeProposalResponse {
}

/** RemoveMsgFeeProposal defines a governance proposal to delete a current msg based fee */
export interface MsgRemoveMsgFeeProposalRequest {
  /** type url of msg fee to remove */
  msgTypeUrl: string;
  /** the signing authority for the proposal */
  authority: string;
}

/** MsgRemoveMsgFeeProposalResponse defines the Msg/RemoveMsgFeeProposal response type */
export interface MsgRemoveMsgFeeProposalResponse {
}

/** UpdateNhashPerUsdMilProposal defines a governance proposal to update the nhash per usd mil param */
export interface MsgUpdateNhashPerUsdMilProposalRequest {
  /** nhash_per_usd_mil is number of nhash per usd mil */
  nhashPerUsdMil: Long;
  /** the signing authority for the proposal */
  authority: string;
}

/** MsgUpdateNhashPerUsdMilProposalResponse defines the Msg/UpdateNhashPerUsdMilProposal response type */
export interface MsgUpdateNhashPerUsdMilProposalResponse {
}

/** UpdateConversionFeeDenomProposal defines a governance proposal to update the msg fee conversion denom */
export interface MsgUpdateConversionFeeDenomProposalRequest {
  /** conversion_fee_denom is the denom that usd will be converted to */
  conversionFeeDenom: string;
  /** the signing authority for the proposal */
  authority: string;
}

/** MsgUpdateConversionFeeDenomProposalResponse defines the Msg/UpdateConversionFeeDenomProposal response type */
export interface MsgUpdateConversionFeeDenomProposalResponse {
}

function createBaseMsgAssessCustomMsgFeeRequest(): MsgAssessCustomMsgFeeRequest {
  return { name: "", amount: undefined, recipient: "", from: "", recipientBasisPoints: "" };
}

export const MsgAssessCustomMsgFeeRequest: MessageFns<MsgAssessCustomMsgFeeRequest> = {
  encode(message: MsgAssessCustomMsgFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.from !== "") {
      writer.uint32(34).string(message.from);
    }
    if (message.recipientBasisPoints !== "") {
      writer.uint32(42).string(message.recipientBasisPoints);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAssessCustomMsgFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAssessCustomMsgFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recipientBasisPoints = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAssessCustomMsgFeeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      recipientBasisPoints: isSet(object.recipientBasisPoints) ? globalThis.String(object.recipientBasisPoints) : "",
    };
  },

  toJSON(message: MsgAssessCustomMsgFeeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.recipientBasisPoints !== "") {
      obj.recipientBasisPoints = message.recipientBasisPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAssessCustomMsgFeeRequest>, I>>(base?: I): MsgAssessCustomMsgFeeRequest {
    return MsgAssessCustomMsgFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAssessCustomMsgFeeRequest>, I>>(object: I): MsgAssessCustomMsgFeeRequest {
    const message = createBaseMsgAssessCustomMsgFeeRequest();
    message.name = object.name ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.recipient = object.recipient ?? "";
    message.from = object.from ?? "";
    message.recipientBasisPoints = object.recipientBasisPoints ?? "";
    return message;
  },
};

function createBaseMsgAssessCustomMsgFeeResponse(): MsgAssessCustomMsgFeeResponse {
  return {};
}

export const MsgAssessCustomMsgFeeResponse: MessageFns<MsgAssessCustomMsgFeeResponse> = {
  encode(_: MsgAssessCustomMsgFeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAssessCustomMsgFeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAssessCustomMsgFeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAssessCustomMsgFeeResponse {
    return {};
  },

  toJSON(_: MsgAssessCustomMsgFeeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAssessCustomMsgFeeResponse>, I>>(base?: I): MsgAssessCustomMsgFeeResponse {
    return MsgAssessCustomMsgFeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAssessCustomMsgFeeResponse>, I>>(_: I): MsgAssessCustomMsgFeeResponse {
    const message = createBaseMsgAssessCustomMsgFeeResponse();
    return message;
  },
};

function createBaseMsgAddMsgFeeProposalRequest(): MsgAddMsgFeeProposalRequest {
  return { msgTypeUrl: "", additionalFee: undefined, recipient: "", recipientBasisPoints: "", authority: "" };
}

export const MsgAddMsgFeeProposalRequest: MessageFns<MsgAddMsgFeeProposalRequest> = {
  encode(message: MsgAddMsgFeeProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgTypeUrl !== "") {
      writer.uint32(10).string(message.msgTypeUrl);
    }
    if (message.additionalFee !== undefined) {
      Coin.encode(message.additionalFee, writer.uint32(18).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.recipientBasisPoints !== "") {
      writer.uint32(34).string(message.recipientBasisPoints);
    }
    if (message.authority !== "") {
      writer.uint32(42).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddMsgFeeProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddMsgFeeProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.additionalFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recipientBasisPoints = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddMsgFeeProposalRequest {
    return {
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
      additionalFee: isSet(object.additionalFee) ? Coin.fromJSON(object.additionalFee) : undefined,
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      recipientBasisPoints: isSet(object.recipientBasisPoints) ? globalThis.String(object.recipientBasisPoints) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgAddMsgFeeProposalRequest): unknown {
    const obj: any = {};
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    if (message.additionalFee !== undefined) {
      obj.additionalFee = Coin.toJSON(message.additionalFee);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.recipientBasisPoints !== "") {
      obj.recipientBasisPoints = message.recipientBasisPoints;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddMsgFeeProposalRequest>, I>>(base?: I): MsgAddMsgFeeProposalRequest {
    return MsgAddMsgFeeProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddMsgFeeProposalRequest>, I>>(object: I): MsgAddMsgFeeProposalRequest {
    const message = createBaseMsgAddMsgFeeProposalRequest();
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
      ? Coin.fromPartial(object.additionalFee)
      : undefined;
    message.recipient = object.recipient ?? "";
    message.recipientBasisPoints = object.recipientBasisPoints ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgAddMsgFeeProposalResponse(): MsgAddMsgFeeProposalResponse {
  return {};
}

export const MsgAddMsgFeeProposalResponse: MessageFns<MsgAddMsgFeeProposalResponse> = {
  encode(_: MsgAddMsgFeeProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddMsgFeeProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddMsgFeeProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddMsgFeeProposalResponse {
    return {};
  },

  toJSON(_: MsgAddMsgFeeProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddMsgFeeProposalResponse>, I>>(base?: I): MsgAddMsgFeeProposalResponse {
    return MsgAddMsgFeeProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddMsgFeeProposalResponse>, I>>(_: I): MsgAddMsgFeeProposalResponse {
    const message = createBaseMsgAddMsgFeeProposalResponse();
    return message;
  },
};

function createBaseMsgUpdateMsgFeeProposalRequest(): MsgUpdateMsgFeeProposalRequest {
  return { msgTypeUrl: "", additionalFee: undefined, recipient: "", recipientBasisPoints: "", authority: "" };
}

export const MsgUpdateMsgFeeProposalRequest: MessageFns<MsgUpdateMsgFeeProposalRequest> = {
  encode(message: MsgUpdateMsgFeeProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgTypeUrl !== "") {
      writer.uint32(10).string(message.msgTypeUrl);
    }
    if (message.additionalFee !== undefined) {
      Coin.encode(message.additionalFee, writer.uint32(18).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.recipientBasisPoints !== "") {
      writer.uint32(34).string(message.recipientBasisPoints);
    }
    if (message.authority !== "") {
      writer.uint32(42).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMsgFeeProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMsgFeeProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.additionalFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recipientBasisPoints = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateMsgFeeProposalRequest {
    return {
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
      additionalFee: isSet(object.additionalFee) ? Coin.fromJSON(object.additionalFee) : undefined,
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      recipientBasisPoints: isSet(object.recipientBasisPoints) ? globalThis.String(object.recipientBasisPoints) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpdateMsgFeeProposalRequest): unknown {
    const obj: any = {};
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    if (message.additionalFee !== undefined) {
      obj.additionalFee = Coin.toJSON(message.additionalFee);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.recipientBasisPoints !== "") {
      obj.recipientBasisPoints = message.recipientBasisPoints;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMsgFeeProposalRequest>, I>>(base?: I): MsgUpdateMsgFeeProposalRequest {
    return MsgUpdateMsgFeeProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMsgFeeProposalRequest>, I>>(
    object: I,
  ): MsgUpdateMsgFeeProposalRequest {
    const message = createBaseMsgUpdateMsgFeeProposalRequest();
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    message.additionalFee = (object.additionalFee !== undefined && object.additionalFee !== null)
      ? Coin.fromPartial(object.additionalFee)
      : undefined;
    message.recipient = object.recipient ?? "";
    message.recipientBasisPoints = object.recipientBasisPoints ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpdateMsgFeeProposalResponse(): MsgUpdateMsgFeeProposalResponse {
  return {};
}

export const MsgUpdateMsgFeeProposalResponse: MessageFns<MsgUpdateMsgFeeProposalResponse> = {
  encode(_: MsgUpdateMsgFeeProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateMsgFeeProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateMsgFeeProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateMsgFeeProposalResponse {
    return {};
  },

  toJSON(_: MsgUpdateMsgFeeProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateMsgFeeProposalResponse>, I>>(base?: I): MsgUpdateMsgFeeProposalResponse {
    return MsgUpdateMsgFeeProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateMsgFeeProposalResponse>, I>>(_: I): MsgUpdateMsgFeeProposalResponse {
    const message = createBaseMsgUpdateMsgFeeProposalResponse();
    return message;
  },
};

function createBaseMsgRemoveMsgFeeProposalRequest(): MsgRemoveMsgFeeProposalRequest {
  return { msgTypeUrl: "", authority: "" };
}

export const MsgRemoveMsgFeeProposalRequest: MessageFns<MsgRemoveMsgFeeProposalRequest> = {
  encode(message: MsgRemoveMsgFeeProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgTypeUrl !== "") {
      writer.uint32(10).string(message.msgTypeUrl);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveMsgFeeProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMsgFeeProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msgTypeUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveMsgFeeProposalRequest {
    return {
      msgTypeUrl: isSet(object.msgTypeUrl) ? globalThis.String(object.msgTypeUrl) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgRemoveMsgFeeProposalRequest): unknown {
    const obj: any = {};
    if (message.msgTypeUrl !== "") {
      obj.msgTypeUrl = message.msgTypeUrl;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMsgFeeProposalRequest>, I>>(base?: I): MsgRemoveMsgFeeProposalRequest {
    return MsgRemoveMsgFeeProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMsgFeeProposalRequest>, I>>(
    object: I,
  ): MsgRemoveMsgFeeProposalRequest {
    const message = createBaseMsgRemoveMsgFeeProposalRequest();
    message.msgTypeUrl = object.msgTypeUrl ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgRemoveMsgFeeProposalResponse(): MsgRemoveMsgFeeProposalResponse {
  return {};
}

export const MsgRemoveMsgFeeProposalResponse: MessageFns<MsgRemoveMsgFeeProposalResponse> = {
  encode(_: MsgRemoveMsgFeeProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveMsgFeeProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMsgFeeProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveMsgFeeProposalResponse {
    return {};
  },

  toJSON(_: MsgRemoveMsgFeeProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMsgFeeProposalResponse>, I>>(base?: I): MsgRemoveMsgFeeProposalResponse {
    return MsgRemoveMsgFeeProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMsgFeeProposalResponse>, I>>(_: I): MsgRemoveMsgFeeProposalResponse {
    const message = createBaseMsgRemoveMsgFeeProposalResponse();
    return message;
  },
};

function createBaseMsgUpdateNhashPerUsdMilProposalRequest(): MsgUpdateNhashPerUsdMilProposalRequest {
  return { nhashPerUsdMil: Long.UZERO, authority: "" };
}

export const MsgUpdateNhashPerUsdMilProposalRequest: MessageFns<MsgUpdateNhashPerUsdMilProposalRequest> = {
  encode(message: MsgUpdateNhashPerUsdMilProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.nhashPerUsdMil.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.nhashPerUsdMil.toString());
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNhashPerUsdMilProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNhashPerUsdMilProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nhashPerUsdMil = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateNhashPerUsdMilProposalRequest {
    return {
      nhashPerUsdMil: isSet(object.nhashPerUsdMil) ? Long.fromValue(object.nhashPerUsdMil) : Long.UZERO,
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpdateNhashPerUsdMilProposalRequest): unknown {
    const obj: any = {};
    if (!message.nhashPerUsdMil.equals(Long.UZERO)) {
      obj.nhashPerUsdMil = (message.nhashPerUsdMil || Long.UZERO).toString();
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNhashPerUsdMilProposalRequest>, I>>(
    base?: I,
  ): MsgUpdateNhashPerUsdMilProposalRequest {
    return MsgUpdateNhashPerUsdMilProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNhashPerUsdMilProposalRequest>, I>>(
    object: I,
  ): MsgUpdateNhashPerUsdMilProposalRequest {
    const message = createBaseMsgUpdateNhashPerUsdMilProposalRequest();
    message.nhashPerUsdMil = (object.nhashPerUsdMil !== undefined && object.nhashPerUsdMil !== null)
      ? Long.fromValue(object.nhashPerUsdMil)
      : Long.UZERO;
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpdateNhashPerUsdMilProposalResponse(): MsgUpdateNhashPerUsdMilProposalResponse {
  return {};
}

export const MsgUpdateNhashPerUsdMilProposalResponse: MessageFns<MsgUpdateNhashPerUsdMilProposalResponse> = {
  encode(_: MsgUpdateNhashPerUsdMilProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateNhashPerUsdMilProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateNhashPerUsdMilProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateNhashPerUsdMilProposalResponse {
    return {};
  },

  toJSON(_: MsgUpdateNhashPerUsdMilProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateNhashPerUsdMilProposalResponse>, I>>(
    base?: I,
  ): MsgUpdateNhashPerUsdMilProposalResponse {
    return MsgUpdateNhashPerUsdMilProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateNhashPerUsdMilProposalResponse>, I>>(
    _: I,
  ): MsgUpdateNhashPerUsdMilProposalResponse {
    const message = createBaseMsgUpdateNhashPerUsdMilProposalResponse();
    return message;
  },
};

function createBaseMsgUpdateConversionFeeDenomProposalRequest(): MsgUpdateConversionFeeDenomProposalRequest {
  return { conversionFeeDenom: "", authority: "" };
}

export const MsgUpdateConversionFeeDenomProposalRequest: MessageFns<MsgUpdateConversionFeeDenomProposalRequest> = {
  encode(message: MsgUpdateConversionFeeDenomProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionFeeDenom !== "") {
      writer.uint32(10).string(message.conversionFeeDenom);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateConversionFeeDenomProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateConversionFeeDenomProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversionFeeDenom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateConversionFeeDenomProposalRequest {
    return {
      conversionFeeDenom: isSet(object.conversionFeeDenom) ? globalThis.String(object.conversionFeeDenom) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpdateConversionFeeDenomProposalRequest): unknown {
    const obj: any = {};
    if (message.conversionFeeDenom !== "") {
      obj.conversionFeeDenom = message.conversionFeeDenom;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateConversionFeeDenomProposalRequest>, I>>(
    base?: I,
  ): MsgUpdateConversionFeeDenomProposalRequest {
    return MsgUpdateConversionFeeDenomProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateConversionFeeDenomProposalRequest>, I>>(
    object: I,
  ): MsgUpdateConversionFeeDenomProposalRequest {
    const message = createBaseMsgUpdateConversionFeeDenomProposalRequest();
    message.conversionFeeDenom = object.conversionFeeDenom ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpdateConversionFeeDenomProposalResponse(): MsgUpdateConversionFeeDenomProposalResponse {
  return {};
}

export const MsgUpdateConversionFeeDenomProposalResponse: MessageFns<MsgUpdateConversionFeeDenomProposalResponse> = {
  encode(_: MsgUpdateConversionFeeDenomProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateConversionFeeDenomProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateConversionFeeDenomProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateConversionFeeDenomProposalResponse {
    return {};
  },

  toJSON(_: MsgUpdateConversionFeeDenomProposalResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateConversionFeeDenomProposalResponse>, I>>(
    base?: I,
  ): MsgUpdateConversionFeeDenomProposalResponse {
    return MsgUpdateConversionFeeDenomProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateConversionFeeDenomProposalResponse>, I>>(
    _: I,
  ): MsgUpdateConversionFeeDenomProposalResponse {
    const message = createBaseMsgUpdateConversionFeeDenomProposalResponse();
    return message;
  },
};

/** Msg defines the msgfees Msg service. */
export interface Msg {
  /**
   * AssessCustomMsgFee endpoint executes the additional fee charges.
   * This will only emit the event and not persist it to the keeper.  Fees are handled with the custom msg fee handlers
   * Use Case: smart contracts will be able to charge additional fees and direct partial funds to specified recipient
   * for executing contracts
   */
  AssessCustomMsgFee(request: MsgAssessCustomMsgFeeRequest): Promise<MsgAssessCustomMsgFeeResponse>;
  /** AddMsgFeeProposal defines a governance proposal to add additional msg based fee */
  AddMsgFeeProposal(request: MsgAddMsgFeeProposalRequest): Promise<MsgAddMsgFeeProposalResponse>;
  /** UpdateMsgFeeProposal defines a governance proposal to update a current msg based fee */
  UpdateMsgFeeProposal(request: MsgUpdateMsgFeeProposalRequest): Promise<MsgUpdateMsgFeeProposalResponse>;
  /** RemoveMsgFeeProposal defines a governance proposal to delete a current msg based fee */
  RemoveMsgFeeProposal(request: MsgRemoveMsgFeeProposalRequest): Promise<MsgRemoveMsgFeeProposalResponse>;
  /** UpdateNhashPerUsdMilProposal defines a governance proposal to update the nhash per usd mil param */
  UpdateNhashPerUsdMilProposal(
    request: MsgUpdateNhashPerUsdMilProposalRequest,
  ): Promise<MsgUpdateNhashPerUsdMilProposalResponse>;
  /** UpdateConversionFeeDenomProposal defines a governance proposal to update the msg fee conversion denom */
  UpdateConversionFeeDenomProposal(
    request: MsgUpdateConversionFeeDenomProposalRequest,
  ): Promise<MsgUpdateConversionFeeDenomProposalResponse>;
}

export const MsgServiceName = "provenance.msgfees.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.AssessCustomMsgFee = this.AssessCustomMsgFee.bind(this);
    this.AddMsgFeeProposal = this.AddMsgFeeProposal.bind(this);
    this.UpdateMsgFeeProposal = this.UpdateMsgFeeProposal.bind(this);
    this.RemoveMsgFeeProposal = this.RemoveMsgFeeProposal.bind(this);
    this.UpdateNhashPerUsdMilProposal = this.UpdateNhashPerUsdMilProposal.bind(this);
    this.UpdateConversionFeeDenomProposal = this.UpdateConversionFeeDenomProposal.bind(this);
  }
  AssessCustomMsgFee(request: MsgAssessCustomMsgFeeRequest): Promise<MsgAssessCustomMsgFeeResponse> {
    const data = MsgAssessCustomMsgFeeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AssessCustomMsgFee", data);
    return promise.then((data) => MsgAssessCustomMsgFeeResponse.decode(new BinaryReader(data)));
  }

  AddMsgFeeProposal(request: MsgAddMsgFeeProposalRequest): Promise<MsgAddMsgFeeProposalResponse> {
    const data = MsgAddMsgFeeProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddMsgFeeProposal", data);
    return promise.then((data) => MsgAddMsgFeeProposalResponse.decode(new BinaryReader(data)));
  }

  UpdateMsgFeeProposal(request: MsgUpdateMsgFeeProposalRequest): Promise<MsgUpdateMsgFeeProposalResponse> {
    const data = MsgUpdateMsgFeeProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateMsgFeeProposal", data);
    return promise.then((data) => MsgUpdateMsgFeeProposalResponse.decode(new BinaryReader(data)));
  }

  RemoveMsgFeeProposal(request: MsgRemoveMsgFeeProposalRequest): Promise<MsgRemoveMsgFeeProposalResponse> {
    const data = MsgRemoveMsgFeeProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveMsgFeeProposal", data);
    return promise.then((data) => MsgRemoveMsgFeeProposalResponse.decode(new BinaryReader(data)));
  }

  UpdateNhashPerUsdMilProposal(
    request: MsgUpdateNhashPerUsdMilProposalRequest,
  ): Promise<MsgUpdateNhashPerUsdMilProposalResponse> {
    const data = MsgUpdateNhashPerUsdMilProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateNhashPerUsdMilProposal", data);
    return promise.then((data) => MsgUpdateNhashPerUsdMilProposalResponse.decode(new BinaryReader(data)));
  }

  UpdateConversionFeeDenomProposal(
    request: MsgUpdateConversionFeeDenomProposalRequest,
  ): Promise<MsgUpdateConversionFeeDenomProposalResponse> {
    const data = MsgUpdateConversionFeeDenomProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateConversionFeeDenomProposal", data);
    return promise.then((data) => MsgUpdateConversionFeeDenomProposalResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
