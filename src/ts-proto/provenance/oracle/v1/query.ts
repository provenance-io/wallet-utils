// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/oracle/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.oracle.v1";

/** QueryOracleAddressRequest queries for the address of the oracle. */
export interface QueryOracleAddressRequest {
}

/** QueryOracleAddressResponse contains the address of the oracle. */
export interface QueryOracleAddressResponse {
  /** The address of the oracle */
  address: string;
}

/** QueryOracleRequest queries the module's oracle. */
export interface QueryOracleRequest {
  /** Query contains the query data passed to the oracle. */
  query: Uint8Array;
}

/** QueryOracleResponse contains the result of the query sent to the oracle. */
export interface QueryOracleResponse {
  /** Data contains the json data returned from the oracle. */
  data: Uint8Array;
}

function createBaseQueryOracleAddressRequest(): QueryOracleAddressRequest {
  return {};
}

export const QueryOracleAddressRequest: MessageFns<QueryOracleAddressRequest> = {
  encode(_: QueryOracleAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOracleAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOracleAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryOracleAddressRequest {
    return {};
  },

  toJSON(_: QueryOracleAddressRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOracleAddressRequest>, I>>(base?: I): QueryOracleAddressRequest {
    return QueryOracleAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOracleAddressRequest>, I>>(_: I): QueryOracleAddressRequest {
    const message = createBaseQueryOracleAddressRequest();
    return message;
  },
};

function createBaseQueryOracleAddressResponse(): QueryOracleAddressResponse {
  return { address: "" };
}

export const QueryOracleAddressResponse: MessageFns<QueryOracleAddressResponse> = {
  encode(message: QueryOracleAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOracleAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOracleAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOracleAddressResponse {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryOracleAddressResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOracleAddressResponse>, I>>(base?: I): QueryOracleAddressResponse {
    return QueryOracleAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOracleAddressResponse>, I>>(object: I): QueryOracleAddressResponse {
    const message = createBaseQueryOracleAddressResponse();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryOracleRequest(): QueryOracleRequest {
  return { query: new Uint8Array(0) };
}

export const QueryOracleRequest: MessageFns<QueryOracleRequest> = {
  encode(message: QueryOracleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query.length !== 0) {
      writer.uint32(10).bytes(message.query);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOracleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOracleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOracleRequest {
    return { query: isSet(object.query) ? bytesFromBase64(object.query) : new Uint8Array(0) };
  },

  toJSON(message: QueryOracleRequest): unknown {
    const obj: any = {};
    if (message.query.length !== 0) {
      obj.query = base64FromBytes(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOracleRequest>, I>>(base?: I): QueryOracleRequest {
    return QueryOracleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOracleRequest>, I>>(object: I): QueryOracleRequest {
    const message = createBaseQueryOracleRequest();
    message.query = object.query ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryOracleResponse(): QueryOracleResponse {
  return { data: new Uint8Array(0) };
}

export const QueryOracleResponse: MessageFns<QueryOracleResponse> = {
  encode(message: QueryOracleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOracleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOracleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOracleResponse {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
  },

  toJSON(message: QueryOracleResponse): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOracleResponse>, I>>(base?: I): QueryOracleResponse {
    return QueryOracleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOracleResponse>, I>>(object: I): QueryOracleResponse {
    const message = createBaseQueryOracleResponse();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

/** Query defines the gRPC querier service for oracle module. */
export interface Query {
  /** OracleAddress returns the address of the oracle */
  OracleAddress(request: QueryOracleAddressRequest): Promise<QueryOracleAddressResponse>;
  /** Oracle forwards a query to the module's oracle */
  Oracle(request: QueryOracleRequest): Promise<QueryOracleResponse>;
}

export const QueryServiceName = "provenance.oracle.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.OracleAddress = this.OracleAddress.bind(this);
    this.Oracle = this.Oracle.bind(this);
  }
  OracleAddress(request: QueryOracleAddressRequest): Promise<QueryOracleAddressResponse> {
    const data = QueryOracleAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OracleAddress", data);
    return promise.then((data) => QueryOracleAddressResponse.decode(new BinaryReader(data)));
  }

  Oracle(request: QueryOracleRequest): Promise<QueryOracleResponse> {
    const data = QueryOracleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Oracle", data);
    return promise.then((data) => QueryOracleResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
