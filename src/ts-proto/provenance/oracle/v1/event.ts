// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/oracle/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.oracle.v1";

/** EventOracleQuerySuccess is an event for when the chain receives a successful response from an oracle query */
export interface EventOracleQuerySuccess {
  /** channel is the local channel that the oracle query response was received from */
  channel: string;
  /** sequence_id is a unique identifier of the query */
  sequenceId: string;
  /** result is the data received from the query */
  result: string;
}

/** EventOracleQueryError is an event for when the chain receives an error response from an oracle query */
export interface EventOracleQueryError {
  /** channel is the local channel that the oracle query response was received from */
  channel: string;
  /** sequence_id is a unique identifier of the query */
  sequenceId: string;
  /** error is the error message received from the query */
  error: string;
}

/** EventOracleQueryTimeout is an event for when the chain receives a timeout from an oracle query */
export interface EventOracleQueryTimeout {
  /** channel is the local channel that the oracle timeout was received from */
  channel: string;
  /** sequence_id is a unique identifier of the query */
  sequenceId: string;
}

function createBaseEventOracleQuerySuccess(): EventOracleQuerySuccess {
  return { channel: "", sequenceId: "", result: "" };
}

export const EventOracleQuerySuccess: MessageFns<EventOracleQuerySuccess> = {
  encode(message: EventOracleQuerySuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    if (message.sequenceId !== "") {
      writer.uint32(18).string(message.sequenceId);
    }
    if (message.result !== "") {
      writer.uint32(26).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOracleQuerySuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOracleQuerySuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sequenceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.result = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOracleQuerySuccess {
    return {
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      sequenceId: isSet(object.sequenceId) ? globalThis.String(object.sequenceId) : "",
      result: isSet(object.result) ? globalThis.String(object.result) : "",
    };
  },

  toJSON(message: EventOracleQuerySuccess): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.sequenceId !== "") {
      obj.sequenceId = message.sequenceId;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOracleQuerySuccess>, I>>(base?: I): EventOracleQuerySuccess {
    return EventOracleQuerySuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOracleQuerySuccess>, I>>(object: I): EventOracleQuerySuccess {
    const message = createBaseEventOracleQuerySuccess();
    message.channel = object.channel ?? "";
    message.sequenceId = object.sequenceId ?? "";
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseEventOracleQueryError(): EventOracleQueryError {
  return { channel: "", sequenceId: "", error: "" };
}

export const EventOracleQueryError: MessageFns<EventOracleQueryError> = {
  encode(message: EventOracleQueryError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    if (message.sequenceId !== "") {
      writer.uint32(18).string(message.sequenceId);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOracleQueryError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOracleQueryError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sequenceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOracleQueryError {
    return {
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      sequenceId: isSet(object.sequenceId) ? globalThis.String(object.sequenceId) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: EventOracleQueryError): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.sequenceId !== "") {
      obj.sequenceId = message.sequenceId;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOracleQueryError>, I>>(base?: I): EventOracleQueryError {
    return EventOracleQueryError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOracleQueryError>, I>>(object: I): EventOracleQueryError {
    const message = createBaseEventOracleQueryError();
    message.channel = object.channel ?? "";
    message.sequenceId = object.sequenceId ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseEventOracleQueryTimeout(): EventOracleQueryTimeout {
  return { channel: "", sequenceId: "" };
}

export const EventOracleQueryTimeout: MessageFns<EventOracleQueryTimeout> = {
  encode(message: EventOracleQueryTimeout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    if (message.sequenceId !== "") {
      writer.uint32(18).string(message.sequenceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOracleQueryTimeout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOracleQueryTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sequenceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOracleQueryTimeout {
    return {
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      sequenceId: isSet(object.sequenceId) ? globalThis.String(object.sequenceId) : "",
    };
  },

  toJSON(message: EventOracleQueryTimeout): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.sequenceId !== "") {
      obj.sequenceId = message.sequenceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOracleQueryTimeout>, I>>(base?: I): EventOracleQueryTimeout {
    return EventOracleQueryTimeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOracleQueryTimeout>, I>>(object: I): EventOracleQueryTimeout {
    const message = createBaseEventOracleQueryTimeout();
    message.channel = object.channel ?? "";
    message.sequenceId = object.sequenceId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
