// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: provenance/oracle/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "provenance.oracle.v1";

/** MsgSendQueryOracleRequest queries an oracle on another chain */
export interface MsgSendQueryOracleRequest {
  /** Query contains the query data passed to the oracle. */
  query: Uint8Array;
  /** Channel is the channel to the oracle. */
  channel: string;
  /** The signing authority for the request */
  authority: string;
}

/** MsgSendQueryOracleResponse contains the id of the oracle query. */
export interface MsgSendQueryOracleResponse {
  /** The sequence number that uniquely identifies the query. */
  sequence: Long;
}

/** MsgUpdateOracleRequest is the request type for updating an oracle's contract address */
export interface MsgUpdateOracleRequest {
  /** The address of the oracle's contract */
  address: string;
  /** The signing authorities for the request */
  authority: string;
}

/** MsgUpdateOracleResponse is the response type for updating the oracle. */
export interface MsgUpdateOracleResponse {
}

function createBaseMsgSendQueryOracleRequest(): MsgSendQueryOracleRequest {
  return { query: new Uint8Array(0), channel: "", authority: "" };
}

export const MsgSendQueryOracleRequest: MessageFns<MsgSendQueryOracleRequest> = {
  encode(message: MsgSendQueryOracleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query.length !== 0) {
      writer.uint32(10).bytes(message.query);
    }
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    if (message.authority !== "") {
      writer.uint32(34).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSendQueryOracleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSendQueryOracleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSendQueryOracleRequest {
    return {
      query: isSet(object.query) ? bytesFromBase64(object.query) : new Uint8Array(0),
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgSendQueryOracleRequest): unknown {
    const obj: any = {};
    if (message.query.length !== 0) {
      obj.query = base64FromBytes(message.query);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSendQueryOracleRequest>, I>>(base?: I): MsgSendQueryOracleRequest {
    return MsgSendQueryOracleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSendQueryOracleRequest>, I>>(object: I): MsgSendQueryOracleRequest {
    const message = createBaseMsgSendQueryOracleRequest();
    message.query = object.query ?? new Uint8Array(0);
    message.channel = object.channel ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgSendQueryOracleResponse(): MsgSendQueryOracleResponse {
  return { sequence: Long.UZERO };
}

export const MsgSendQueryOracleResponse: MessageFns<MsgSendQueryOracleResponse> = {
  encode(message: MsgSendQueryOracleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.sequence.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSendQueryOracleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSendQueryOracleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSendQueryOracleResponse {
    return { sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO };
  },

  toJSON(message: MsgSendQueryOracleResponse): unknown {
    const obj: any = {};
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSendQueryOracleResponse>, I>>(base?: I): MsgSendQueryOracleResponse {
    return MsgSendQueryOracleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSendQueryOracleResponse>, I>>(object: I): MsgSendQueryOracleResponse {
    const message = createBaseMsgSendQueryOracleResponse();
    message.sequence = (object.sequence !== undefined && object.sequence !== null)
      ? Long.fromValue(object.sequence)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateOracleRequest(): MsgUpdateOracleRequest {
  return { address: "", authority: "" };
}

export const MsgUpdateOracleRequest: MessageFns<MsgUpdateOracleRequest> = {
  encode(message: MsgUpdateOracleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateOracleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateOracleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateOracleRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpdateOracleRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateOracleRequest>, I>>(base?: I): MsgUpdateOracleRequest {
    return MsgUpdateOracleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateOracleRequest>, I>>(object: I): MsgUpdateOracleRequest {
    const message = createBaseMsgUpdateOracleRequest();
    message.address = object.address ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpdateOracleResponse(): MsgUpdateOracleResponse {
  return {};
}

export const MsgUpdateOracleResponse: MessageFns<MsgUpdateOracleResponse> = {
  encode(_: MsgUpdateOracleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateOracleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateOracleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateOracleResponse {
    return {};
  },

  toJSON(_: MsgUpdateOracleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateOracleResponse>, I>>(base?: I): MsgUpdateOracleResponse {
    return MsgUpdateOracleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateOracleResponse>, I>>(_: I): MsgUpdateOracleResponse {
    const message = createBaseMsgUpdateOracleResponse();
    return message;
  },
};

/** Msg */
export interface Msg {
  /** UpdateOracle is the RPC endpoint for updating the oracle */
  UpdateOracle(request: MsgUpdateOracleRequest): Promise<MsgUpdateOracleResponse>;
  /** SendQueryOracle sends a query to an oracle on another chain */
  SendQueryOracle(request: MsgSendQueryOracleRequest): Promise<MsgSendQueryOracleResponse>;
}

export const MsgServiceName = "provenance.oracle.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateOracle = this.UpdateOracle.bind(this);
    this.SendQueryOracle = this.SendQueryOracle.bind(this);
  }
  UpdateOracle(request: MsgUpdateOracleRequest): Promise<MsgUpdateOracleResponse> {
    const data = MsgUpdateOracleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOracle", data);
    return promise.then((data) => MsgUpdateOracleResponse.decode(new BinaryReader(data)));
  }

  SendQueryOracle(request: MsgSendQueryOracleRequest): Promise<MsgSendQueryOracleResponse> {
    const data = MsgSendQueryOracleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendQueryOracle", data);
    return promise.then((data) => MsgSendQueryOracleResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
