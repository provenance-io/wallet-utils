// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: tendermint/types/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "tendermint.types";

export interface EventDataRoundState {
  height: Long;
  round: number;
  step: string;
}

function createBaseEventDataRoundState(): EventDataRoundState {
  return { height: Long.ZERO, round: 0, step: "" };
}

export const EventDataRoundState: MessageFns<EventDataRoundState> = {
  encode(message: EventDataRoundState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.height.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.height.toString());
    }
    if (message.round !== 0) {
      writer.uint32(16).int32(message.round);
    }
    if (message.step !== "") {
      writer.uint32(26).string(message.step);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDataRoundState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDataRoundState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.round = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.step = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDataRoundState {
    return {
      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      step: isSet(object.step) ? globalThis.String(object.step) : "",
    };
  },

  toJSON(message: EventDataRoundState): unknown {
    const obj: any = {};
    if (!message.height.equals(Long.ZERO)) {
      obj.height = (message.height || Long.ZERO).toString();
    }
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.step !== "") {
      obj.step = message.step;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventDataRoundState>, I>>(base?: I): EventDataRoundState {
    return EventDataRoundState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventDataRoundState>, I>>(object: I): EventDataRoundState {
    const message = createBaseEventDataRoundState();
    message.height = (object.height !== undefined && object.height !== null)
      ? Long.fromValue(object.height)
      : Long.ZERO;
    message.round = object.round ?? 0;
    message.step = object.step ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
