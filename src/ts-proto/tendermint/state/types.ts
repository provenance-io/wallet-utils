// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: tendermint/state/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Event, ExecTxResult, ResponseFinalizeBlock, ValidatorUpdate } from "../abci/types";
import { ConsensusParams } from "../types/params";
import { BlockID } from "../types/types";
import { ValidatorSet } from "../types/validator";
import { Consensus } from "../version/types";

export const protobufPackage = "tendermint.state";

/**
 * LegacyABCIResponses retains the responses
 * of the legacy ABCI calls during block processing.
 * Note ReponseDeliverTx is renamed to ExecTxResult but they are semantically the same
 * Kept for backwards compatibility for versions prior to v0.38
 */
export interface LegacyABCIResponses {
  deliverTxs: ExecTxResult[];
  endBlock?: ResponseEndBlock | undefined;
  beginBlock?: ResponseBeginBlock | undefined;
}

/** ResponseBeginBlock is kept for backwards compatibility for versions prior to v0.38 */
export interface ResponseBeginBlock {
  events: Event[];
}

/** ResponseEndBlock is kept for backwards compatibility for versions prior to v0.38 */
export interface ResponseEndBlock {
  validatorUpdates: ValidatorUpdate[];
  consensusParamUpdates?: ConsensusParams | undefined;
  events: Event[];
}

/** ValidatorsInfo represents the latest validator set, or the last height it changed */
export interface ValidatorsInfo {
  validatorSet?: ValidatorSet | undefined;
  lastHeightChanged: Long;
}

/** ConsensusParamsInfo represents the latest consensus params, or the last height it changed */
export interface ConsensusParamsInfo {
  consensusParams?: ConsensusParams | undefined;
  lastHeightChanged: Long;
}

export interface ABCIResponsesInfo {
  legacyAbciResponses?: LegacyABCIResponses | undefined;
  height: Long;
  responseFinalizeBlock?: ResponseFinalizeBlock | undefined;
}

export interface Version {
  consensus?: Consensus | undefined;
  software: string;
}

export interface State {
  version?:
    | Version
    | undefined;
  /** immutable */
  chainId: string;
  initialHeight: Long;
  /** LastBlockHeight=0 at genesis (ie. block(H=0) does not exist) */
  lastBlockHeight: Long;
  lastBlockId?: BlockID | undefined;
  lastBlockTime?:
    | Date
    | undefined;
  /**
   * LastValidators is used to validate block.LastCommit.
   * Validators are persisted to the database separately every time they change,
   * so we can query for historical validator sets.
   * Note that if s.LastBlockHeight causes a valset change,
   * we set s.LastHeightValidatorsChanged = s.LastBlockHeight + 1 + 1
   * Extra +1 due to nextValSet delay.
   */
  nextValidators?: ValidatorSet | undefined;
  validators?: ValidatorSet | undefined;
  lastValidators?: ValidatorSet | undefined;
  lastHeightValidatorsChanged: Long;
  /**
   * Consensus parameters used for validating blocks.
   * Changes returned by EndBlock and updated after Commit.
   */
  consensusParams?: ConsensusParams | undefined;
  lastHeightConsensusParamsChanged: Long;
  /** Merkle root of the results from executing prev block */
  lastResultsHash: Uint8Array;
  /** the latest AppHash we've received from calling abci.Commit() */
  appHash: Uint8Array;
}

function createBaseLegacyABCIResponses(): LegacyABCIResponses {
  return { deliverTxs: [], endBlock: undefined, beginBlock: undefined };
}

export const LegacyABCIResponses: MessageFns<LegacyABCIResponses> = {
  encode(message: LegacyABCIResponses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deliverTxs) {
      ExecTxResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.endBlock !== undefined) {
      ResponseEndBlock.encode(message.endBlock, writer.uint32(18).fork()).join();
    }
    if (message.beginBlock !== undefined) {
      ResponseBeginBlock.encode(message.beginBlock, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyABCIResponses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyABCIResponses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deliverTxs.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endBlock = ResponseEndBlock.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.beginBlock = ResponseBeginBlock.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyABCIResponses {
    return {
      deliverTxs: globalThis.Array.isArray(object?.deliverTxs)
        ? object.deliverTxs.map((e: any) => ExecTxResult.fromJSON(e))
        : [],
      endBlock: isSet(object.endBlock) ? ResponseEndBlock.fromJSON(object.endBlock) : undefined,
      beginBlock: isSet(object.beginBlock) ? ResponseBeginBlock.fromJSON(object.beginBlock) : undefined,
    };
  },

  toJSON(message: LegacyABCIResponses): unknown {
    const obj: any = {};
    if (message.deliverTxs?.length) {
      obj.deliverTxs = message.deliverTxs.map((e) => ExecTxResult.toJSON(e));
    }
    if (message.endBlock !== undefined) {
      obj.endBlock = ResponseEndBlock.toJSON(message.endBlock);
    }
    if (message.beginBlock !== undefined) {
      obj.beginBlock = ResponseBeginBlock.toJSON(message.beginBlock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LegacyABCIResponses>, I>>(base?: I): LegacyABCIResponses {
    return LegacyABCIResponses.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LegacyABCIResponses>, I>>(object: I): LegacyABCIResponses {
    const message = createBaseLegacyABCIResponses();
    message.deliverTxs = object.deliverTxs?.map((e) => ExecTxResult.fromPartial(e)) || [];
    message.endBlock = (object.endBlock !== undefined && object.endBlock !== null)
      ? ResponseEndBlock.fromPartial(object.endBlock)
      : undefined;
    message.beginBlock = (object.beginBlock !== undefined && object.beginBlock !== null)
      ? ResponseBeginBlock.fromPartial(object.beginBlock)
      : undefined;
    return message;
  },
};

function createBaseResponseBeginBlock(): ResponseBeginBlock {
  return { events: [] };
}

export const ResponseBeginBlock: MessageFns<ResponseBeginBlock> = {
  encode(message: ResponseBeginBlock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBeginBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBeginBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBeginBlock {
    return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: ResponseBeginBlock): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseBeginBlock>, I>>(base?: I): ResponseBeginBlock {
    return ResponseBeginBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseBeginBlock>, I>>(object: I): ResponseBeginBlock {
    const message = createBaseResponseBeginBlock();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResponseEndBlock(): ResponseEndBlock {
  return { validatorUpdates: [], consensusParamUpdates: undefined, events: [] };
}

export const ResponseEndBlock: MessageFns<ResponseEndBlock> = {
  encode(message: ResponseEndBlock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.validatorUpdates) {
      ValidatorUpdate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.consensusParamUpdates !== undefined) {
      ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).join();
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseEndBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseEndBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorUpdates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consensusParamUpdates = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseEndBlock {
    return {
      validatorUpdates: globalThis.Array.isArray(object?.validatorUpdates)
        ? object.validatorUpdates.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      consensusParamUpdates: isSet(object.consensusParamUpdates)
        ? ConsensusParams.fromJSON(object.consensusParamUpdates)
        : undefined,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: ResponseEndBlock): unknown {
    const obj: any = {};
    if (message.validatorUpdates?.length) {
      obj.validatorUpdates = message.validatorUpdates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensusParamUpdates !== undefined) {
      obj.consensusParamUpdates = ConsensusParams.toJSON(message.consensusParamUpdates);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseEndBlock>, I>>(base?: I): ResponseEndBlock {
    return ResponseEndBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseEndBlock>, I>>(object: I): ResponseEndBlock {
    const message = createBaseResponseEndBlock();
    message.validatorUpdates = object.validatorUpdates?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.consensusParamUpdates =
      (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null)
        ? ConsensusParams.fromPartial(object.consensusParamUpdates)
        : undefined;
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidatorsInfo(): ValidatorsInfo {
  return { validatorSet: undefined, lastHeightChanged: Long.ZERO };
}

export const ValidatorsInfo: MessageFns<ValidatorsInfo> = {
  encode(message: ValidatorsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorSet !== undefined) {
      ValidatorSet.encode(message.validatorSet, writer.uint32(10).fork()).join();
    }
    if (!message.lastHeightChanged.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.lastHeightChanged.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorSet = ValidatorSet.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastHeightChanged = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorsInfo {
    return {
      validatorSet: isSet(object.validatorSet) ? ValidatorSet.fromJSON(object.validatorSet) : undefined,
      lastHeightChanged: isSet(object.lastHeightChanged) ? Long.fromValue(object.lastHeightChanged) : Long.ZERO,
    };
  },

  toJSON(message: ValidatorsInfo): unknown {
    const obj: any = {};
    if (message.validatorSet !== undefined) {
      obj.validatorSet = ValidatorSet.toJSON(message.validatorSet);
    }
    if (!message.lastHeightChanged.equals(Long.ZERO)) {
      obj.lastHeightChanged = (message.lastHeightChanged || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorsInfo>, I>>(base?: I): ValidatorsInfo {
    return ValidatorsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorsInfo>, I>>(object: I): ValidatorsInfo {
    const message = createBaseValidatorsInfo();
    message.validatorSet = (object.validatorSet !== undefined && object.validatorSet !== null)
      ? ValidatorSet.fromPartial(object.validatorSet)
      : undefined;
    message.lastHeightChanged = (object.lastHeightChanged !== undefined && object.lastHeightChanged !== null)
      ? Long.fromValue(object.lastHeightChanged)
      : Long.ZERO;
    return message;
  },
};

function createBaseConsensusParamsInfo(): ConsensusParamsInfo {
  return { consensusParams: undefined, lastHeightChanged: Long.ZERO };
}

export const ConsensusParamsInfo: MessageFns<ConsensusParamsInfo> = {
  encode(message: ConsensusParamsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consensusParams !== undefined) {
      ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).join();
    }
    if (!message.lastHeightChanged.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.lastHeightChanged.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsensusParamsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsensusParamsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastHeightChanged = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsensusParamsInfo {
    return {
      consensusParams: isSet(object.consensusParams) ? ConsensusParams.fromJSON(object.consensusParams) : undefined,
      lastHeightChanged: isSet(object.lastHeightChanged) ? Long.fromValue(object.lastHeightChanged) : Long.ZERO,
    };
  },

  toJSON(message: ConsensusParamsInfo): unknown {
    const obj: any = {};
    if (message.consensusParams !== undefined) {
      obj.consensusParams = ConsensusParams.toJSON(message.consensusParams);
    }
    if (!message.lastHeightChanged.equals(Long.ZERO)) {
      obj.lastHeightChanged = (message.lastHeightChanged || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsensusParamsInfo>, I>>(base?: I): ConsensusParamsInfo {
    return ConsensusParamsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsensusParamsInfo>, I>>(object: I): ConsensusParamsInfo {
    const message = createBaseConsensusParamsInfo();
    message.consensusParams = (object.consensusParams !== undefined && object.consensusParams !== null)
      ? ConsensusParams.fromPartial(object.consensusParams)
      : undefined;
    message.lastHeightChanged = (object.lastHeightChanged !== undefined && object.lastHeightChanged !== null)
      ? Long.fromValue(object.lastHeightChanged)
      : Long.ZERO;
    return message;
  },
};

function createBaseABCIResponsesInfo(): ABCIResponsesInfo {
  return { legacyAbciResponses: undefined, height: Long.ZERO, responseFinalizeBlock: undefined };
}

export const ABCIResponsesInfo: MessageFns<ABCIResponsesInfo> = {
  encode(message: ABCIResponsesInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.legacyAbciResponses !== undefined) {
      LegacyABCIResponses.encode(message.legacyAbciResponses, writer.uint32(10).fork()).join();
    }
    if (!message.height.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.height.toString());
    }
    if (message.responseFinalizeBlock !== undefined) {
      ResponseFinalizeBlock.encode(message.responseFinalizeBlock, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABCIResponsesInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABCIResponsesInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.legacyAbciResponses = LegacyABCIResponses.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.responseFinalizeBlock = ResponseFinalizeBlock.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABCIResponsesInfo {
    return {
      legacyAbciResponses: isSet(object.legacyAbciResponses)
        ? LegacyABCIResponses.fromJSON(object.legacyAbciResponses)
        : undefined,
      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,
      responseFinalizeBlock: isSet(object.responseFinalizeBlock)
        ? ResponseFinalizeBlock.fromJSON(object.responseFinalizeBlock)
        : undefined,
    };
  },

  toJSON(message: ABCIResponsesInfo): unknown {
    const obj: any = {};
    if (message.legacyAbciResponses !== undefined) {
      obj.legacyAbciResponses = LegacyABCIResponses.toJSON(message.legacyAbciResponses);
    }
    if (!message.height.equals(Long.ZERO)) {
      obj.height = (message.height || Long.ZERO).toString();
    }
    if (message.responseFinalizeBlock !== undefined) {
      obj.responseFinalizeBlock = ResponseFinalizeBlock.toJSON(message.responseFinalizeBlock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ABCIResponsesInfo>, I>>(base?: I): ABCIResponsesInfo {
    return ABCIResponsesInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ABCIResponsesInfo>, I>>(object: I): ABCIResponsesInfo {
    const message = createBaseABCIResponsesInfo();
    message.legacyAbciResponses = (object.legacyAbciResponses !== undefined && object.legacyAbciResponses !== null)
      ? LegacyABCIResponses.fromPartial(object.legacyAbciResponses)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? Long.fromValue(object.height)
      : Long.ZERO;
    message.responseFinalizeBlock =
      (object.responseFinalizeBlock !== undefined && object.responseFinalizeBlock !== null)
        ? ResponseFinalizeBlock.fromPartial(object.responseFinalizeBlock)
        : undefined;
    return message;
  },
};

function createBaseVersion(): Version {
  return { consensus: undefined, software: "" };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consensus !== undefined) {
      Consensus.encode(message.consensus, writer.uint32(10).fork()).join();
    }
    if (message.software !== "") {
      writer.uint32(18).string(message.software);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consensus = Consensus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.software = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      consensus: isSet(object.consensus) ? Consensus.fromJSON(object.consensus) : undefined,
      software: isSet(object.software) ? globalThis.String(object.software) : "",
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.consensus !== undefined) {
      obj.consensus = Consensus.toJSON(message.consensus);
    }
    if (message.software !== "") {
      obj.software = message.software;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Version>, I>>(base?: I): Version {
    return Version.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Version>, I>>(object: I): Version {
    const message = createBaseVersion();
    message.consensus = (object.consensus !== undefined && object.consensus !== null)
      ? Consensus.fromPartial(object.consensus)
      : undefined;
    message.software = object.software ?? "";
    return message;
  },
};

function createBaseState(): State {
  return {
    version: undefined,
    chainId: "",
    initialHeight: Long.ZERO,
    lastBlockHeight: Long.ZERO,
    lastBlockId: undefined,
    lastBlockTime: undefined,
    nextValidators: undefined,
    validators: undefined,
    lastValidators: undefined,
    lastHeightValidatorsChanged: Long.ZERO,
    consensusParams: undefined,
    lastHeightConsensusParamsChanged: Long.ZERO,
    lastResultsHash: new Uint8Array(0),
    appHash: new Uint8Array(0),
  };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (!message.initialHeight.equals(Long.ZERO)) {
      writer.uint32(112).int64(message.initialHeight.toString());
    }
    if (!message.lastBlockHeight.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.lastBlockHeight.toString());
    }
    if (message.lastBlockId !== undefined) {
      BlockID.encode(message.lastBlockId, writer.uint32(34).fork()).join();
    }
    if (message.lastBlockTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastBlockTime), writer.uint32(42).fork()).join();
    }
    if (message.nextValidators !== undefined) {
      ValidatorSet.encode(message.nextValidators, writer.uint32(50).fork()).join();
    }
    if (message.validators !== undefined) {
      ValidatorSet.encode(message.validators, writer.uint32(58).fork()).join();
    }
    if (message.lastValidators !== undefined) {
      ValidatorSet.encode(message.lastValidators, writer.uint32(66).fork()).join();
    }
    if (!message.lastHeightValidatorsChanged.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.lastHeightValidatorsChanged.toString());
    }
    if (message.consensusParams !== undefined) {
      ConsensusParams.encode(message.consensusParams, writer.uint32(82).fork()).join();
    }
    if (!message.lastHeightConsensusParamsChanged.equals(Long.ZERO)) {
      writer.uint32(88).int64(message.lastHeightConsensusParamsChanged.toString());
    }
    if (message.lastResultsHash.length !== 0) {
      writer.uint32(98).bytes(message.lastResultsHash);
    }
    if (message.appHash.length !== 0) {
      writer.uint32(106).bytes(message.appHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.initialHeight = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lastBlockHeight = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastBlockId = BlockID.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastBlockTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nextValidators = ValidatorSet.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validators = ValidatorSet.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.lastValidators = ValidatorSet.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.lastHeightValidatorsChanged = Long.fromString(reader.int64().toString());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.lastHeightConsensusParamsChanged = Long.fromString(reader.int64().toString());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.lastResultsHash = reader.bytes();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.appHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State {
    return {
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      initialHeight: isSet(object.initialHeight) ? Long.fromValue(object.initialHeight) : Long.ZERO,
      lastBlockHeight: isSet(object.lastBlockHeight) ? Long.fromValue(object.lastBlockHeight) : Long.ZERO,
      lastBlockId: isSet(object.lastBlockId) ? BlockID.fromJSON(object.lastBlockId) : undefined,
      lastBlockTime: isSet(object.lastBlockTime) ? fromJsonTimestamp(object.lastBlockTime) : undefined,
      nextValidators: isSet(object.nextValidators) ? ValidatorSet.fromJSON(object.nextValidators) : undefined,
      validators: isSet(object.validators) ? ValidatorSet.fromJSON(object.validators) : undefined,
      lastValidators: isSet(object.lastValidators) ? ValidatorSet.fromJSON(object.lastValidators) : undefined,
      lastHeightValidatorsChanged: isSet(object.lastHeightValidatorsChanged)
        ? Long.fromValue(object.lastHeightValidatorsChanged)
        : Long.ZERO,
      consensusParams: isSet(object.consensusParams) ? ConsensusParams.fromJSON(object.consensusParams) : undefined,
      lastHeightConsensusParamsChanged: isSet(object.lastHeightConsensusParamsChanged)
        ? Long.fromValue(object.lastHeightConsensusParamsChanged)
        : Long.ZERO,
      lastResultsHash: isSet(object.lastResultsHash) ? bytesFromBase64(object.lastResultsHash) : new Uint8Array(0),
      appHash: isSet(object.appHash) ? bytesFromBase64(object.appHash) : new Uint8Array(0),
    };
  },

  toJSON(message: State): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (!message.initialHeight.equals(Long.ZERO)) {
      obj.initialHeight = (message.initialHeight || Long.ZERO).toString();
    }
    if (!message.lastBlockHeight.equals(Long.ZERO)) {
      obj.lastBlockHeight = (message.lastBlockHeight || Long.ZERO).toString();
    }
    if (message.lastBlockId !== undefined) {
      obj.lastBlockId = BlockID.toJSON(message.lastBlockId);
    }
    if (message.lastBlockTime !== undefined) {
      obj.lastBlockTime = message.lastBlockTime.toISOString();
    }
    if (message.nextValidators !== undefined) {
      obj.nextValidators = ValidatorSet.toJSON(message.nextValidators);
    }
    if (message.validators !== undefined) {
      obj.validators = ValidatorSet.toJSON(message.validators);
    }
    if (message.lastValidators !== undefined) {
      obj.lastValidators = ValidatorSet.toJSON(message.lastValidators);
    }
    if (!message.lastHeightValidatorsChanged.equals(Long.ZERO)) {
      obj.lastHeightValidatorsChanged = (message.lastHeightValidatorsChanged || Long.ZERO).toString();
    }
    if (message.consensusParams !== undefined) {
      obj.consensusParams = ConsensusParams.toJSON(message.consensusParams);
    }
    if (!message.lastHeightConsensusParamsChanged.equals(Long.ZERO)) {
      obj.lastHeightConsensusParamsChanged = (message.lastHeightConsensusParamsChanged || Long.ZERO).toString();
    }
    if (message.lastResultsHash.length !== 0) {
      obj.lastResultsHash = base64FromBytes(message.lastResultsHash);
    }
    if (message.appHash.length !== 0) {
      obj.appHash = base64FromBytes(message.appHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State>, I>>(base?: I): State {
    return State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState();
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.chainId = object.chainId ?? "";
    message.initialHeight = (object.initialHeight !== undefined && object.initialHeight !== null)
      ? Long.fromValue(object.initialHeight)
      : Long.ZERO;
    message.lastBlockHeight = (object.lastBlockHeight !== undefined && object.lastBlockHeight !== null)
      ? Long.fromValue(object.lastBlockHeight)
      : Long.ZERO;
    message.lastBlockId = (object.lastBlockId !== undefined && object.lastBlockId !== null)
      ? BlockID.fromPartial(object.lastBlockId)
      : undefined;
    message.lastBlockTime = object.lastBlockTime ?? undefined;
    message.nextValidators = (object.nextValidators !== undefined && object.nextValidators !== null)
      ? ValidatorSet.fromPartial(object.nextValidators)
      : undefined;
    message.validators = (object.validators !== undefined && object.validators !== null)
      ? ValidatorSet.fromPartial(object.validators)
      : undefined;
    message.lastValidators = (object.lastValidators !== undefined && object.lastValidators !== null)
      ? ValidatorSet.fromPartial(object.lastValidators)
      : undefined;
    message.lastHeightValidatorsChanged =
      (object.lastHeightValidatorsChanged !== undefined && object.lastHeightValidatorsChanged !== null)
        ? Long.fromValue(object.lastHeightValidatorsChanged)
        : Long.ZERO;
    message.consensusParams = (object.consensusParams !== undefined && object.consensusParams !== null)
      ? ConsensusParams.fromPartial(object.consensusParams)
      : undefined;
    message.lastHeightConsensusParamsChanged =
      (object.lastHeightConsensusParamsChanged !== undefined && object.lastHeightConsensusParamsChanged !== null)
        ? Long.fromValue(object.lastHeightConsensusParamsChanged)
        : Long.ZERO;
    message.lastResultsHash = object.lastResultsHash ?? new Uint8Array(0);
    message.appHash = object.appHash ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
